# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Dmytro Kazanzhy, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-12 16:28+0000\n"
"PO-Revision-Date: 2021-06-28 00:51+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://www.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

msgid "Creating Built Distributions"
msgstr "Створення вбудованих дистрибутивів"

msgid ""
"This document is being retained solely until the ``setuptools`` "
"documentation at https://setuptools.readthedocs.io/en/latest/setuptools.html "
"independently covers all of the relevant information currently included here."
msgstr ""
"Цей документ зберігається лише до тих пір, поки документація ``setuptools`` "
"за адресою https://setuptools.readthedocs.io/en/latest/setuptools.html "
"окремо не охопить всю відповідну інформацію, яка зараз включена тут."

msgid ""
"A \"built distribution\" is what you're probably used to thinking of either "
"as a \"binary package\" or an \"installer\" (depending on your background).  "
"It's not necessarily binary, though, because it might contain only Python "
"source code and/or byte-code; and we don't call it a package, because that "
"word is already spoken for in Python.  (And \"installer\" is a term specific "
"to the world of mainstream desktop systems.)"
msgstr ""
"\"Вбудований дистрибутив\" — це те, що ви, ймовірно, звикли вважати "
"\"двійковим пакетом\" або \"інсталятором\" (залежно від вашого досвіду). "
"Однак він не обов’язково є двійковим, оскільки він може містити лише "
"вихідний код Python та/або байт-код; і ми не називаємо це пакетом, тому що "
"це слово вже вимовлено в Python. (А \"інсталятор\" — це термін, характерний "
"для світу основних настільних систем.)"

msgid ""
"A built distribution is how you make life as easy as possible for installers "
"of your module distribution: for users of RPM-based Linux systems, it's a "
"binary RPM; for Windows users, it's an executable installer; for Debian-"
"based Linux users, it's a Debian package; and so forth.  Obviously, no one "
"person will be able to create built distributions for every platform under "
"the sun, so the Distutils are designed to enable module developers to "
"concentrate on their specialty---writing code and creating source "
"distributions---while an intermediary species called *packagers* springs up "
"to turn source distributions into built distributions for as many platforms "
"as there are packagers."
msgstr ""
"Вбудований дистрибутив – це те, як ви максимально полегшуєте життя "
"інсталяторам вашого дистрибутива модуля: для користувачів систем Linux на "
"основі RPM це двійковий RPM; для користувачів Windows це виконуваний "
"інсталятор; для користувачів Linux на базі Debian це пакет Debian; і так "
"далі. Очевидно, що ніхто не зможе створити вбудовані дистрибутиви для будь-"
"якої платформи під сонцем, тому Distutils розроблено, щоб дозволити "
"розробникам модулів зосередитися на своїй спеціальності --- написанні коду "
"та створенні вихідних дистрибутивів --- тоді як проміжний вид, який "
"називається *packagers* з’являється, щоб перетворити вихідні дистрибутиви на "
"вбудовані дистрибутиви для стільки платформ, скільки пакувальників."

msgid ""
"Of course, the module developer could be their own packager; or the packager "
"could be a volunteer \"out there\" somewhere who has access to a platform "
"which the original developer does not; or it could be software periodically "
"grabbing new source distributions and turning them into built distributions "
"for as many platforms as the software has access to.  Regardless of who they "
"are, a packager uses the setup script and the :command:`bdist` command "
"family to generate built distributions."
msgstr ""
"Звичайно, розробник модуля може бути власним пакувальником; або пакувальник "
"може бути волонтером \"десь там\", який має доступ до платформи, якого не "
"має оригінальний розробник; або це може бути програмне забезпечення, яке "
"періодично збирає нові вихідні дистрибутиви та перетворює їх на вбудовані "
"дистрибутиви для стількох платформ, до яких програмне забезпечення має "
"доступ. Незалежно від того, ким вони є, пакетувальник використовує сценарій "
"налаштування та сімейство команд :command:`bdist` для створення вбудованих "
"дистрибутивів."

msgid ""
"As a simple example, if I run the following command in the Distutils source "
"tree::"
msgstr ""
"Як простий приклад, якщо я запусту таку команду в дереві вихідних кодів "
"Distutils::"

msgid ""
"then the Distutils builds my module distribution (the Distutils itself in "
"this case), does a \"fake\" installation (also in the :file:`build` "
"directory), and creates the default type of built distribution for my "
"platform.  The default format for built distributions is a \"dumb\" tar file "
"on Unix, and a simple executable installer on Windows.  (That tar file is "
"considered \"dumb\" because it has to be unpacked in a specific location to "
"work.)"
msgstr ""
"потім Distutils збирає мій дистрибутив модуля (у цьому випадку сам "
"Distutils), виконує \"підроблену\" інсталяцію (також у каталозі :file:"
"`build`) і створює стандартний тип вбудованого дистрибутива для моєї "
"платформи. Типовим форматом для вбудованих дистрибутивів є \"тупий\" файл "
"tar в Unix і простий виконуваний інсталятор у Windows. (Цей файл tar "
"вважається \"тупим\", оскільки для роботи його потрібно розпакувати в "
"певному місці.)"

msgid ""
"Thus, the above command on a Unix system creates :file:`Distutils-1.0.{plat}."
"tar.gz`; unpacking this tarball from the right place installs the Distutils "
"just as though you had downloaded the source distribution and run ``python "
"setup.py install``.  (The \"right place\" is either the root of the "
"filesystem or  Python's :file:`{prefix}` directory, depending on the options "
"given to the :command:`bdist_dumb` command; the default is to make dumb "
"distributions relative to :file:`{prefix}`.)"
msgstr ""
"Таким чином, наведена вище команда в системі Unix створює :file:"
"`Distutils-1.0.{plat}.tar.gz`; розпакування цього архіву з потрібного місця "
"встановлює Distutils так само, як якщо б ви завантажили вихідний дистрибутив "
"і запустили ``python setup.py install``. (\"Правильним місцем\" є або корінь "
"файлової системи, або каталог Python :file:`{prefix}`, залежно від "
"параметрів, наданих команді :command:`bdist_dumb`; за замовчуванням "
"створюються дурні дистрибутиви відносно :file:`{prefix}`.)"

msgid ""
"Obviously, for pure Python distributions, this isn't any simpler than just "
"running ``python setup.py install``\\ ---but for non-pure distributions, "
"which include extensions that would need to be compiled, it can mean the "
"difference between someone being able to use your extensions or not.  And "
"creating \"smart\" built distributions, such as an RPM package or an "
"executable installer for Windows, is far more convenient for users even if "
"your distribution doesn't include any extensions."
msgstr ""
"Очевидно, що для чистих дистрибутивів Python це не простіше, ніж просто "
"запустити ``python setup.py install``\\ --- але для нечистих дистрибутивів, "
"які включають розширення, які потрібно скомпілювати, це може означати, що "
"різниця між тим, хто може використовувати ваші розширення чи ні. І створення "
"\"розумних\" вбудованих дистрибутивів, таких як пакет RPM або виконуваний "
"інсталятор для Windows, набагато зручніше для користувачів, навіть якщо ваш "
"дистрибутив не містить жодних розширень."

msgid ""
"The :command:`bdist` command has a :option:`!--formats` option, similar to "
"the :command:`sdist` command, which you can use to select the types of built "
"distribution to generate: for example, ::"
msgstr ""
"Команда :command:`bdist` має опцію :option:`!--formats`, подібну до команди :"
"command:`sdist`, яку можна використовувати для вибору типів вбудованого "
"дистрибутива для створення: наприклад, : :"

msgid ""
"would, when run on a Unix system, create :file:`Distutils-1.0.{plat}.zip`\\ "
"---again, this archive would be unpacked from the root directory to install "
"the Distutils."
msgstr ""
"під час запуску в системі Unix створить :file:`Distutils-1.0.{plat}.zip`\\ "
"---знову, цей архів буде розпаковано з кореневого каталогу для встановлення "
"Distutils."

msgid "The available formats for built distributions are:"
msgstr "Доступні формати для вбудованих дистрибутивів:"

msgid "Format"
msgstr "Формат"

msgid "Description"
msgstr "Опис"

msgid "Notes"
msgstr "Примітки"

msgid "``gztar``"
msgstr "``gztar``"

msgid "gzipped tar file (:file:`.tar.gz`)"
msgstr "gzipped tar файл (:file:`.tar.gz`)"

msgid "\\(1)"
msgstr "\\(1)"

msgid "``bztar``"
msgstr "``bztar``"

msgid "bzipped tar file (:file:`.tar.bz2`)"
msgstr "bzip-файл tar (:file:`.tar.bz2`)"

msgid "``xztar``"
msgstr "``xztar``"

msgid "xzipped tar file (:file:`.tar.xz`)"
msgstr "xzipped файл tar (:file:`.tar.xz`)"

msgid "``ztar``"
msgstr "``ztar``"

msgid "compressed tar file (:file:`.tar.Z`)"
msgstr "стиснутий файл tar (:file:`.tar.Z`)"

msgid "\\(3)"
msgstr "\\(3)"

msgid "``tar``"
msgstr "``tar``"

msgid "tar file (:file:`.tar`)"
msgstr "tar-файл (:file:`.tar`)"

msgid "``zip``"
msgstr "``zip``"

msgid "zip file (:file:`.zip`)"
msgstr "zip-файл (:file:`.zip`)"

msgid "(2),(4)"
msgstr "(2), (4)"

msgid "``rpm``"
msgstr "``rpm``"

msgid "RPM"
msgstr "RPM"

msgid "\\(5)"
msgstr "\\(5)"

msgid "``pkgtool``"
msgstr "``pkgtool``"

msgid "Solaris :program:`pkgtool`"
msgstr "Solaris :program:`pkgtool`"

msgid "``sdux``"
msgstr "``sdux``"

msgid "HP-UX :program:`swinstall`"
msgstr "HP-UX :program:`swinstall`"

msgid "``msi``"
msgstr "``msi``"

msgid "Microsoft Installer."
msgstr "Інсталятор Microsoft."

msgid "Added support for the ``xztar`` format."
msgstr "Додано підтримку формату ``xztar``."

msgid "Notes:"
msgstr "Примітки:"

msgid "default on Unix"
msgstr "за замовчуванням в Unix"

msgid "default on Windows"
msgstr "за замовчуванням у Windows"

msgid "requires external :program:`compress` utility."
msgstr "потрібна зовнішня утиліта :program:`compress`."

msgid ""
"requires either external :program:`zip` utility or :mod:`zipfile` module "
"(part of the standard Python library since Python 1.6)"
msgstr ""
"вимагає зовнішньої утиліти :program:`zip` або модуля :mod:`zipfile` (частина "
"стандартної бібліотеки Python, починаючи з Python 1.6)"

msgid ""
"requires external :program:`rpm` utility, version 3.0.4 or better (use ``rpm "
"--version`` to find out which version you have)"
msgstr ""
"потрібна зовнішня утиліта :program:`rpm` версії 3.0.4 або кращої "
"(використовуйте ``rpm --version``, щоб дізнатися, яку версію у вас є)"

msgid ""
"You don't have to use the :command:`bdist` command with the :option:`!--"
"formats` option; you can also use the command that directly implements the "
"format you're interested in.  Some of these :command:`bdist` \"sub-"
"commands\" actually generate several similar formats; for instance, the :"
"command:`bdist_dumb` command generates all the \"dumb\" archive formats "
"(``tar``, ``gztar``, ``bztar``, ``xztar``, ``ztar``, and ``zip``), and :"
"command:`bdist_rpm` generates both binary and source RPMs.  The :command:"
"`bdist` sub-commands, and the formats generated by each, are:"
msgstr ""
"Вам не обов’язково використовувати команду :command:`bdist` з параметром :"
"option:`!--formats`; ви також можете використати команду, яка безпосередньо "
"реалізує формат, який вас цікавить. Деякі з цих :command:`bdist` "
"\"підкоманд\" насправді генерують декілька подібних форматів; наприклад, "
"команда :command:`bdist_dumb` створює всі \"тупі\" формати архівів (``tar``, "
"``gztar``, ``bztar``, ``xztar``, ``ztar``, і ``zip``), а :command:"
"`bdist_rpm` генерує двійкові та вихідні RPM. Підкоманди :command:`bdist` і "
"формати, створені кожною з них:"

msgid "Command"
msgstr "Команда"

msgid "Formats"
msgstr "Формати"

msgid ":command:`bdist_dumb`"
msgstr ":command:`bdist_dumb`"

msgid "tar, gztar, bztar, xztar, ztar, zip"
msgstr "tar, gztar, bztar, xztar, ztar, zip"

msgid ":command:`bdist_rpm`"
msgstr ":command:`bdist_rpm`"

msgid "rpm, srpm"
msgstr "rpm, srpm"

msgid ""
"The following sections give details on the individual :command:`bdist_\\*` "
"commands."
msgstr ""
"У наступних розділах наведено детальну інформацію про окремі команди :"
"command:`bdist_\\*`."

msgid "Creating RPM packages"
msgstr "Створення пакетів RPM"

msgid ""
"The RPM format is used by many popular Linux distributions, including Red "
"Hat, SuSE, and Mandrake.  If one of these (or any of the other RPM-based "
"Linux distributions) is your usual environment, creating RPM packages for "
"other users of that same distribution is trivial. Depending on the "
"complexity of your module distribution and differences between Linux "
"distributions, you may also be able to create RPMs that work on different "
"RPM-based distributions."
msgstr ""
"Формат RPM використовується багатьма популярними дистрибутивами Linux, "
"зокрема Red Hat, SuSE та Mandrake. Якщо один із них (або будь-який інший "
"дистрибутив Linux на основі RPM) є вашим звичайним середовищем, створення "
"пакетів RPM для інших користувачів того самого дистрибутива є тривіальним. "
"Залежно від складності вашого дистрибутива модуля та відмінностей між "
"дистрибутивами Linux, ви також можете створити RPM, які працюватимуть на "
"різних дистрибутивах на основі RPM."

msgid ""
"The usual way to create an RPM of your module distribution is to run the :"
"command:`bdist_rpm` command::"
msgstr ""
"Звичайним способом створення RPM вашого дистрибутива модуля є виконання "
"команди :command:`bdist_rpm`::"

msgid "or the :command:`bdist` command with the :option:`!--format` option::"
msgstr "або команда :command:`bdist` з параметром :option:`!--format`::"

msgid ""
"The former allows you to specify RPM-specific options; the latter allows  "
"you to easily specify multiple formats in one run.  If you need to do both, "
"you can explicitly specify multiple :command:`bdist_\\*` commands and their "
"options::"
msgstr ""
"Перший дозволяє вказати параметри RPM; останнє дозволяє легко вказати кілька "
"форматів за один запуск. Якщо вам потрібно зробити обидва, ви можете явно "
"вказати декілька команд :command:`bdist_\\*` та їхні параметри::"

msgid ""
"Creating RPM packages is driven by a :file:`.spec` file, much as using the "
"Distutils is driven by the setup script.  To make your life easier, the :"
"command:`bdist_rpm` command normally creates a :file:`.spec` file based on "
"the information you supply in the setup script, on the command line, and in "
"any Distutils configuration files.  Various options and sections in the :"
"file:`.spec` file are derived from options in the setup script as follows:"
msgstr ""
"Створення пакетів RPM керується файлом :file:`.spec`, подібно до того, як "
"використання Distutils керується сценарієм встановлення. Щоб полегшити ваше "
"життя, команда :command:`bdist_rpm` зазвичай створює файл :file:`.spec` на "
"основі інформації, яку ви надаєте в сценарії встановлення, у командному "
"рядку та в будь-яких конфігураційних файлах Distutils. Різні параметри та "
"розділи у файлі :file:`.spec` походять від параметрів у сценарії "
"налаштування таким чином:"

msgid "RPM :file:`.spec` file option or section"
msgstr "Параметр або розділ файлу RPM :file:`.spec`"

msgid "Distutils setup script option"
msgstr "Параметр сценарію налаштування Distutils"

msgid "Name"
msgstr "Ім'я"

msgid "``name``"
msgstr "``name``"

msgid "Summary (in preamble)"
msgstr "Резюме (у преамбулі)"

msgid "``description``"
msgstr "``description``"

msgid "Version"
msgstr "Версія"

msgid "``version``"
msgstr "``version``"

msgid "Vendor"
msgstr "Продавець"

msgid ""
"``author`` and ``author_email``, or  --- & ``maintainer`` and "
"``maintainer_email``"
msgstr ""
"``author`` і ``author_email``, або --- & ``maintainer`` і "
"``maintainer_email``"

msgid "Copyright"
msgstr "Авторське право"

msgid "``license``"
msgstr "``license``"

msgid "Url"
msgstr "Url"

msgid "``url``"
msgstr "``url``"

msgid "%description (section)"
msgstr "%dопис (розділ)"

msgid "``long_description``"
msgstr "``long_description``"

msgid ""
"Additionally, there are many options in :file:`.spec` files that don't have "
"corresponding options in the setup script.  Most of these are handled "
"through options to the :command:`bdist_rpm` command as follows:"
msgstr ""
"Крім того, у файлах :file:`.spec` є багато параметрів, які не мають "
"відповідних параметрів у сценарії встановлення. Більшість із них "
"обробляються за допомогою параметрів команди :command:`bdist_rpm` наступним "
"чином:"

msgid ":command:`bdist_rpm` option"
msgstr "параметр :command:`bdist_rpm`"

msgid "default value"
msgstr "значення за замовчуванням"

msgid "Release"
msgstr "Реліз"

msgid "``release``"
msgstr "``release``"

msgid "\"1\""
msgstr "\"1\""

msgid "Group"
msgstr "Група"

msgid "``group``"
msgstr "``group``"

msgid "\"Development/Libraries\""
msgstr "\"Розвиток/Бібліотеки\""

msgid "``vendor``"
msgstr "``vendor``"

msgid "(see above)"
msgstr "(Дивись вище)"

msgid "Packager"
msgstr "пакувальник"

msgid "``packager``"
msgstr "``packager``"

msgid "(none)"
msgstr "(жоден)"

msgid "Provides"
msgstr "Забезпечує"

msgid "``provides``"
msgstr "``provides``"

msgid "Requires"
msgstr "Вимагає"

msgid "``requires``"
msgstr "``requires``"

msgid "Conflicts"
msgstr "Конфлікти"

msgid "``conflicts``"
msgstr "``conflicts``"

msgid "Obsoletes"
msgstr "Застарілі"

msgid "``obsoletes``"
msgstr "``obsoletes``"

msgid "Distribution"
msgstr "Розподіл"

msgid "``distribution_name``"
msgstr "``distribution_name``"

msgid "BuildRequires"
msgstr "BuildRequires"

msgid "``build_requires``"
msgstr "``build_requires``"

msgid "Icon"
msgstr "значок"

msgid "``icon``"
msgstr "``icon``"

msgid ""
"Obviously, supplying even a few of these options on the command-line would "
"be tedious and error-prone, so it's usually best to put them in the setup "
"configuration file, :file:`setup.cfg`\\ ---see section :ref:`setup-config`.  "
"If you distribute or package many Python module distributions, you might "
"want to put options that apply to all of them in your personal Distutils "
"configuration file (:file:`~/.pydistutils.cfg`).  If you want to temporarily "
"disable this file, you can pass the :option:`!--no-user-cfg` option to :file:"
"`setup.py`."
msgstr ""
"Очевидно, що надання навіть кількох із цих параметрів у командному рядку "
"було б виснажливим і спричинило помилки, тому зазвичай краще розмістити їх у "
"файлі конфігурації установки, :file:`setup.cfg`\\ --- дивіться розділ :ref:"
"`setup-config`. Якщо ви розповсюджуєте або пакуєте багато дистрибутивів "
"модулів Python, ви можете розмістити параметри, які стосуються всіх них, у "
"вашому особистому файлі конфігурації Distutils (:file:`~/.pydistutils.cfg`). "
"Якщо ви хочете тимчасово вимкнути цей файл, ви можете передати параметр :"
"option:`!--no-user-cfg` до :file:`setup.py`."

msgid ""
"There are three steps to building a binary RPM package, all of which are "
"handled automatically by the Distutils:"
msgstr ""
"Створення бінарного пакета RPM складається з трьох кроків, усі з яких "
"автоматично обробляються Distutils:"

msgid ""
"create a :file:`.spec` file, which describes the package (analogous  to the "
"Distutils setup script; in fact, much of the information in the  setup "
"script winds up in the :file:`.spec` file)"
msgstr ""
"створіть файл :file:`.spec`, який описує пакунок (аналогічно сценарію "
"налаштування Distutils; насправді велика частина інформації в сценарії "
"налаштування зберігається у файлі :file:`.spec`)"

msgid "create the source RPM"
msgstr "створити вихідний RPM"

msgid ""
"create the \"binary\" RPM (which may or may not contain binary code, "
"depending on whether your module distribution contains Python extensions)"
msgstr ""
"створити \"бінарний\" RPM (який може містити або не містити двійковий код, "
"залежно від того, чи містить ваш дистрибутив модуля розширення Python)"

msgid ""
"Normally, RPM bundles the last two steps together; when you use the "
"Distutils, all three steps are typically bundled together."
msgstr ""
"Зазвичай RPM об’єднує останні два кроки разом; коли ви використовуєте "
"Distutils, усі три кроки зазвичай об’єднуються разом."

msgid ""
"If you wish, you can separate these three steps.  You can use the :option:"
"`!--spec-only` option to make :command:`bdist_rpm` just create the :file:`."
"spec` file and exit; in this case, the :file:`.spec` file will be written to "
"the \"distribution directory\"---normally :file:`dist/`, but customizable "
"with the :option:`!--dist-dir` option.  (Normally, the :file:`.spec` file "
"winds up deep in the \"build tree,\" in a temporary directory created by :"
"command:`bdist_rpm`.)"
msgstr ""
"Якщо ви бажаєте, ви можете розділити ці три кроки. Ви можете використати "
"параметр :option:`!--spec-only`, щоб :command:`bdist_rpm` просто створив "
"файл :file:`.spec` і вийшов; у цьому випадку файл :file:`.spec` буде "
"записаний у \"каталог розповсюдження\" --- зазвичай :file:`dist/`, але його "
"можна налаштувати за допомогою параметра :option:`!--dist-dir` . (Зазвичай "
"файл :file:`.spec` знаходиться глибоко в \"дереві побудови\", у тимчасовому "
"каталозі, створеному :command:`bdist_rpm`.)"

msgid "Cross-compiling on Windows"
msgstr "Крос-компіляція в Windows"

msgid ""
"Starting with Python 2.6, distutils is capable of cross-compiling between "
"Windows platforms.  In practice, this means that with the correct tools "
"installed, you can use a 32bit version of Windows to create 64bit extensions "
"and vice-versa."
msgstr ""
"Починаючи з Python 2.6, distutils здатний до крос-компіляції між платформами "
"Windows. На практиці це означає, що з правильними встановленими "
"інструментами ви можете використовувати 32-розрядну версію Windows для "
"створення 64-розрядних розширень і навпаки."

msgid ""
"To build for an alternate platform, specify the :option:`!--plat-name` "
"option to the build command.  Valid values are currently 'win32', and  'win-"
"amd64'. For example, on a 32bit version of Windows, you could execute::"
msgstr ""
"Щоб зібрати для альтернативної платформи, укажіть опцію :option:`!--plat-"
"name` для команди побудови. Наразі дійсними значеннями є \"win32\" і \"win-"
"amd64\". Наприклад, у 32-розрядній версії Windows ви можете виконати::"

msgid "to build a 64bit version of your extension."
msgstr "щоб створити 64-розрядну версію вашого розширення."

msgid ""
"would create a 64bit installation executable on your 32bit version of "
"Windows."
msgstr ""
"створить 64-розрядний виконуваний файл для встановлення у вашій 32-розрядній "
"версії Windows."

msgid ""
"To cross-compile, you must download the Python source code and cross-compile "
"Python itself for the platform you are targeting - it is not possible from a "
"binary installation of Python (as the .lib etc file for other platforms are "
"not included.)  In practice, this means the user of a 32 bit operating "
"system will need to use Visual Studio 2008 to open the :file:`PCbuild/"
"PCbuild.sln` solution in the Python source tree and build the \"x64\" "
"configuration of the 'pythoncore' project before cross-compiling extensions "
"is possible."
msgstr ""
"Щоб виконати крос-компіляцію, ви повинні завантажити вихідний код Python і "
"здійснити крос-компіляцію самого Python для цільової платформи – це "
"неможливо з бінарної інсталяції Python (оскільки файл .lib тощо для інших "
"платформ не включено). На практиці це означає, що користувачу 32-розрядної "
"операційної системи потрібно буде використовувати Visual Studio 2008, щоб "
"відкрити рішення :file:`PCbuild/PCbuild.sln` у дереві вихідних кодів Python "
"і створити конфігурацію \"x64\" \"pythoncore\". ' проекту до того, як "
"можлива крос-компіляція розширень."

msgid ""
"Note that by default, Visual Studio 2008 does not install 64bit compilers or "
"tools.  You may need to reexecute the Visual Studio setup process and select "
"these tools (using Control Panel->[Add/Remove] Programs is a convenient way "
"to check or modify your existing install.)"
msgstr ""
"Зауважте, що за замовчуванням Visual Studio 2008 не встановлює 64-розрядні "
"компілятори чи інструменти. Можливо, вам знадобиться повторно виконати "
"процес встановлення Visual Studio та вибрати ці інструменти (використання "
"Панелі керування->[Додати/Видалити] програми — це зручний спосіб перевірити "
"чи змінити наявну інсталяцію.)"

msgid "The Postinstallation script"
msgstr "Сценарій після встановлення"

msgid ""
"Starting with Python 2.3, a postinstallation script can be specified with "
"the :option:`!--install-script` option.  The basename of the script must be "
"specified, and the script filename must also be listed in the scripts "
"argument to the setup function."
msgstr ""
"Починаючи з Python 2.3, сценарій після встановлення можна вказати за "
"допомогою опції :option:`!--install-script`. Необхідно вказати базове ім’я "
"сценарію, а ім’я файлу сценарію також має бути зазначено в аргументі scripts "
"функції налаштування."

msgid ""
"This script will be run at installation time on the target system after all "
"the files have been copied, with ``argv[1]`` set to :option:`!-install`, and "
"again at uninstallation time before the files are removed with ``argv[1]`` "
"set to :option:`!-remove`."
msgstr ""
"Цей сценарій буде запущено під час інсталяції в цільовій системі після того, "
"як усі файли буде скопійовано, з параметром ``argv[1]`` встановленим на :"
"option:`!-install`, і знову під час деінсталяції перед видаленням файлів зі "
"значенням ``argv[1]`` :option:`!-remove`."

msgid ""
"The installation script runs embedded in the windows installer, every output "
"(``sys.stdout``, ``sys.stderr``) is redirected into a buffer and will be "
"displayed in the GUI after the script has finished."
msgstr ""
"Сценарій інсталяції працює вбудовано в інсталятор Windows, кожен вихід "
"(``sys.stdout``, ``sys.stderr``) перенаправляється в буфер і "
"відображатиметься в графічному інтерфейсі після завершення сценарію."

msgid ""
"Some functions especially useful in this context are available as additional "
"built-in functions in the installation script."
msgstr ""
"Деякі функції, особливо корисні в цьому контексті, доступні як додаткові "
"вбудовані функції в сценарії встановлення."

msgid ""
"These functions should be called when a directory or file is created by the "
"postinstall script at installation time.  It will register *path* with the "
"uninstaller, so that it will be removed when the distribution is "
"uninstalled. To be safe, directories are only removed if they are empty."
msgstr ""
"Ці функції слід викликати, коли каталог або файл створюється сценарієм після "
"встановлення під час встановлення. Він зареєструє *шлях* у програмі "
"видалення, щоб його було видалено, коли дистрибутив буде видалено. Для "
"безпеки каталоги видаляються, лише якщо вони порожні."

msgid ""
"This function can be used to retrieve special folder locations on Windows "
"like the Start Menu or the Desktop.  It returns the full path to the folder. "
"*csidl_string* must be one of the following strings::"
msgstr ""
"Цю функцію можна використовувати для отримання спеціальних папок у Windows, "
"таких як меню \"Пуск\" або робочий стіл. Він повертає повний шлях до папки. "
"*csidl_string* має бути одним із таких рядків::"

msgid "If the folder cannot be retrieved, :exc:`OSError` is raised."
msgstr "Якщо папку неможливо отримати, виникає :exc:`OSError`."

msgid ""
"Which folders are available depends on the exact Windows version, and "
"probably also the configuration.  For details refer to Microsoft's "
"documentation of the :c:func:`SHGetSpecialFolderPath` function."
msgstr ""
"Які папки доступні, залежить від точної версії Windows і, можливо, також від "
"конфігурації. Додаткову інформацію див. у документації Microsoft щодо "
"функції :c:func:`SHGetSpecialFolderPath`."

msgid ""
"This function creates a shortcut. *target* is the path to the program to be "
"started by the shortcut. *description* is the description of the shortcut. "
"*filename* is the title of the shortcut that the user will see. *arguments* "
"specifies the command line arguments, if any. *workdir* is the working "
"directory for the program. *iconpath* is the file containing the icon for "
"the shortcut, and *iconindex* is the index of the icon in the file "
"*iconpath*.  Again, for details consult the Microsoft documentation for the :"
"class:`IShellLink` interface."
msgstr ""
"Ця функція створює ярлик. *ціль* — це шлях до програми, яка запускається за "
"допомогою ярлика. *description* — це опис ярлика. *ім’я файлу* – це назва "
"ярлика, який побачить користувач. *arguments* визначає аргументи командного "
"рядка, якщо такі є. *workdir* — це робочий каталог для програми. *iconpath* "
"— це файл, що містить піктограму для ярлика, а *iconindex* — це індекс "
"піктограми у файлі *iconpath*. Знову ж таки, для отримання детальної "
"інформації зверніться до документації Microsoft для інтерфейсу :class:"
"`IShellLink`."
