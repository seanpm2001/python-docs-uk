# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Dmytro Kazanzhy, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-12 16:28+0000\n"
"PO-Revision-Date: 2021-06-28 00:48+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://www.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

msgid "File Objects"
msgstr "Файлові об’єкти"

msgid ""
"These APIs are a minimal emulation of the Python 2 C API for built-in file "
"objects, which used to rely on the buffered I/O (:c:expr:`FILE*`) support "
"from the C standard library.  In Python 3, files and streams use the new :"
"mod:`io` module, which defines several layers over the low-level unbuffered "
"I/O of the operating system.  The functions described below are convenience "
"C wrappers over these new APIs, and meant mostly for internal error "
"reporting in the interpreter; third-party code is advised to access the :mod:"
"`io` APIs instead."
msgstr ""

msgid ""
"Create a Python file object from the file descriptor of an already opened "
"file *fd*.  The arguments *name*, *encoding*, *errors* and *newline* can be "
"``NULL`` to use the defaults; *buffering* can be *-1* to use the default. "
"*name* is ignored and kept for backward compatibility. Return ``NULL`` on "
"failure. For a more comprehensive description of the arguments, please refer "
"to the :func:`io.open` function documentation."
msgstr ""
"Створіть файловий об’єкт Python із файлового дескриптора вже відкритого "
"файлу *fd*. Аргументи *name*, *encoding*, *errors* і *newline* можуть бути "
"``NULL`` для використання типових значень; *buffering* може бути *-1*, щоб "
"використовувати значення за замовчуванням. *name* ігнорується та "
"зберігається для зворотної сумісності. Повертає ``NULL`` у разі помилки. Щоб "
"отримати докладніший опис аргументів, зверніться до документації функції :"
"func:`io.open`."

msgid ""
"Since Python streams have their own buffering layer, mixing them with OS-"
"level file descriptors can produce various issues (such as unexpected "
"ordering of data)."
msgstr ""
"Оскільки потоки Python мають власний рівень буферизації, змішування їх із "
"файловими дескрипторами рівня ОС може спричинити різноманітні проблеми "
"(наприклад, несподіване впорядкування даних)."

msgid "Ignore *name* attribute."
msgstr "Ігнорувати атрибут *name*."

msgid ""
"Return the file descriptor associated with *p* as an :c:expr:`int`.  If the "
"object is an integer, its value is returned.  If not, the object's :meth:"
"`~io.IOBase.fileno` method is called if it exists; the method must return an "
"integer, which is returned as the file descriptor value.  Sets an exception "
"and returns ``-1`` on failure."
msgstr ""

msgid ""
"Equivalent to ``p.readline([n])``, this function reads one line from the "
"object *p*.  *p* may be a file object or any object with a :meth:`~io.IOBase."
"readline` method.  If *n* is ``0``, exactly one line is read, regardless of "
"the length of the line.  If *n* is greater than ``0``, no more than *n* "
"bytes will be read from the file; a partial line can be returned.  In both "
"cases, an empty string is returned if the end of the file is reached "
"immediately.  If *n* is less than ``0``, however, one line is read "
"regardless of length, but :exc:`EOFError` is raised if the end of the file "
"is reached immediately."
msgstr ""
"Еквівалентна ``p.readline([n])``, ця функція читає один рядок з об’єкта *p*. "
"*p* може бути файловим об’єктом або будь-яким об’єктом із методом :meth:`~io."
"IOBase.readline`. Якщо *n* дорівнює ``0``, читається рівно один рядок, "
"незалежно від довжини рядка. Якщо *n* більше ніж ``0``, з файлу буде "
"прочитано не більше ніж *n* байт; можна повернути часткову лінію. В обох "
"випадках повертається порожній рядок, якщо кінець файлу досягнуто негайно. "
"Однак якщо *n* менше ніж ``0``, один рядок читається незалежно від довжини, "
"але :exc:`EOFError` викликається, якщо кінець файлу досягнуто негайно."

msgid ""
"Overrides the normal behavior of :func:`io.open_code` to pass its parameter "
"through the provided handler."
msgstr ""
"Перевизначає звичайну поведінку :func:`io.open_code` для передачі його "
"параметра через наданий обробник."

msgid ""
"The handler is a function of type :c:expr:`PyObject *(\\*)(PyObject *path, "
"void *userData)`, where *path* is guaranteed to be :c:type:`PyUnicodeObject`."
msgstr ""

msgid ""
"The *userData* pointer is passed into the hook function. Since hook "
"functions may be called from different runtimes, this pointer should not "
"refer directly to Python state."
msgstr ""
"Покажчик *userData* передається в функцію-перехоплювач. Оскільки функції "
"підключення можуть викликатися з різних середовищ виконання, цей вказівник "
"не повинен посилатися безпосередньо на стан Python."

msgid ""
"As this hook is intentionally used during import, avoid importing new "
"modules during its execution unless they are known to be frozen or available "
"in ``sys.modules``."
msgstr ""
"Оскільки цей хук навмисно використовується під час імпорту, уникайте імпорту "
"нових модулів під час його виконання, якщо тільки відомо, що вони заморожені "
"або доступні в ``sys.modules``."

msgid ""
"Once a hook has been set, it cannot be removed or replaced, and later calls "
"to :c:func:`PyFile_SetOpenCodeHook` will fail. On failure, the function "
"returns -1 and sets an exception if the interpreter has been initialized."
msgstr ""
"Після того, як хук встановлено, його не можна видалити або замінити, а "
"пізніші виклики :c:func:`PyFile_SetOpenCodeHook` не вдадуться. У разі "
"помилки функція повертає -1 і встановлює виняток, якщо інтерпретатор був "
"ініціалізований."

msgid "This function is safe to call before :c:func:`Py_Initialize`."
msgstr "Цю функцію безпечно викликати перед :c:func:`Py_Initialize`."

msgid ""
"Raises an :ref:`auditing event <auditing>` ``setopencodehook`` with no "
"arguments."
msgstr ""
"Викликає :ref:`подію аудиту <auditing>` ``setopencodehook`` без аргументів."

msgid ""
"Write object *obj* to file object *p*.  The only supported flag for *flags* "
"is :const:`Py_PRINT_RAW`; if given, the :func:`str` of the object is written "
"instead of the :func:`repr`.  Return ``0`` on success or ``-1`` on failure; "
"the appropriate exception will be set."
msgstr ""
"Записати об’єкт *obj* у файловий об’єкт *p*. Єдиним підтримуваним прапором "
"для *flags* є :const:`Py_PRINT_RAW`; якщо задано, замість :func:`repr` "
"записується :func:`str` об’єкта. Повертає ``0`` у разі успіху або ``-1`` у "
"разі невдачі; буде встановлено відповідний виняток."

msgid ""
"Write string *s* to file object *p*.  Return ``0`` on success or ``-1`` on "
"failure; the appropriate exception will be set."
msgstr ""
"Записати рядок *s* до файлового об’єкта *p*. Повертає ``0`` у разі успіху "
"або ``-1`` у разі невдачі; буде встановлено відповідний виняток."
