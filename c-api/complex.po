# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Dmytro Kazanzhy, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-12 16:28+0000\n"
"PO-Revision-Date: 2021-06-28 00:48+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://www.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

msgid "Complex Number Objects"
msgstr "Об’єкти комплексних чисел"

msgid ""
"Python's complex number objects are implemented as two distinct types when "
"viewed from the C API:  one is the Python object exposed to Python programs, "
"and the other is a C structure which represents the actual complex number "
"value. The API provides functions for working with both."
msgstr ""
"Об’єкти комплексних чисел Python реалізуються як два різних типи, якщо "
"дивитися через C API: один є об’єктом Python, відкритим для програм Python, "
"а інший є структурою C, яка представляє фактичне значення комплексного "
"числа. API надає функції для роботи з обома."

msgid "Complex Numbers as C Structures"
msgstr "Комплексні числа як C структури"

msgid ""
"Note that the functions which accept these structures as parameters and "
"return them as results do so *by value* rather than dereferencing them "
"through pointers.  This is consistent throughout the API."
msgstr ""
"Зауважте, що функції, які приймають ці структури як параметри та повертають "
"їх як результати, роблять це *за значенням*, а не розіменовують їх через "
"покажчики. Це узгоджено в усьому API."

msgid ""
"The C structure which corresponds to the value portion of a Python complex "
"number object.  Most of the functions for dealing with complex number "
"objects use structures of this type as input or output values, as "
"appropriate.  It is defined as::"
msgstr ""
"Структура C, яка відповідає частині значення об’єкта комплексного числа "
"Python. Більшість функцій для роботи з об’єктами комплексних чисел "
"використовують структури цього типу як вхідні чи вихідні значення, "
"відповідно. Він визначається як::"

msgid ""
"Return the sum of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Повертає суму двох комплексних чисел, використовуючи представлення C :c:type:"
"`Py_complex`."

msgid ""
"Return the difference between two complex numbers, using the C :c:type:"
"`Py_complex` representation."
msgstr ""
"Повертає різницю між двома комплексними числами, використовуючи "
"представлення C :c:type:`Py_complex`."

msgid ""
"Return the negation of the complex number *num*, using the C :c:type:"
"`Py_complex` representation."
msgstr ""
"Повертає заперечення комплексного числа *num*, використовуючи представлення "
"C :c:type:`Py_complex`."

msgid ""
"Return the product of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Повертає добуток двох комплексних чисел, використовуючи представлення C :c:"
"type:`Py_complex`."

msgid ""
"Return the quotient of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""
"Повертає частку двох комплексних чисел, використовуючи представлення C :c:"
"type:`Py_complex`."

msgid ""
"If *divisor* is null, this method returns zero and sets :c:data:`errno` to :"
"c:data:`EDOM`."
msgstr ""
"Якщо *divisor* має значення null, цей метод повертає нуль і встановлює :c:"
"data:`errno` на :c:data:`EDOM`."

msgid ""
"Return the exponentiation of *num* by *exp*, using the C :c:type:"
"`Py_complex` representation."
msgstr ""
"Повертає піднесення *num* до степеня *exp*, використовуючи представлення C :"
"c:type:`Py_complex`."

msgid ""
"If *num* is null and *exp* is not a positive real number, this method "
"returns zero and sets :c:data:`errno` to :c:data:`EDOM`."
msgstr ""
"Якщо *num* дорівнює нулю, а *exp* не є додатним дійсним числом, цей метод "
"повертає нуль і встановлює :c:data:`errno` на :c:data:`EDOM`."

msgid "Complex Numbers as Python Objects"
msgstr "Комплексні числа як об’єкти Python"

msgid ""
"This subtype of :c:type:`PyObject` represents a Python complex number object."
msgstr ""
"Цей підтип :c:type:`PyObject` представляє об’єкт комплексного числа Python."

msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python complex number "
"type. It is the same object as :class:`complex` in the Python layer."
msgstr ""
"Цей екземпляр :c:type:`PyTypeObject` представляє тип комплексного числа "
"Python. Це той самий об’єкт, що й :class:`complex` на рівні Python."

msgid ""
"Return true if its argument is a :c:type:`PyComplexObject` or a subtype of :"
"c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"Повертає true, якщо його аргумент є :c:type:`PyComplexObject` або підтипом :"
"c:type:`PyComplexObject`. Ця функція завжди успішна."

msgid ""
"Return true if its argument is a :c:type:`PyComplexObject`, but not a "
"subtype of :c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"Повертає true, якщо його аргумент є :c:type:`PyComplexObject`, але не "
"підтипом :c:type:`PyComplexObject`. Ця функція завжди успішна."

msgid ""
"Create a new Python complex number object from a C :c:type:`Py_complex` "
"value."
msgstr ""
"Створіть новий об’єкт комплексного числа Python зі значення C :c:type:"
"`Py_complex`."

msgid "Return a new :c:type:`PyComplexObject` object from *real* and *imag*."
msgstr "Повертає новий об’єкт :c:type:`PyComplexObject` із *real* і *imag*."

msgid "Return the real part of *op* as a C :c:expr:`double`."
msgstr ""

msgid "Return the imaginary part of *op* as a C :c:expr:`double`."
msgstr ""

msgid "Return the :c:type:`Py_complex` value of the complex number *op*."
msgstr "Повертає значення :c:type:`Py_complex` комплексного числа *op*."

msgid ""
"If *op* is not a Python complex number object but has a :meth:`__complex__` "
"method, this method will first be called to convert *op* to a Python complex "
"number object.  If ``__complex__()`` is not defined then it falls back to :"
"meth:`__float__`.  If ``__float__()`` is not defined then it falls back to :"
"meth:`__index__`.  Upon failure, this method returns ``-1.0`` as a real "
"value."
msgstr ""
"Якщо *op* не є об’єктом комплексного числа Python, але має метод :meth:"
"`__complex__`, цей метод спочатку буде викликано для перетворення *op* на "
"об’єкт комплексного числа Python. Якщо ``__complex__()`` не визначено, тоді "
"він повертається до :meth:`__float__`. Якщо ``__float__()`` не визначено, "
"він повертається до :meth:`__index__`. У разі помилки цей метод повертає "
"``-1.0`` як дійсне значення."

msgid "Use :meth:`__index__` if available."
msgstr "Використовуйте :meth:`__index__`, якщо доступний."
