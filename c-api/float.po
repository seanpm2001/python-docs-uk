# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Dmytro Kazanzhy, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-12 16:28+0000\n"
"PO-Revision-Date: 2021-06-28 00:48+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://www.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

msgid "Floating Point Objects"
msgstr "Об'єкти з плаваючою комою"

msgid ""
"This subtype of :c:type:`PyObject` represents a Python floating point object."
msgstr ""
"Цей підтип :c:type:`PyObject` представляє об’єкт з плаваючою комою Python."

msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python floating point "
"type.  This is the same object as :class:`float` in the Python layer."
msgstr ""
"Цей екземпляр :c:type:`PyTypeObject` представляє тип Python з плаваючою "
"комою. Це той самий об’єкт, що й :class:`float` на рівні Python."

msgid ""
"Return true if its argument is a :c:type:`PyFloatObject` or a subtype of :c:"
"type:`PyFloatObject`.  This function always succeeds."
msgstr ""
"Повертає true, якщо його аргумент є :c:type:`PyFloatObject` або підтипом :c:"
"type:`PyFloatObject`. Ця функція завжди успішна."

msgid ""
"Return true if its argument is a :c:type:`PyFloatObject`, but not a subtype "
"of :c:type:`PyFloatObject`.  This function always succeeds."
msgstr ""
"Повертає true, якщо його аргумент є :c:type:`PyFloatObject`, але не "
"підтипом :c:type:`PyFloatObject`. Ця функція завжди успішна."

msgid ""
"Create a :c:type:`PyFloatObject` object based on the string value in *str*, "
"or ``NULL`` on failure."
msgstr ""
"Створіть об’єкт :c:type:`PyFloatObject` на основі рядкового значення в *str* "
"або ``NULL`` у разі помилки."

msgid ""
"Create a :c:type:`PyFloatObject` object from *v*, or ``NULL`` on failure."
msgstr ""
"Створіть об’єкт :c:type:`PyFloatObject` з *v* або ``NULL`` у разі помилки."

msgid ""
"Return a C :c:expr:`double` representation of the contents of *pyfloat*.  If "
"*pyfloat* is not a Python floating point object but has a :meth:`__float__` "
"method, this method will first be called to convert *pyfloat* into a float. "
"If ``__float__()`` is not defined then it falls back to :meth:`__index__`. "
"This method returns ``-1.0`` upon failure, so one should call :c:func:"
"`PyErr_Occurred` to check for errors."
msgstr ""

msgid "Use :meth:`__index__` if available."
msgstr "Використовуйте :meth:`__index__`, якщо доступний."

msgid ""
"Return a C :c:expr:`double` representation of the contents of *pyfloat*, but "
"without error checking."
msgstr ""

msgid ""
"Return a structseq instance which contains information about the precision, "
"minimum and maximum values of a float. It's a thin wrapper around the header "
"file :file:`float.h`."
msgstr ""
"Повертає екземпляр structseq, який містить інформацію про точність, "
"мінімальне та максимальне значення float. Це тонка обгортка навколо файлу "
"заголовка :file:`float.h`."

msgid ""
"Return the maximum representable finite float *DBL_MAX* as C :c:expr:"
"`double`."
msgstr ""

msgid ""
"Return the minimum normalized positive float *DBL_MIN* as C :c:expr:`double`."
msgstr ""

msgid "Pack and Unpack functions"
msgstr ""

msgid ""
"The pack and unpack functions provide an efficient platform-independent way "
"to store floating-point values as byte strings. The Pack routines produce a "
"bytes string from a C :c:expr:`double`, and the Unpack routines produce a C :"
"c:expr:`double` from such a bytes string. The suffix (2, 4 or 8) specifies "
"the number of bytes in the bytes string."
msgstr ""

msgid ""
"On platforms that appear to use IEEE 754 formats these functions work by "
"copying bits. On other platforms, the 2-byte format is identical to the IEEE "
"754 binary16 half-precision format, the 4-byte format (32-bit) is identical "
"to the IEEE 754 binary32 single precision format, and the 8-byte format to "
"the IEEE 754 binary64 double precision format, although the packing of INFs "
"and NaNs (if such things exist on the platform) isn't handled correctly, and "
"attempting to unpack a bytes string containing an IEEE INF or NaN will raise "
"an exception."
msgstr ""

msgid ""
"On non-IEEE platforms with more precision, or larger dynamic range, than "
"IEEE 754 supports, not all values can be packed; on non-IEEE platforms with "
"less precision, or smaller dynamic range, not all values can be unpacked. "
"What happens in such cases is partly accidental (alas)."
msgstr ""

msgid "Pack functions"
msgstr ""

msgid ""
"The pack routines write 2, 4 or 8 bytes, starting at *p*. *le* is an :c:expr:"
"`int` argument, non-zero if you want the bytes string in little-endian "
"format (exponent last, at ``p+1``, ``p+3``, or ``p+6`` ``p+7``), zero if you "
"want big-endian format (exponent first, at *p*). The :c:data:`PY_BIG_ENDIAN` "
"constant can be used to use the native endian: it is equal to ``1`` on big "
"endian processor, or ``0`` on little endian processor."
msgstr ""

msgid ""
"Return value: ``0`` if all is OK, ``-1`` if error (and an exception is set, "
"most likely :exc:`OverflowError`)."
msgstr ""

msgid "There are two problems on non-IEEE platforms:"
msgstr ""

msgid "What this does is undefined if *x* is a NaN or infinity."
msgstr ""

msgid "``-0.0`` and ``+0.0`` produce the same bytes string."
msgstr ""

msgid "Pack a C double as the IEEE 754 binary16 half-precision format."
msgstr ""

msgid "Pack a C double as the IEEE 754 binary32 single precision format."
msgstr ""

msgid "Pack a C double as the IEEE 754 binary64 double precision format."
msgstr ""

msgid "Unpack functions"
msgstr ""

msgid ""
"The unpack routines read 2, 4 or 8 bytes, starting at *p*.  *le* is an :c:"
"expr:`int` argument, non-zero if the bytes string is in little-endian format "
"(exponent last, at ``p+1``, ``p+3`` or ``p+6`` and ``p+7``), zero if big-"
"endian (exponent first, at *p*). The :c:data:`PY_BIG_ENDIAN` constant can be "
"used to use the native endian: it is equal to ``1`` on big endian processor, "
"or ``0`` on little endian processor."
msgstr ""

msgid ""
"Return value: The unpacked double.  On error, this is ``-1.0`` and :c:func:"
"`PyErr_Occurred` is true (and an exception is set, most likely :exc:"
"`OverflowError`)."
msgstr ""

msgid ""
"Note that on a non-IEEE platform this will refuse to unpack a bytes string "
"that represents a NaN or infinity."
msgstr ""

msgid "Unpack the IEEE 754 binary16 half-precision format as a C double."
msgstr ""

msgid "Unpack the IEEE 754 binary32 single precision format as a C double."
msgstr ""

msgid "Unpack the IEEE 754 binary64 double precision format as a C double."
msgstr ""
