# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Dmytro Kazanzhy, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-12 16:28+0000\n"
"PO-Revision-Date: 2021-06-28 00:49+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://www.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

msgid "Data marshalling support"
msgstr "Підтримка маршалінгу даних"

msgid ""
"These routines allow C code to work with serialized objects using the same "
"data format as the :mod:`marshal` module.  There are functions to write data "
"into the serialization format, and additional functions that can be used to "
"read the data back.  Files used to store marshalled data must be opened in "
"binary mode."
msgstr ""
"Ці процедури дозволяють коду C працювати з серіалізованими об’єктами, "
"використовуючи той самий формат даних, що й модуль :mod:`marshal`. Існують "
"функції для запису даних у формат серіалізації та додаткові функції, які "
"можна використовувати для зворотного читання даних. Файли, які "
"використовуються для зберігання маршалованих даних, необхідно відкривати в "
"двійковому режимі."

msgid "Numeric values are stored with the least significant byte first."
msgstr "Числові значення зберігаються з молодшим байтом першим."

msgid ""
"The module supports two versions of the data format: version 0 is the "
"historical version, version 1 shares interned strings in the file, and upon "
"unmarshalling.  Version 2 uses a binary format for floating point numbers. "
"``Py_MARSHAL_VERSION`` indicates the current file format (currently 2)."
msgstr ""
"Модуль підтримує дві версії формату даних: версія 0 є історичною версією, "
"версія 1 надає спільний доступ до вбудованих рядків у файлі та після "
"демаршалінгу. Версія 2 використовує двійковий формат для чисел з плаваючою "
"комою. ``Py_MARSHAL_VERSION`` вказує на поточний формат файлу (наразі 2)."

msgid ""
"Marshal a :c:expr:`long` integer, *value*, to *file*.  This will only write "
"the least-significant 32 bits of *value*; regardless of the size of the "
"native :c:expr:`long` type.  *version* indicates the file format."
msgstr ""

msgid ""
"Marshal a Python object, *value*, to *file*. *version* indicates the file "
"format."
msgstr ""
"Маршал об’єкта Python, *значення*, до *файлу*. *версія* вказує на формат "
"файлу."

msgid ""
"Return a bytes object containing the marshalled representation of *value*. "
"*version* indicates the file format."
msgstr ""
"Повертає об’єкт bytes, що містить упорядковане представлення *value*. "
"*версія* вказує на формат файлу."

msgid "The following functions allow marshalled values to be read back in."
msgstr "Наступні функції дозволяють зчитувати упорядковані значення."

msgid ""
"Return a C :c:expr:`long` from the data stream in a :c:expr:`FILE*` opened "
"for reading.  Only a 32-bit value can be read in using this function, "
"regardless of the native size of :c:expr:`long`."
msgstr ""

msgid ""
"On error, sets the appropriate exception (:exc:`EOFError`) and returns "
"``-1``."
msgstr ""
"У разі помилки встановлює відповідний виняток (:exc:`EOFError`) і повертає "
"``-1``."

msgid ""
"Return a C :c:expr:`short` from the data stream in a :c:expr:`FILE*` opened "
"for reading.  Only a 16-bit value can be read in using this function, "
"regardless of the native size of :c:expr:`short`."
msgstr ""

msgid ""
"Return a Python object from the data stream in a :c:expr:`FILE*` opened for "
"reading."
msgstr ""

msgid ""
"On error, sets the appropriate exception (:exc:`EOFError`, :exc:`ValueError` "
"or :exc:`TypeError`) and returns ``NULL``."
msgstr ""
"У разі помилки встановлює відповідний виняток (:exc:`EOFError`, :exc:"
"`ValueError` або :exc:`TypeError`) і повертає ``NULL``."

msgid ""
"Return a Python object from the data stream in a :c:expr:`FILE*` opened for "
"reading.  Unlike :c:func:`PyMarshal_ReadObjectFromFile`, this function "
"assumes that no further objects will be read from the file, allowing it to "
"aggressively load file data into memory so that the de-serialization can "
"operate from data in memory rather than reading a byte at a time from the "
"file.  Only use these variant if you are certain that you won't be reading "
"anything else from the file."
msgstr ""

msgid ""
"Return a Python object from the data stream in a byte buffer containing "
"*len* bytes pointed to by *data*."
msgstr ""
"Повертає об’єкт Python із потоку даних у байтовий буфер, що містить *len* "
"байти, на які вказує *data*."
