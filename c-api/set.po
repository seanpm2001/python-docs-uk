# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Dmytro Kazanzhy, 2022
# Olga Tomakhina, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-12 16:28+0000\n"
"PO-Revision-Date: 2021-06-28 00:50+0000\n"
"Last-Translator: Olga Tomakhina, 2022\n"
"Language-Team: Ukrainian (https://www.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

msgid "Set Objects"
msgstr "Набір об'єктів"

msgid ""
"This section details the public API for :class:`set` and :class:`frozenset` "
"objects.  Any functionality not listed below is best accessed using either "
"the abstract object protocol (including :c:func:`PyObject_CallMethod`, :c:"
"func:`PyObject_RichCompareBool`, :c:func:`PyObject_Hash`, :c:func:"
"`PyObject_Repr`, :c:func:`PyObject_IsTrue`, :c:func:`PyObject_Print`, and :c:"
"func:`PyObject_GetIter`) or the abstract number protocol (including :c:func:"
"`PyNumber_And`, :c:func:`PyNumber_Subtract`, :c:func:`PyNumber_Or`, :c:func:"
"`PyNumber_Xor`, :c:func:`PyNumber_InPlaceAnd`, :c:func:"
"`PyNumber_InPlaceSubtract`, :c:func:`PyNumber_InPlaceOr`, and :c:func:"
"`PyNumber_InPlaceXor`)."
msgstr ""
"У цьому розділі детально описано публічний API для об’єктів :class:`set` і :"
"class:`frozenset`. Будь-які функції, не перелічені нижче, найкраще отримати "
"доступ за допомогою протоколу абстрактних об’єктів (включно з :c:func:"
"`PyObject_CallMethod`, :c:func:`PyObject_RichCompareBool`, :c:func:"
"`PyObject_Hash`, :c:func:`PyObject_Repr`, :c:func:`PyObject_IsTrue`, :c:func:"
"`PyObject_Print` і :c:func:`PyObject_GetIter`) або протокол абстрактних "
"чисел (включно з :c:func:`PyNumber_And`, :c:func:`PyNumber_Subtract`, :c:"
"func:`PyNumber_Or`, :c:func:`PyNumber_Xor`, :c:func:`PyNumber_InPlaceAnd`, :"
"c:func:`PyNumber_InPlaceSubtract`, :c:func:`PyNumber_InPlaceOr`, і :c:func:"
"`PyNumber_InPlaceXor`)."

msgid ""
"This subtype of :c:type:`PyObject` is used to hold the internal data for "
"both :class:`set` and :class:`frozenset` objects.  It is like a :c:type:"
"`PyDictObject` in that it is a fixed size for small sets (much like tuple "
"storage) and will point to a separate, variable sized block of memory for "
"medium and large sized sets (much like list storage). None of the fields of "
"this structure should be considered public and all are subject to change.  "
"All access should be done through the documented API rather than by "
"manipulating the values in the structure."
msgstr ""
"Цей підтип :c:type:`PyObject` використовується для зберігання внутрішніх "
"даних для об’єктів :class:`set` і :class:`frozenset`. Це схоже на :c:type:"
"`PyDictObject` тим, що він має фіксований розмір для невеликих наборів "
"(подібно до сховища кортежів) і вказуватиме на окремий блок пам’яті змінного "
"розміру для середніх і великих наборів (подібно списку зберігання). Жодне з "
"полів цієї структури не можна вважати відкритим, і всі можуть бути змінені. "
"Весь доступ має здійснюватися через задокументований API, а не шляхом "
"маніпулювання значеннями в структурі."

msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :class:"
"`set` type."
msgstr ""
"Це екземпляр :c:type:`PyTypeObject`, що представляє тип :class:`set` Python."

msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :class:"
"`frozenset` type."
msgstr ""
"Це екземпляр :c:type:`PyTypeObject`, що представляє тип :class:`frozenset` "
"Python."

msgid ""
"The following type check macros work on pointers to any Python object. "
"Likewise, the constructor functions work with any iterable Python object."
msgstr ""
"Наступні макроси перевірки типу працюють з покажчиками на будь-який об’єкт "
"Python. Подібним чином функції конструктора працюють з будь-яким ітерованим "
"об’єктом Python."

msgid ""
"Return true if *p* is a :class:`set` object or an instance of a subtype. "
"This function always succeeds."
msgstr ""
"Повертає true, якщо *p* є об’єктом :class:`set` або екземпляром підтипу. Ця "
"функція завжди успішна."

msgid ""
"Return true if *p* is a :class:`frozenset` object or an instance of a "
"subtype.  This function always succeeds."
msgstr ""
"Повертає true, якщо *p* є об’єктом :class:`frozenset` або екземпляром "
"підтипу. Ця функція завжди успішна."

msgid ""
"Return true if *p* is a :class:`set` object, a :class:`frozenset` object, or "
"an instance of a subtype.  This function always succeeds."
msgstr ""
"Повертає true, якщо *p* є об’єктом :class:`set`, об’єктом :class:`frozenset` "
"або екземпляром підтипу. Ця функція завжди успішна."

msgid ""
"Return true if *p* is a :class:`set` object but not an instance of a "
"subtype.  This function always succeeds."
msgstr ""
"Повертає true, якщо *p* є об’єктом :class:`set`, але не екземпляром підтипу. "
"Ця функція завжди успішна."

msgid ""
"Return true if *p* is a :class:`set` object or a :class:`frozenset` object "
"but not an instance of a subtype.  This function always succeeds."
msgstr ""
"Повертає true, якщо *p* є об’єктом :class:`set` або об’єктом :class:"
"`frozenset`, але не екземпляром підтипу. Ця функція завжди успішна."

msgid ""
"Return true if *p* is a :class:`frozenset` object but not an instance of a "
"subtype.  This function always succeeds."
msgstr ""
"Повертає true, якщо *p* є об’єктом :class:`frozenset`, але не є екземпляром "
"підтипу. Ця функція завжди успішна."

msgid ""
"Return a new :class:`set` containing objects returned by the *iterable*.  "
"The *iterable* may be ``NULL`` to create a new empty set.  Return the new "
"set on success or ``NULL`` on failure.  Raise :exc:`TypeError` if *iterable* "
"is not actually iterable.  The constructor is also useful for copying a set "
"(``c=set(s)``)."
msgstr ""
"Повертає новий :class:`set`, що містить об’єкти, повернуті *iterable*. "
"*Iterable* може бути ``NULL`` для створення нового порожнього набору. "
"Повертає новий набір у разі успіху або ``NULL`` у разі невдачі. Викликати :"
"exc:`TypeError`, якщо *iterable* насправді не можна ітерувати. Конструктор "
"також корисний для копіювання набору (``c=set(s)``)."

msgid ""
"Return a new :class:`frozenset` containing objects returned by the "
"*iterable*. The *iterable* may be ``NULL`` to create a new empty frozenset.  "
"Return the new set on success or ``NULL`` on failure.  Raise :exc:"
"`TypeError` if *iterable* is not actually iterable."
msgstr ""
"Повертає новий :class:`frozenset`, що містить об’єкти, повернуті *iterable*. "
"*Iterable* може бути ``NULL`` для створення нового порожнього замороженого "
"набору. Повертає новий набір у разі успіху або ``NULL`` у разі невдачі. "
"Викликати :exc:`TypeError`, якщо *iterable* насправді не можна ітерувати."

msgid ""
"The following functions and macros are available for instances of :class:"
"`set` or :class:`frozenset` or instances of their subtypes."
msgstr ""
"Наступні функції та макроси доступні для екземплярів :class:`set` або :class:"
"`frozenset` або екземплярів їхніх підтипів."

msgid ""
"Return the length of a :class:`set` or :class:`frozenset` object. Equivalent "
"to ``len(anyset)``.  Raises a :exc:`PyExc_SystemError` if *anyset* is not a :"
"class:`set`, :class:`frozenset`, or an instance of a subtype."
msgstr ""
"Повертає довжину об’єкта :class:`set` або :class:`frozenset`. Еквівалент "
"``len(anyset)``. Викликає :exc:`PyExc_SystemError`, якщо *anyset* не є :"
"class:`set`, :class:`frozenset` або екземпляром підтипу."

msgid "Macro form of :c:func:`PySet_Size` without error checking."
msgstr "Макроформа :c:func:`PySet_Size` без перевірки помилок."

msgid ""
"Return ``1`` if found, ``0`` if not found, and ``-1`` if an error is "
"encountered.  Unlike the Python :meth:`__contains__` method, this function "
"does not automatically convert unhashable sets into temporary frozensets.  "
"Raise a :exc:`TypeError` if the *key* is unhashable. Raise :exc:"
"`PyExc_SystemError` if *anyset* is not a :class:`set`, :class:`frozenset`, "
"or an instance of a subtype."
msgstr ""
"Повертає ``1``, якщо знайдено, ``0``, якщо не знайдено, ``-1``, якщо "
"виявлено помилку. На відміну від методу Python :meth:`__contains__`, ця "
"функція не перетворює набори, які не можна хешувати, у тимчасові заморожені "
"набори. Викликати :exc:`TypeError`, якщо *ключ* не хешується. Викликати :exc:"
"`PyExc_SystemError`, якщо *anyset* не є :class:`set`, :class:`frozenset` або "
"екземпляром підтипу."

msgid ""
"Add *key* to a :class:`set` instance.  Also works with :class:`frozenset` "
"instances (like :c:func:`PyTuple_SetItem` it can be used to fill in the "
"values of brand new frozensets before they are exposed to other code).  "
"Return ``0`` on success or ``-1`` on failure. Raise a :exc:`TypeError` if "
"the *key* is unhashable. Raise a :exc:`MemoryError` if there is no room to "
"grow.  Raise a :exc:`SystemError` if *set* is not an instance of :class:"
"`set` or its subtype."
msgstr ""
"Додайте *key* до екземпляра :class:`set`. Також працює з екземплярами :class:"
"`frozenset` (наприклад, :c:func:`PyTuple_SetItem`, його можна "
"використовувати для заповнення значень абсолютно нових заморожених наборів "
"перед тим, як вони будуть представлені в іншому коді). Повертає ``0`` у разі "
"успіху або ``-1`` у разі невдачі. Викликати :exc:`TypeError`, якщо *ключ* не "
"хешується. Викликайте :exc:`MemoryError`, якщо немає місця для зростання. "
"Викликати :exc:`SystemError`, якщо *set* не є екземпляром :class:`set` або "
"його підтипу."

msgid ""
"The following functions are available for instances of :class:`set` or its "
"subtypes but not for instances of :class:`frozenset` or its subtypes."
msgstr ""
"Наступні функції доступні для екземплярів :class:`set` або його підтипів, "
"але не для екземплярів :class:`frozenset` або його підтипів."

msgid ""
"Return ``1`` if found and removed, ``0`` if not found (no action taken), and "
"``-1`` if an error is encountered.  Does not raise :exc:`KeyError` for "
"missing keys.  Raise a :exc:`TypeError` if the *key* is unhashable.  Unlike "
"the Python :meth:`~set.discard` method, this function does not automatically "
"convert unhashable sets into temporary frozensets. Raise :exc:"
"`PyExc_SystemError` if *set* is not an instance of :class:`set` or its "
"subtype."
msgstr ""
"Повертає ``1``, якщо знайдено та видалено, ``0``, якщо не знайдено (дія не "
"виконано), і ``-1``, якщо виявлено помилку. Не викликає :exc:`KeyError` за "
"відсутні ключі. Викликати :exc:`TypeError`, якщо *ключ* не хешується. На "
"відміну від методу Python :meth:`~set.discard`, ця функція не перетворює "
"набори, які не можна хешувати, у тимчасові заморожені набори. Викликати :exc:"
"`PyExc_SystemError`, якщо *set* не є екземпляром :class:`set` або його "
"підтипу."

msgid ""
"Return a new reference to an arbitrary object in the *set*, and removes the "
"object from the *set*.  Return ``NULL`` on failure.  Raise :exc:`KeyError` "
"if the set is empty. Raise a :exc:`SystemError` if *set* is not an instance "
"of :class:`set` or its subtype."
msgstr ""
"Повертає нове посилання на довільний об’єкт у *set* та видаляє об’єкт із "
"*set*. Повертає ``NULL`` у разі помилки. Викликати :exc:`KeyError`, якщо "
"набір порожній. Викликати :exc:`SystemError`, якщо *set* не є екземпляром :"
"class:`set` або його підтипу."

msgid "Empty an existing set of all elements."
msgstr "Очистити існуючий набір від усіх елементів."
