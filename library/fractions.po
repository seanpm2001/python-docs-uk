# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Dmytro Kazanzhy, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-12 16:28+0000\n"
"PO-Revision-Date: 2021-06-28 01:06+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://www.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

msgid ":mod:`fractions` --- Rational numbers"
msgstr ":mod:`fractions` --- Раціональні числа"

msgid "**Source code:** :source:`Lib/fractions.py`"
msgstr "**Вихідний код:** :source:`Lib/fractions.py`"

msgid ""
"The :mod:`fractions` module provides support for rational number arithmetic."
msgstr ""
"Модуль :mod:`fractions` забезпечує підтримку арифметики раціональних чисел."

msgid ""
"A Fraction instance can be constructed from a pair of integers, from another "
"rational number, or from a string."
msgstr ""
"Екземпляр Fraction можна побудувати з пари цілих чисел, з іншого "
"раціонального числа або з рядка."

msgid ""
"The first version requires that *numerator* and *denominator* are instances "
"of :class:`numbers.Rational` and returns a new :class:`Fraction` instance "
"with value ``numerator/denominator``. If *denominator* is :const:`0`, it "
"raises a :exc:`ZeroDivisionError`. The second version requires that "
"*other_fraction* is an instance of :class:`numbers.Rational` and returns a :"
"class:`Fraction` instance with the same value.  The next two versions accept "
"either a :class:`float` or a :class:`decimal.Decimal` instance, and return "
"a :class:`Fraction` instance with exactly the same value.  Note that due to "
"the usual issues with binary floating-point (see :ref:`tut-fp-issues`), the "
"argument to ``Fraction(1.1)`` is not exactly equal to 11/10, and so "
"``Fraction(1.1)`` does *not* return ``Fraction(11, 10)`` as one might "
"expect. (But see the documentation for the :meth:`limit_denominator` method "
"below.) The last version of the constructor expects a string or unicode "
"instance. The usual form for this instance is::"
msgstr ""
"Перша версія вимагає, щоб *чисельник* і *знаменник* були екземплярами :class:"
"`numbers.Rational` і повертає новий екземпляр :class:`Fraction` зі значенням "
"``чисельник/знаменник``. Якщо *знаменник* дорівнює :const:`0`, це викликає :"
"exc:`ZeroDivisionError`. Друга версія вимагає, щоб *other_fraction* був "
"екземпляром :class:`numbers.Rational` і повертав екземпляр :class:`Fraction` "
"з тим самим значенням. Наступні дві версії приймають екземпляр :class:"
"`float` або :class:`decimal.Decimal` і повертають екземпляр :class:"
"`Fraction` з точно таким же значенням. Зауважте, що через звичайні проблеми "
"з двійковими числами з плаваючою комою (див. :ref:`tut-fp-issues`), аргумент "
"``Fraction(1.1)`` не дорівнює точно 11/10, тому ``Fraction(1.1)`` *не* "
"повертає ``Fraction(11, 10)``, як можна було очікувати. (Але перегляньте "
"документацію для методу :meth:`limit_denominator` нижче.) Остання версія "
"конструктора очікує рядок або екземпляр Юнікоду. Звичайна форма для цього "
"випадку::"

msgid ""
"where the optional ``sign`` may be either '+' or '-' and ``numerator`` and "
"``denominator`` (if present) are strings of decimal digits (underscores may "
"be used to delimit digits as with integral literals in code).  In addition, "
"any string that represents a finite value and is accepted by the :class:"
"`float` constructor is also accepted by the :class:`Fraction` constructor.  "
"In either form the input string may also have leading and/or trailing "
"whitespace. Here are some examples::"
msgstr ""

msgid ""
"The :class:`Fraction` class inherits from the abstract base class :class:"
"`numbers.Rational`, and implements all of the methods and operations from "
"that class.  :class:`Fraction` instances are hashable, and should be treated "
"as immutable.  In addition, :class:`Fraction` has the following properties "
"and methods:"
msgstr ""
"Клас :class:`Fraction` успадковує абстрактний базовий клас :class:`numbers."
"Rational` і реалізує всі методи й операції цього класу. Екземпляри :class:"
"`Fraction` можна хешувати, і їх слід розглядати як незмінні. Крім того, :"
"class:`Fraction` має такі властивості та методи:"

msgid ""
"The :class:`Fraction` constructor now accepts :class:`float` and :class:"
"`decimal.Decimal` instances."
msgstr ""
"Конструктор :class:`Fraction` тепер приймає екземпляри :class:`float` і :"
"class:`decimal.Decimal`."

msgid ""
"The :func:`math.gcd` function is now used to normalize the *numerator* and "
"*denominator*. :func:`math.gcd` always return a :class:`int` type. "
"Previously, the GCD type depended on *numerator* and *denominator*."
msgstr ""
"Функція :func:`math.gcd` тепер використовується для нормалізації "
"*чисельника* та *знаменника*. :func:`math.gcd` завжди повертає тип :class:"
"`int`. Раніше тип GCD залежав від *чисельника* та *знаменника*."

msgid ""
"Underscores are now permitted when creating a :class:`Fraction` instance "
"from a string, following :PEP:`515` rules."
msgstr ""

msgid ""
":class:`Fraction` implements ``__int__`` now to satisfy ``typing."
"SupportsInt`` instance checks."
msgstr ""

msgid "Numerator of the Fraction in lowest term."
msgstr "Чисельник дробу в молодшому члені."

msgid "Denominator of the Fraction in lowest term."
msgstr "Знаменник дробу в найменшому члені."

msgid ""
"Return a tuple of two integers, whose ratio is equal to the Fraction and "
"with a positive denominator."
msgstr ""
"Повертає кортеж із двох цілих чисел, співвідношення яких дорівнює дробу та "
"має додатний знаменник."

msgid ""
"Alternative constructor which only accepts instances of :class:`float` or :"
"class:`numbers.Integral`. Beware that ``Fraction.from_float(0.3)`` is not "
"the same value as ``Fraction(3, 10)``."
msgstr ""
"Альтернативний конструктор, який приймає лише екземпляри :class:`float` або :"
"class:`numbers.Integral`. Майте на увазі, що ``Fraction.from_float(0.3)`` не "
"є тим самим значенням ``Fraction(3, 10)``."

msgid ""
"From Python 3.2 onwards, you can also construct a :class:`Fraction` instance "
"directly from a :class:`float`."
msgstr ""
"Починаючи з Python 3.2 і далі, ви також можете створити екземпляр :class:"
"`Fraction` безпосередньо з :class:`float`."

msgid ""
"Alternative constructor which only accepts instances of :class:`decimal."
"Decimal` or :class:`numbers.Integral`."
msgstr ""
"Альтернативний конструктор, який приймає лише екземпляри :class:`decimal."
"Decimal` або :class:`numbers.Integral`."

msgid ""
"From Python 3.2 onwards, you can also construct a :class:`Fraction` instance "
"directly from a :class:`decimal.Decimal` instance."
msgstr ""
"Починаючи з Python 3.2 і далі, ви також можете створити екземпляр :class:"
"`Fraction` безпосередньо з екземпляра :class:`decimal.Decimal`."

msgid ""
"Finds and returns the closest :class:`Fraction` to ``self`` that has "
"denominator at most max_denominator.  This method is useful for finding "
"rational approximations to a given floating-point number:"
msgstr ""
"Знаходить і повертає найближчий :class:`Fraction` до ``self``, який має "
"знаменник не більше max_denominator. Цей метод корисний для знаходження "
"раціональних наближень до даного числа з плаваючою комою:"

msgid "or for recovering a rational number that's represented as a float:"
msgstr ""
"або для відновлення раціонального числа, представленого як число з плаваючою "
"точкою:"

msgid ""
"Returns the greatest :class:`int` ``<= self``.  This method can also be "
"accessed through the :func:`math.floor` function:"
msgstr ""
"Повертає найбільше :class:`int` ``<= self``. Цей метод також можна отримати "
"через функцію :func:`math.floor`:"

msgid ""
"Returns the least :class:`int` ``>= self``.  This method can also be "
"accessed through the :func:`math.ceil` function."
msgstr ""
"Повертає найменше :class:`int` ``>= self``. Цей метод також можна отримати "
"через функцію :func:`math.ceil`."

msgid ""
"The first version returns the nearest :class:`int` to ``self``, rounding "
"half to even. The second version rounds ``self`` to the nearest multiple of "
"``Fraction(1, 10**ndigits)`` (logically, if ``ndigits`` is negative), again "
"rounding half toward even.  This method can also be accessed through the :"
"func:`round` function."
msgstr ""
"Перша версія повертає найближчий :class:`int` до ``self``, округляючи "
"половину до парного. Друга версія округлює ``self`` до найближчого кратного "
"``Fraction(1, 10**ndigits)`` (логічно, якщо ``ndigits`` є від'ємним), знову "
"округлюючи половину до парного. Цей метод також можна отримати через "
"функцію :func:`round`."

msgid "Module :mod:`numbers`"
msgstr "Модуль :mod:`numbers`"

msgid "The abstract base classes making up the numeric tower."
msgstr "Абстрактні базові класи, що утворюють числову вежу."
