# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Dmytro Kazanzhy, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-12 16:28+0000\n"
"PO-Revision-Date: 2021-06-28 00:55+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://www.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

msgid ":mod:`asyncore` --- Asynchronous socket handler"
msgstr ":mod:`asyncore` --- обробник асинхронного сокета"

msgid "**Source code:** :source:`Lib/asyncore.py`"
msgstr "**Вихідний код:** :source:`Lib/asyncore.py`"

msgid ""
"The :mod:`asyncore` module is deprecated (see :pep:`PEP 594 <594#asyncore>` "
"for details). Please use :mod:`asyncio` instead."
msgstr ""

msgid ""
"This module exists for backwards compatibility only.  For new code we "
"recommend using :mod:`asyncio`."
msgstr ""
"Цей модуль існує лише для зворотної сумісності. Для нового коду ми "
"рекомендуємо використовувати :mod:`asyncio`."

msgid ""
"This module provides the basic infrastructure for writing asynchronous  "
"socket service clients and servers."
msgstr ""
"Цей модуль надає базову інфраструктуру для написання клієнтів і серверів "
"служби асинхронних сокетів."

msgid ":ref:`Availability <availability>`: not Emscripten, not WASI."
msgstr ""

msgid ""
"This module does not work or is not available on WebAssembly platforms "
"``wasm32-emscripten`` and ``wasm32-wasi``. See :ref:`wasm-availability` for "
"more information."
msgstr ""

msgid ""
"There are only two ways to have a program on a single processor do  \"more "
"than one thing at a time.\" Multi-threaded programming is the  simplest and "
"most popular way to do it, but there is another very different technique, "
"that lets you have nearly all the advantages of  multi-threading, without "
"actually using multiple threads.  It's really  only practical if your "
"program is largely I/O bound.  If your program is processor bound, then pre-"
"emptive scheduled threads are probably what you really need.  Network "
"servers are rarely processor bound, however."
msgstr ""
"Є лише два способи змусити програму на одному процесорі виконувати \"більш "
"ніж одну дію одночасно\". Багатопотокове програмування є найпростішим і "
"найпопулярнішим способом зробити це, але існує ще одна зовсім інша техніка, "
"яка дає вам змогу отримати майже всі переваги багатопоточності без "
"фактичного використання кількох потоків. Це дійсно практично, лише якщо ваша "
"програма значною мірою пов’язана з вводом-виводом. Якщо ваша програма "
"пов’язана з процесором, то вам справді потрібні потоки з випереджальним "
"плануванням. Проте мережеві сервери рідко пов’язані з процесором."

msgid ""
"If your operating system supports the :c:func:`select` system call in its I/"
"O library (and nearly all do), then you can use it to juggle multiple "
"communication channels at once; doing other work while your I/O is taking "
"place in the \"background.\"  Although this strategy can seem strange and "
"complex, especially at first, it is in many ways easier to understand and "
"control than multi-threaded programming.  The :mod:`asyncore` module solves "
"many of the difficult problems for you, making the task of building "
"sophisticated high-performance network servers and clients a snap.  For "
"\"conversational\" applications and protocols the companion :mod:`asynchat` "
"module is invaluable."
msgstr ""
"Якщо ваша операційна система підтримує системний виклик :c:func:`select` у "
"своїй бібліотеці вводу-виводу (і майже всі так підтримує), ви можете "
"використовувати її для жонглювання кількома каналами зв’язку одночасно; "
"виконувати іншу роботу, поки ваш ввід/вивід виконується у \"фоновому "
"режимі\". Хоча ця стратегія може здатися дивною та складною, особливо "
"спочатку, її багато в чому легше зрозуміти та контролювати, ніж "
"багатопотокове програмування. Модуль :mod:`asyncore` вирішує багато складних "
"проблем, роблячи завдання побудови складних високопродуктивних мережевих "
"серверів і клієнтів миттєвим. Для \"розмовних\" програм і протоколів "
"супутній модуль :mod:`asynchat` є безцінним."

msgid ""
"The basic idea behind both modules is to create one or more network "
"*channels*, instances of class :class:`asyncore.dispatcher` and :class:"
"`asynchat.async_chat`.  Creating the channels adds them to a global map, "
"used by the :func:`loop` function if you do not provide it with your own "
"*map*."
msgstr ""
"Основна ідея обох модулів полягає у створенні одного або кількох мережевих "
"*каналів*, екземплярів класу :class:`asyncore.dispatcher` і :class:`asynchat."
"async_chat`. Створення каналів додає їх до глобальної карти, яка "
"використовується функцією :func:`loop`, якщо ви не надаєте їй свою власну "
"*карту*."

msgid ""
"Once the initial channel(s) is(are) created, calling the :func:`loop` "
"function activates channel service, which continues until the last channel "
"(including any that have been added to the map during asynchronous service) "
"is closed."
msgstr ""
"Після створення початкового(их) каналу(ів) виклик функції :func:`loop` "
"активує службу каналу, яка продовжується, доки не буде закрито останній "
"канал (включаючи будь-який, який було додано до карти під час асинхронної "
"служби)."

msgid ""
"Enter a polling loop that terminates after count passes or all open channels "
"have been closed.  All arguments are optional.  The *count* parameter "
"defaults to ``None``, resulting in the loop terminating only when all "
"channels have been closed.  The *timeout* argument sets the timeout "
"parameter for the appropriate :func:`~select.select` or :func:`~select.poll` "
"call, measured in seconds; the default is 30 seconds.  The *use_poll* "
"parameter, if true, indicates that :func:`~select.poll` should be used in "
"preference to :func:`~select.select` (the default is ``False``)."
msgstr ""
"Введіть цикл опитування, який завершується після проходження підрахунку або "
"закриття всіх відкритих каналів. Усі аргументи необов’язкові. Параметр "
"*count* за замовчуванням має значення ``None``, що призводить до завершення "
"циклу лише після закриття всіх каналів. Аргумент *timeout* встановлює "
"параметр часу очікування для відповідного виклику :func:`~select.select` "
"або :func:`~select.poll`, виміряний у секундах; за замовчуванням 30 секунд. "
"Параметр *use_poll*, якщо він істинний, вказує, що :func:`~select.poll` слід "
"використовувати замість :func:`~select.select` (за замовчуванням ``False``)."

msgid ""
"The *map* parameter is a dictionary whose items are the channels to watch. "
"As channels are closed they are deleted from their map.  If *map* is "
"omitted, a global map is used. Channels (instances of :class:`asyncore."
"dispatcher`, :class:`asynchat.async_chat` and subclasses thereof) can freely "
"be mixed in the map."
msgstr ""
"Параметр *map* — це словник, елементи якого є каналами для перегляду. Коли "
"канали закриваються, вони видаляються з карти. Якщо *map* опущено, "
"використовується глобальна карта. Канали (екземпляри :class:`asyncore."
"dispatcher`, :class:`asynchat.async_chat` та їхні підкласи) можна вільно "
"змішувати на карті."

msgid ""
"The :class:`dispatcher` class is a thin wrapper around a low-level socket "
"object. To make it more useful, it has a few methods for event-handling "
"which are called from the asynchronous loop.   Otherwise, it can be treated "
"as a normal non-blocking socket object."
msgstr ""
"Клас :class:`dispatcher` — це тонка обгортка навколо об’єкта сокета низького "
"рівня. Щоб зробити його більш корисним, він має кілька методів для обробки "
"подій, які викликаються з асинхронного циклу. В іншому випадку його можна "
"розглядати як звичайний неблокуючий об’єкт сокета."

msgid ""
"The firing of low-level events at certain times or in certain connection "
"states tells the asynchronous loop that certain higher-level events have "
"taken place.  For example, if we have asked for a socket to connect to "
"another host, we know that the connection has been made when the socket "
"becomes writable for the first time (at this point you know that you may "
"write to it with the expectation of success).  The implied higher-level "
"events are:"
msgstr ""
"Запуск подій низького рівня в певний час або в певних станах з’єднання "
"повідомляє асинхронному циклу, що відбулися певні події вищого рівня. "
"Наприклад, якщо ми запросили сокет для з’єднання з іншим хостом, ми знаємо, "
"що з’єднання було встановлено, коли сокет стане доступним для запису вперше "
"(на цьому етапі ви знаєте, що можете писати в нього з очікуванням успіху ). "
"Передбачувані події вищого рівня:"

msgid "Event"
msgstr "Подія"

msgid "Description"
msgstr "опис"

msgid "``handle_connect()``"
msgstr "``handle_connect()``"

msgid "Implied by the first read or write event"
msgstr "Передбачено першою подією читання або запису"

msgid "``handle_close()``"
msgstr "``handle_close()``"

msgid "Implied by a read event with no data available"
msgstr "Означається подією читання без доступних даних"

msgid "``handle_accepted()``"
msgstr "``handle_accepted()``"

msgid "Implied by a read event on a listening socket"
msgstr "Означається подією читання в сокеті, що прослуховує"

msgid ""
"During asynchronous processing, each mapped channel's :meth:`readable` and :"
"meth:`writable` methods are used to determine whether the channel's socket "
"should be added to the list of channels :c:func:`select`\\ ed or :c:func:"
"`poll`\\ ed for read and write events."
msgstr ""
"Під час асинхронної обробки методи кожного зіставленого каналу :meth:"
"`readable` і :meth:`writable` використовуються для визначення того, чи слід "
"додати сокет каналу до списку каналів :c:func:`select`\\ ed або :c:func:"
"`poll`\\ для подій читання та запису."

msgid ""
"Thus, the set of channel events is larger than the basic socket events.  The "
"full set of methods that can be overridden in your subclass follows:"
msgstr ""
"Таким чином, набір подій каналу більший, ніж подій основного сокета. Нижче "
"наведено повний набір методів, які можна перевизначати у вашому підкласі:"

msgid ""
"Called when the asynchronous loop detects that a :meth:`read` call on the "
"channel's socket will succeed."
msgstr ""
"Викликається, коли асинхронний цикл виявляє, що виклик :meth:`read` для "
"сокета каналу буде успішним."

msgid ""
"Called when the asynchronous loop detects that a writable socket can be "
"written.  Often this method will implement the necessary buffering for "
"performance.  For example::"
msgstr ""
"Викликається, коли асинхронний цикл виявляє, що доступний для запису сокет "
"можна записати. Часто цей метод реалізує необхідну буферизацію для "
"продуктивності. Наприклад::"

msgid ""
"Called when there is out of band (OOB) data for a socket connection.  This "
"will almost never happen, as OOB is tenuously supported and rarely used."
msgstr ""
"Викликається, коли для підключення до сокета є позасмугові (OOB) дані. Цього "
"майже ніколи не станеться, оскільки OOB слабко підтримується і рідко "
"використовується."

msgid ""
"Called when the active opener's socket actually makes a connection.  Might "
"send a \"welcome\" banner, or initiate a protocol negotiation with the "
"remote endpoint, for example."
msgstr ""
"Викликається, коли активний сокет відкривача фактично встановлює з’єднання. "
"Наприклад, може надіслати банер \"вітання\" або ініціювати узгодження "
"протоколу з віддаленою кінцевою точкою."

msgid "Called when the socket is closed."
msgstr "Викликається, коли сокет закрито."

msgid ""
"Called when an exception is raised and not otherwise handled.  The default "
"version prints a condensed traceback."
msgstr ""
"Викликається, коли виникає виняток і не обробляється інакше. Версія за "
"замовчуванням друкує скорочену трасування."

msgid ""
"Called on listening channels (passive openers) when a connection can be "
"established with a new remote endpoint that has issued a :meth:`connect` "
"call for the local endpoint. Deprecated in version 3.2; use :meth:"
"`handle_accepted` instead."
msgstr ""
"Викликається на каналах прослуховування (пасивні відкривачі), коли можна "
"встановити з’єднання з новою віддаленою кінцевою точкою, яка випустила "
"виклик :meth:`connect` для локальної кінцевої точки. Застаріло у версії 3.2; "
"замість цього використовуйте :meth:`handle_accepted`."

msgid ""
"Called on listening channels (passive openers) when a connection has been "
"established with a new remote endpoint that has issued a :meth:`connect` "
"call for the local endpoint.  *sock* is a *new* socket object usable to send "
"and receive data on the connection, and *addr* is the address bound to the "
"socket on the other end of the connection."
msgstr ""
"Викликається на каналах прослуховування (пасивні відкривачі), коли "
"встановлено з’єднання з новою віддаленою кінцевою точкою, яка випустила "
"виклик :meth:`connect` для локальної кінцевої точки. *sock* — це *новий* "
"об’єкт сокета, який можна використовувати для надсилання та отримання даних "
"у з’єднанні, а *addr* — це адреса, прив’язана до сокета на іншому кінці "
"з’єднання."

msgid ""
"Called each time around the asynchronous loop to determine whether a "
"channel's socket should be added to the list on which read events can "
"occur.  The default method simply returns ``True``, indicating that by "
"default, all channels will be interested in read events."
msgstr ""
"Викликається кожного разу в асинхронному циклі, щоб визначити, чи слід "
"додавати сокет каналу до списку, у якому можуть відбуватися події читання. "
"Метод за замовчуванням просто повертає ``True``, вказуючи, що за "
"замовчуванням усі канали будуть зацікавлені в подіях читання."

msgid ""
"Called each time around the asynchronous loop to determine whether a "
"channel's socket should be added to the list on which write events can "
"occur.  The default method simply returns ``True``, indicating that by "
"default, all channels will be interested in write events."
msgstr ""
"Викликається кожного разу в асинхронному циклі, щоб визначити, чи слід "
"додавати сокет каналу до списку, у якому можуть відбуватися події запису. "
"Метод за замовчуванням просто повертає ``True``, вказуючи, що за "
"замовчуванням усі канали будуть зацікавлені в подіях запису."

msgid ""
"In addition, each channel delegates or extends many of the socket methods. "
"Most of these are nearly identical to their socket partners."
msgstr ""
"Крім того, кожен канал делегує або розширює багато методів сокетів. "
"Більшість із них майже ідентичні своїм партнерам по сокетам."

msgid ""
"This is identical to the creation of a normal socket, and will use the same "
"options for creation.  Refer to the :mod:`socket` documentation for "
"information on creating sockets."
msgstr ""
"Це ідентично створенню звичайного сокета та використовуватиме ті самі "
"параметри для створення. Зверніться до документації :mod:`socket` для "
"отримання інформації про створення сокетів."

msgid "*family* and *type* arguments can be omitted."
msgstr "Аргументи *сімейство* і *тип* можна опустити."

msgid ""
"As with the normal socket object, *address* is a tuple with the first "
"element the host to connect to, and the second the port number."
msgstr ""
"Як і у випадку зі звичайним об’єктом сокета, *адреса* – це кортеж із першим "
"елементом, до якого потрібно підключитися, а другим – номер порту."

msgid "Send *data* to the remote end-point of the socket."
msgstr "Надіслати *дані* до віддаленої кінцевої точки сокета."

msgid ""
"Read at most *buffer_size* bytes from the socket's remote end-point.  An "
"empty bytes object implies that the channel has been closed from the other "
"end."
msgstr ""
"Читати щонайбільше *buffer_size* байтів із віддаленої кінцевої точки сокета. "
"Порожній об’єкт bytes означає, що канал закрито з іншого боку."

msgid ""
"Note that :meth:`recv` may raise :exc:`BlockingIOError` , even though :func:"
"`select.select` or :func:`select.poll` has reported the socket ready for "
"reading."
msgstr ""
"Зверніть увагу, що :meth:`recv` може викликати :exc:`BlockingIOError`, "
"навіть якщо :func:`select.select` або :func:`select.poll` повідомили, що "
"сокет готовий для читання."

msgid ""
"Listen for connections made to the socket.  The *backlog* argument specifies "
"the maximum number of queued connections and should be at least 1; the "
"maximum value is system-dependent (usually 5)."
msgstr ""
"Прослухайте підключення до розетки. Аргумент *backlog* визначає максимальну "
"кількість підключень у черзі та має бути принаймні 1; максимальне значення "
"залежить від системи (зазвичай 5)."

msgid ""
"Bind the socket to *address*.  The socket must not already be bound.  (The "
"format of *address* depends on the address family --- refer to the :mod:"
"`socket` documentation for more information.)  To mark the socket as re-"
"usable (setting the :const:`SO_REUSEADDR` option), call the :class:"
"`dispatcher` object's :meth:`set_reuse_addr` method."
msgstr ""
"Прив’яжіть сокет до *адреси*. Розетка ще не повинна бути прив’язаною. "
"(Формат *адреси* залежить від сімейства адрес --- зверніться до "
"документації :mod:`socket` для отримання додаткової інформації.) Щоб "
"позначити сокет як придатний для повторного використання (встановивши "
"параметр :const:`SO_REUSEADDR`), викликати метод :meth:`set_reuse_addr` "
"об'єкта :class:`dispatcher`."

msgid ""
"Accept a connection.  The socket must be bound to an address and listening "
"for connections.  The return value can be either ``None`` or a pair ``(conn, "
"address)`` where *conn* is a *new* socket object usable to send and receive "
"data on the connection, and *address* is the address bound to the socket on "
"the other end of the connection. When ``None`` is returned it means the "
"connection didn't take place, in which case the server should just ignore "
"this event and keep listening for further incoming connections."
msgstr ""
"Прийняти підключення. Сокет має бути прив’язаний до адреси та прослуховувати "
"підключення. Поверненим значенням може бути ``None`` або пара ``(conn, "
"address)``, де *conn* — це *новий* об’єкт сокета, який можна використовувати "
"для надсилання та отримання даних під час з’єднання, а *address* — це "
"адресу, прив’язану до сокета на іншому кінці з’єднання. Коли повертається "
"\"None\", це означає, що з’єднання не відбулося, і в цьому випадку сервер "
"повинен просто проігнорувати цю подію та продовжувати прослуховувати "
"подальші вхідні з’єднання."

msgid ""
"Close the socket.  All future operations on the socket object will fail. The "
"remote end-point will receive no more data (after queued data is flushed).  "
"Sockets are automatically closed when they are garbage-collected."
msgstr ""
"Закрийте розетку. Усі майбутні операції над об’єктом сокета не вдадуться. "
"Віддалена кінцева точка більше не отримуватиме даних (після видалення даних "
"із черги). Сокети автоматично закриваються під час збирання сміття."

msgid ""
"A :class:`dispatcher` subclass which adds simple buffered output capability, "
"useful for simple clients. For more sophisticated usage use :class:`asynchat."
"async_chat`."
msgstr ""
"Підклас :class:`dispatcher`, який додає просту можливість буферизованого "
"виведення, корисну для простих клієнтів. Для більш складного використання "
"використовуйте :class:`asynchat.async_chat`."

msgid ""
"A file_dispatcher takes a file descriptor or :term:`file object` along with "
"an optional map argument and wraps it for use with the :c:func:`poll` or :c:"
"func:`loop` functions.  If provided a file object or anything with a :c:func:"
"`fileno` method, that method will be called and passed to the :class:"
"`file_wrapper` constructor."
msgstr ""
"File_dispatcher приймає дескриптор файлу або :term:`file object` разом із "
"необов’язковим аргументом карти та обгортає його для використання з "
"функціями :c:func:`poll` або :c:func:`loop`. Якщо надати файловий об’єкт або "
"щось із методом :c:func:`fileno`, цей метод буде викликано та передано "
"конструктору :class:`file_wrapper`."

msgid ":ref:`Availability <availability>`: Unix."
msgstr ":ref:`Наявність <availability>`: Unix."

msgid ""
"A file_wrapper takes an integer file descriptor and calls :func:`os.dup` to "
"duplicate the handle so that the original handle may be closed independently "
"of the file_wrapper.  This class implements sufficient methods to emulate a "
"socket for use by the :class:`file_dispatcher` class."
msgstr ""
"File_wrapper приймає цілочисельний файловий дескриптор і викликає :func:`os."
"dup`, щоб дублювати дескриптор, щоб вихідний дескриптор можна було закрити "
"незалежно від file_wrapper. Цей клас реалізує достатньо методів для емуляції "
"сокета для використання класом :class:`file_dispatcher`."

msgid "asyncore Example basic HTTP client"
msgstr "asyncore Приклад базового клієнта HTTP"

msgid ""
"Here is a very basic HTTP client that uses the :class:`dispatcher` class to "
"implement its socket handling::"
msgstr ""
"Ось простий клієнт HTTP, який використовує клас :class:`dispatcher` для "
"реалізації обробки сокетів:"

msgid "asyncore Example basic echo server"
msgstr "asyncore Приклад базового сервера відлуння"

msgid ""
"Here is a basic echo server that uses the :class:`dispatcher` class to "
"accept connections and dispatches the incoming connections to a handler::"
msgstr ""
"Ось базовий ехо-сервер, який використовує клас :class:`dispatcher` для "
"прийняття з’єднань і відправляє вхідні з’єднання до обробника::"
