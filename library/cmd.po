# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Dmytro Kazanzhy, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-12 16:28+0000\n"
"PO-Revision-Date: 2021-06-28 00:56+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://www.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

msgid ":mod:`cmd` --- Support for line-oriented command interpreters"
msgstr ":mod:`cmd` --- Підтримка рядково-орієнтованих інтерпретаторів команд"

msgid "**Source code:** :source:`Lib/cmd.py`"
msgstr "**Вихідний код:** :source:`Lib/cmd.py`"

msgid ""
"The :class:`Cmd` class provides a simple framework for writing line-oriented "
"command interpreters.  These are often useful for test harnesses, "
"administrative tools, and prototypes that will later be wrapped in a more "
"sophisticated interface."
msgstr ""
"Клас :class:`Cmd` забезпечує просту структуру для написання рядково-"
"орієнтованих інтерпретаторів команд. Вони часто корисні для тестових систем, "
"інструментів адміністрування та прототипів, які пізніше будуть загорнуті в "
"більш складний інтерфейс."

msgid ""
"A :class:`Cmd` instance or subclass instance is a line-oriented interpreter "
"framework.  There is no good reason to instantiate :class:`Cmd` itself; "
"rather, it's useful as a superclass of an interpreter class you define "
"yourself in order to inherit :class:`Cmd`'s methods and encapsulate action "
"methods."
msgstr ""
"Екземпляр :class:`Cmd` або екземпляр підкласу — це рядково-орієнтована "
"структура інтерпретатора. Немає вагомих причин створювати сам :class:`Cmd`; "
"скоріше, це корисно як суперклас класу інтерпретатора, який ви визначаєте "
"самостійно, щоб успадкувати методи :class:`Cmd` та інкапсулювати методи дії."

msgid ""
"The optional argument *completekey* is the :mod:`readline` name of a "
"completion key; it defaults to :kbd:`Tab`. If *completekey* is not :const:"
"`None` and :mod:`readline` is available, command completion is done "
"automatically."
msgstr ""
"Необов’язковий аргумент *completekey* є назвою :mod:`readline` ключа "
"завершення; типово :kbd:`Tab`. Якщо *completekey* не :const:`None` і :mod:"
"`readline` доступний, завершення команди виконується автоматично."

msgid ""
"The optional arguments *stdin* and *stdout* specify the  input and output "
"file objects that the Cmd instance or subclass  instance will use for input "
"and output. If not specified, they will default to :data:`sys.stdin` and :"
"data:`sys.stdout`."
msgstr ""
"Необов’язкові аргументи *stdin* і *stdout* визначають вхідні та вихідні "
"файлові об’єкти, які екземпляр Cmd або екземпляр підкласу використовуватиме "
"для введення та виведення. Якщо не вказати, за замовчуванням вони будуть :"
"data:`sys.stdin` і :data:`sys.stdout`."

msgid ""
"If you want a given *stdin* to be used, make sure to set the instance's :"
"attr:`use_rawinput` attribute to ``False``, otherwise *stdin* will be "
"ignored."
msgstr ""
"Якщо ви хочете, щоб використовувався заданий *stdin*, обов’язково встановіть "
"для атрибута екземпляра :attr:`use_rawinput` значення ``False``, інакше "
"*stdin* буде проігноровано."

msgid "Cmd Objects"
msgstr "Cmd об’єкти"

msgid "A :class:`Cmd` instance has the following methods:"
msgstr "Екземпляр :class:`Cmd` має такі методи:"

msgid ""
"Repeatedly issue a prompt, accept input, parse an initial prefix off the "
"received input, and dispatch to action methods, passing them the remainder "
"of the line as argument."
msgstr ""
"Повторно видавати підказку, приймати введення, аналізувати початковий "
"префікс отриманого введення та відправляти до методів дії, передаючи їм "
"решту рядка як аргумент."

msgid ""
"The optional argument is a banner or intro string to be issued before the "
"first prompt (this overrides the :attr:`intro` class attribute)."
msgstr ""
"Необов’язковим аргументом є банер або вступний рядок, який буде виданий "
"перед першою підказкою (це замінює атрибут класу :attr:`intro`)."

msgid ""
"If the :mod:`readline` module is loaded, input will automatically inherit :"
"program:`bash`\\ -like history-list editing (e.g. :kbd:`Control-P` scrolls "
"back to the last command, :kbd:`Control-N` forward to the next one, :kbd:"
"`Control-F` moves the cursor to the right non-destructively, :kbd:`Control-"
"B` moves the cursor to the left non-destructively, etc.)."
msgstr ""
"Якщо завантажено модуль :mod:`readline`, введення автоматично успадковує :"
"program:`bash`\\ -подібне до редагування списку історії (наприклад, :kbd:"
"`Control-P` прокручує назад до останньої команди, :kbd:`Control-N` "
"переходить до наступного, :kbd:`Control-F` переміщує курсор праворуч "
"недеструктивно, :kbd:`Control-B` переміщує курсор ліворуч недеструктивно "
"тощо)."

msgid "An end-of-file on input is passed back as the string ``'EOF'``."
msgstr "Кінець файлу при введенні передається назад як рядок ``'EOF'``."

msgid ""
"An interpreter instance will recognize a command name ``foo`` if and only if "
"it has a method :meth:`do_foo`.  As a special case, a line beginning with "
"the character ``'?'`` is dispatched to the method :meth:`do_help`.  As "
"another special case, a line beginning with the character ``'!'`` is "
"dispatched to the method :meth:`do_shell` (if such a method is defined)."
msgstr ""
"Екземпляр інтерпретатора розпізнає ім’я команди ``foo`` тоді і тільки якщо "
"він має метод :meth:`do_foo`. Як особливий випадок, рядок, що починається "
"символом ``'?''`` надсилається в метод :meth:`do_help`. Як інший особливий "
"випадок, рядок, що починається символом ``'!''`` відправляється в метод :"
"meth:`do_shell` (якщо такий метод визначено)."

msgid ""
"This method will return when the :meth:`postcmd` method returns a true "
"value. The *stop* argument to :meth:`postcmd` is the return value from the "
"command's corresponding :meth:`do_\\*` method."
msgstr ""
"Цей метод повернеться, коли метод :meth:`postcmd` поверне справжнє значення. "
"Аргумент *stop* для :meth:`postcmd` є значенням, що повертається з "
"відповідного методу :meth:`do_\\*` команди."

msgid ""
"If completion is enabled, completing commands will be done automatically, "
"and completing of commands args is done by calling :meth:`complete_foo` with "
"arguments *text*, *line*, *begidx*, and *endidx*.  *text* is the string "
"prefix we are attempting to match: all returned matches must begin with it. "
"*line* is the current input line with leading whitespace removed, *begidx* "
"and *endidx* are the beginning and ending indexes of the prefix text, which "
"could be used to provide different completion depending upon which position "
"the argument is in."
msgstr ""
"Якщо завершення ввімкнено, завершення команд виконуватиметься автоматично, а "
"завершення аргументів команд здійснюється викликом :meth:`complete_foo` з "
"аргументами *text*, *line*, *begidx* і *endidx*. *текст* — це префікс рядка, "
"який ми намагаємось зіставити: усі повернуті збіги мають починатися з нього. "
"*рядок* — це поточний рядок введення з видаленими пробілами на початку, "
"*begidx* і *endidx* — це початковий і кінцевий індекси тексту префікса, які "
"можна використовувати для забезпечення різного завершення залежно від того, "
"в якій позиції знаходиться аргумент."

msgid ""
"All subclasses of :class:`Cmd` inherit a predefined :meth:`do_help`.  This "
"method, called with an argument ``'bar'``, invokes the corresponding method :"
"meth:`help_bar`, and if that is not present, prints the docstring of :meth:"
"`do_bar`, if available.  With no argument, :meth:`do_help` lists all "
"available help topics (that is, all commands with corresponding :meth:"
"`help_\\*` methods or commands that have docstrings), and also lists any "
"undocumented commands."
msgstr ""
"Усі підкласи :class:`Cmd` успадковують попередньо визначений :meth:"
"`do_help`. Цей метод, який викликається з аргументом ``'bar``, викликає "
"відповідний метод :meth:`help_bar`, і якщо його немає, друкує рядок "
"документації :meth:`do_bar`, якщо доступний. Без аргументів :meth:`do_help` "
"перераховує всі доступні теми довідки (тобто всі команди з відповідними "
"методами :meth:`help_\\*` або команди, які мають рядки документації), а "
"також перераховує будь-які незадокументовані команди."

msgid ""
"Interpret the argument as though it had been typed in response to the "
"prompt. This may be overridden, but should not normally need to be; see the :"
"meth:`precmd` and :meth:`postcmd` methods for useful execution hooks.  The "
"return value is a flag indicating whether interpretation of commands by the "
"interpreter should stop.  If there is a :meth:`do_\\*` method for the "
"command *str*, the return value of that method is returned, otherwise the "
"return value from the :meth:`default` method is returned."
msgstr ""
"Інтерпретуйте аргумент так, ніби його було введено у відповідь на підказку. "
"Це може бути перевизначено, але зазвичай це не повинно бути обов’язково; "
"перегляньте методи :meth:`precmd` і :meth:`postcmd` для корисних хуків "
"виконання. Значення, що повертається, є прапорцем, який вказує, чи слід "
"припинити інтерпретацію команд інтерпретатором. Якщо для команди *str* є "
"метод :meth:`do_\\*`, повертається значення, що повертається цим методом, "
"інакше повертається значення, що повертається методом :meth:`default`."

msgid ""
"Method called when an empty line is entered in response to the prompt. If "
"this method is not overridden, it repeats the last nonempty command entered."
msgstr ""
"Метод викликається, коли у відповідь на підказку вводиться порожній рядок. "
"Якщо цей метод не перевизначено, він повторює останню введену непорожню "
"команду."

msgid ""
"Method called on an input line when the command prefix is not recognized. If "
"this method is not overridden, it prints an error message and returns."
msgstr ""
"Метод, який викликається у рядку введення, коли префікс команди не "
"розпізнається. Якщо цей метод не перевизначено, він друкує повідомлення про "
"помилку та повертається."

msgid ""
"Method called to complete an input line when no command-specific :meth:"
"`complete_\\*` method is available.  By default, it returns an empty list."
msgstr ""
"Метод, який викликається для завершення рядка введення, коли недоступний "
"метод :meth:`complete_\\*` для команди. За замовчуванням він повертає "
"порожній список."

msgid ""
"Method called to display a list of strings as a compact set of columns. Each "
"column is only as wide as necessary. Columns are separated by two spaces for "
"readability."
msgstr ""

msgid ""
"Hook method executed just before the command line *line* is interpreted, but "
"after the input prompt is generated and issued.  This method is a stub in :"
"class:`Cmd`; it exists to be overridden by subclasses.  The return value is "
"used as the command which will be executed by the :meth:`onecmd` method; "
"the :meth:`precmd` implementation may re-write the command or simply return "
"*line* unchanged."
msgstr ""
"Метод підхоплення виконується безпосередньо перед інтерпретацією *рядка* "
"командного рядка, але після створення та видачі підказки введення. Цей метод "
"є заглушкою в :class:`Cmd`; він існує, щоб бути заміненим підкласами. "
"Повернене значення використовується як команда, яка буде виконана методом :"
"meth:`onecmd`; реалізація :meth:`precmd` може переписати команду або просто "
"повернути *рядок* без змін."

msgid ""
"Hook method executed just after a command dispatch is finished.  This method "
"is a stub in :class:`Cmd`; it exists to be overridden by subclasses.  *line* "
"is the command line which was executed, and *stop* is a flag which indicates "
"whether execution will be terminated after the call to :meth:`postcmd`; this "
"will be the return value of the :meth:`onecmd` method.  The return value of "
"this method will be used as the new value for the internal flag which "
"corresponds to *stop*; returning false will cause interpretation to continue."
msgstr ""
"Метод підхоплення виконується відразу після завершення відправки команди. "
"Цей метод є заглушкою в :class:`Cmd`; він існує, щоб бути заміненим "
"підкласами. *рядок* — це командний рядок, який було виконано, а *стоп* — це "
"позначка, яка вказує, чи буде виконання припинено після виклику :meth:"
"`postcmd`; це буде значення, яке повертає метод :meth:`onecmd`. Повернене "
"значення цього методу буде використано як нове значення для внутрішнього "
"прапора, який відповідає *stop*; повернення false призведе до продовження "
"інтерпретації."

msgid ""
"Hook method executed once when :meth:`cmdloop` is called.  This method is a "
"stub in :class:`Cmd`; it exists to be overridden by subclasses."
msgstr ""
"Метод підхоплення виконується один раз під час виклику :meth:`cmdloop`. Цей "
"метод є заглушкою в :class:`Cmd`; він існує, щоб бути заміненим підкласами."

msgid ""
"Hook method executed once when :meth:`cmdloop` is about to return. This "
"method is a stub in :class:`Cmd`; it exists to be overridden by subclasses."
msgstr ""
"Метод підключення виконується один раз, коли :meth:`cmdloop` збирається "
"повернутися. Цей метод є заглушкою в :class:`Cmd`; він існує, щоб бути "
"заміненим підкласами."

msgid ""
"Instances of :class:`Cmd` subclasses have some public instance variables:"
msgstr ""
"Екземпляри підкласів :class:`Cmd` мають деякі публічні змінні екземпляра:"

msgid "The prompt issued to solicit input."
msgstr "Підказка, видана для запиту введення."

msgid "The string of characters accepted for the command prefix."
msgstr "Рядок символів, прийнятний для префікса команди."

msgid "The last nonempty command prefix seen."
msgstr "Останній непорожній префікс команди."

msgid ""
"A list of queued input lines.  The cmdqueue list is checked in :meth:"
"`cmdloop` when new input is needed; if it is nonempty, its elements will be "
"processed in order, as if entered at the prompt."
msgstr ""
"Список рядків введення в черзі. Список cmdqueue перевіряється в :meth:"
"`cmdloop`, коли потрібен новий вхід; якщо він непорожній, його елементи "
"будуть оброблені в порядку, ніби введені під час підказки."

msgid ""
"A string to issue as an intro or banner.  May be overridden by giving the :"
"meth:`cmdloop` method an argument."
msgstr ""
"Рядок для випуску як вступ або банер. Може бути перевизначено, надавши "
"методу :meth:`cmdloop` аргумент."

msgid ""
"The header to issue if the help output has a section for documented commands."
msgstr ""
"Заголовок, який потрібно видавати, якщо вихід довідки містить розділ для "
"задокументованих команд."

msgid ""
"The header to issue if the help output has a section for miscellaneous  help "
"topics (that is, there are :meth:`help_\\*` methods without corresponding :"
"meth:`do_\\*` methods)."
msgstr ""
"Заголовок, який потрібно видавати, якщо вихід довідки містить розділ для "
"різноманітних тем довідки (тобто існують методи :meth:`help_\\*` без "
"відповідних методів :meth:`do_\\*`)."

msgid ""
"The header to issue if the help output has a section for undocumented  "
"commands (that is, there are :meth:`do_\\*` methods without corresponding :"
"meth:`help_\\*` methods)."
msgstr ""
"Заголовок, який потрібно видавати, якщо вихід довідки містить розділ для "
"недокументованих команд (тобто існують методи :meth:`do_\\*` без відповідних "
"методів :meth:`help_\\*`)."

msgid ""
"The character used to draw separator lines under the help-message headers.  "
"If empty, no ruler line is drawn.  It defaults to ``'='``."
msgstr ""
"Символ, який використовується для малювання роздільних ліній під заголовками "
"довідкових повідомлень. Якщо поле пусте, лінія лінійки не малюється. За "
"замовчуванням ``'='``."

msgid ""
"A flag, defaulting to true.  If true, :meth:`cmdloop` uses :func:`input` to "
"display a prompt and read the next command; if false, :meth:`sys.stdout."
"write` and :meth:`sys.stdin.readline` are used. (This means that by "
"importing :mod:`readline`, on systems that support it, the interpreter will "
"automatically support :program:`Emacs`\\ -like line editing  and command-"
"history keystrokes.)"
msgstr ""
"Прапор, за замовчуванням значення true. Якщо істина, :meth:`cmdloop` "
"використовує :func:`input` для відображення підказки та читання наступної "
"команди; якщо false, використовуються :meth:`sys.stdout.write` і :meth:`sys."
"stdin.readline`. (Це означає, що імпортуючи :mod:`readline`, у системах, які "
"його підтримують, інтерпретатор автоматично підтримуватиме :program:"
"`Emacs`\\ -редагування рядка та натискання клавіш історії команд.)"

msgid "Cmd Example"
msgstr "Приклад команди"

msgid ""
"The :mod:`cmd` module is mainly useful for building custom shells that let a "
"user work with a program interactively."
msgstr ""
"Модуль :mod:`cmd` в основному корисний для створення спеціальних оболонок, "
"які дозволяють користувачеві працювати з програмою в інтерактивному режимі."

msgid ""
"This section presents a simple example of how to build a shell around a few "
"of the commands in the :mod:`turtle` module."
msgstr ""
"У цьому розділі представлено простий приклад того, як створити оболонку "
"навколо кількох команд у модулі :mod:`turtle`."

msgid ""
"Basic turtle commands such as :meth:`~turtle.forward` are added to a :class:"
"`Cmd` subclass with method named :meth:`do_forward`.  The argument is "
"converted to a number and dispatched to the turtle module.  The docstring is "
"used in the help utility provided by the shell."
msgstr ""
"Базові команди черепахи, такі як :meth:`~turtle.forward`, додаються до "
"підкласу :class:`Cmd` із методом під назвою :meth:`do_forward`. Аргумент "
"перетворюється на число та надсилається до модуля turtle. Рядок документації "
"використовується в утиліті довідки, що надається оболонкою."

msgid ""
"The example also includes a basic record and playback facility implemented "
"with the :meth:`~Cmd.precmd` method which is responsible for converting the "
"input to lowercase and writing the commands to a file.  The :meth:"
"`do_playback` method reads the file and adds the recorded commands to the :"
"attr:`cmdqueue` for immediate playback::"
msgstr ""
"Приклад також містить базову можливість запису та відтворення, реалізовану "
"за допомогою методу :meth:`~Cmd.precmd`, який відповідає за перетворення "
"введення на нижній регістр і запис команд у файл. Метод :meth:`do_playback` "
"читає файл і додає записані команди до :attr:`cmdqueue` для негайного "
"відтворення::"

msgid ""
"Here is a sample session with the turtle shell showing the help functions, "
"using blank lines to repeat commands, and the simple record and playback "
"facility:"
msgstr ""
"Ось зразок сеансу з панциром черепахи, який показує довідкові функції, "
"використовує порожні рядки для повторення команд, а також простий засіб "
"запису та відтворення:"
