# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Olga Tomakhina, 2022
# Dmytro Kazanzhy, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-12 16:28+0000\n"
"PO-Revision-Date: 2021-06-28 01:13+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://www.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

msgid ":mod:`sqlite3` --- DB-API 2.0 interface for SQLite databases"
msgstr ":mod:`sqlite3` --- інтерфейс DB-API 2.0 для баз даних SQLite"

msgid "**Source code:** :source:`Lib/sqlite3/`"
msgstr "**Вихідний код:** :source:`Lib/sqlite3/`"

msgid ""
"SQLite is a C library that provides a lightweight disk-based database that "
"doesn't require a separate server process and allows accessing the database "
"using a nonstandard variant of the SQL query language. Some applications can "
"use SQLite for internal data storage.  It's also possible to prototype an "
"application using SQLite and then port the code to a larger database such as "
"PostgreSQL or Oracle."
msgstr ""
"SQLite — це бібліотека C, яка надає легку дискову базу даних, яка не "
"потребує окремого серверного процесу та дозволяє отримувати доступ до бази "
"даних за допомогою нестандартного варіанту мови запитів SQL. Деякі програми "
"можуть використовувати SQLite для внутрішнього зберігання даних. Також можна "
"створити прототип програми за допомогою SQLite, а потім перенести код у "
"більшу базу даних, таку як PostgreSQL або Oracle."

msgid ""
"The :mod:`!sqlite3` module was written by Gerhard Häring.  It provides an "
"SQL interface compliant with the DB-API 2.0 specification described by :pep:"
"`249`, and requires SQLite 3.7.15 or newer."
msgstr ""

msgid "This document includes four main sections:"
msgstr ""

msgid ":ref:`sqlite3-tutorial` teaches how to use the :mod:`!sqlite3` module."
msgstr ""

msgid ""
":ref:`sqlite3-reference` describes the classes and functions this module "
"defines."
msgstr ""

msgid ":ref:`sqlite3-howtos` details how to handle specific tasks."
msgstr ""

msgid ""
":ref:`sqlite3-explanation` provides in-depth background on transaction "
"control."
msgstr ""

msgid "https://www.sqlite.org"
msgstr "https://www.sqlite.org"

msgid ""
"The SQLite web page; the documentation describes the syntax and the "
"available data types for the supported SQL dialect."
msgstr ""
"Веб-сторінка SQLite; документація описує синтаксис і доступні типи даних для "
"підтримуваного діалекту SQL."

msgid "https://www.w3schools.com/sql/"
msgstr "https://www.w3schools.com/sql/"

msgid "Tutorial, reference and examples for learning SQL syntax."
msgstr "Підручник, довідник і приклади для вивчення синтаксису SQL."

msgid ":pep:`249` - Database API Specification 2.0"
msgstr ":pep:`249` - Специфікація API бази даних 2.0"

msgid "PEP written by Marc-André Lemburg."
msgstr "PEP, написаний Марком-Андре Лембургом."

msgid "Tutorial"
msgstr "Підручник"

msgid ""
"In this tutorial, you will create a database of Monty Python movies using "
"basic :mod:`!sqlite3` functionality. It assumes a fundamental understanding "
"of database concepts, including `cursors`_ and `transactions`_."
msgstr ""

msgid ""
"First, we need to create a new database and open a database connection to "
"allow :mod:`!sqlite3` to work with it. Call :func:`sqlite3.connect` to to "
"create a connection to the database :file:`tutorial.db` in the current "
"working directory, implicitly creating it if it does not exist:"
msgstr ""

msgid ""
"The returned :class:`Connection` object ``con`` represents the connection to "
"the on-disk database."
msgstr ""

msgid ""
"In order to execute SQL statements and fetch results from SQL queries, we "
"will need to use a database cursor. Call :meth:`con.cursor() <Connection."
"cursor>` to create the :class:`Cursor`:"
msgstr ""

msgid ""
"Now that we've got a database connection and a cursor, we can create a "
"database table ``movie`` with columns for title, release year, and review "
"score. For simplicity, we can just use column names in the table declaration "
"-- thanks to the `flexible typing`_ feature of SQLite, specifying the data "
"types is optional. Execute the ``CREATE TABLE`` statement by calling :meth:"
"`cur.execute(...) <Cursor.execute>`:"
msgstr ""

msgid ""
"We can verify that the new table has been created by querying the "
"``sqlite_master`` table built-in to SQLite, which should now contain an "
"entry for the ``movie`` table definition (see `The Schema Table`_ for "
"details). Execute that query by calling :meth:`cur.execute(...) <Cursor."
"execute>`, assign the result to ``res``, and call :meth:`res.fetchone() "
"<Cursor.fetchone>` to fetch the resulting row:"
msgstr ""

msgid ""
"We can see that the table has been created, as the query returns a :class:"
"`tuple` containing the table's name. If we query ``sqlite_master`` for a non-"
"existent table ``spam``, :meth:`!res.fetchone()` will return ``None``:"
msgstr ""

msgid ""
"Now, add two rows of data supplied as SQL literals by executing an "
"``INSERT`` statement, once again by calling :meth:`cur.execute(...) <Cursor."
"execute>`:"
msgstr ""

msgid ""
"The ``INSERT`` statement implicitly opens a transaction, which needs to be "
"committed before changes are saved in the database (see :ref:`sqlite3-"
"controlling-transactions` for details). Call :meth:`con.commit() <Connection."
"commit>` on the connection object to commit the transaction:"
msgstr ""

msgid ""
"We can verify that the data was inserted correctly by executing a ``SELECT`` "
"query. Use the now-familiar :meth:`cur.execute(...) <Cursor.execute>` to "
"assign the result to ``res``, and call :meth:`res.fetchall() <Cursor."
"fetchall>` to return all resulting rows:"
msgstr ""

msgid ""
"The result is a :class:`list` of two :class:`!tuple`\\s, one per row, each "
"containing that row's ``score`` value."
msgstr ""

msgid ""
"Now, insert three more rows by calling :meth:`cur.executemany(...) <Cursor."
"executemany>`:"
msgstr ""

msgid ""
"Notice that ``?`` placeholders are used to bind ``data`` to the query. "
"Always use placeholders instead of :ref:`string formatting <tut-formatting>` "
"to bind Python values to SQL statements, to avoid `SQL injection attacks`_ "
"(see :ref:`sqlite3-placeholders` for more details)."
msgstr ""

msgid ""
"We can verify that the new rows were inserted by executing a ``SELECT`` "
"query, this time iterating over the results of the query:"
msgstr ""

msgid ""
"Each row is a two-item :class:`tuple` of ``(year, title)``, matching the "
"columns selected in the query."
msgstr ""

msgid ""
"Finally, verify that the database has been written to disk by calling :meth:"
"`con.close() <Connection.close>` to close the existing connection, opening a "
"new one, creating a new cursor, then querying the database:"
msgstr ""

msgid ""
"You've now created an SQLite database using the :mod:`!sqlite3` module, "
"inserted data and retrieved values from it in multiple ways."
msgstr ""

msgid ":ref:`sqlite3-howtos` for further reading:"
msgstr ""

msgid ":ref:`sqlite3-placeholders`"
msgstr ""

msgid ":ref:`sqlite3-adapters`"
msgstr ""

msgid ":ref:`sqlite3-converters`"
msgstr ""

msgid ":ref:`sqlite3-connection-context-manager`"
msgstr ""

msgid ""
":ref:`sqlite3-explanation` for in-depth background on transaction control."
msgstr ""

msgid "Reference"
msgstr "Посилання"

msgid "Module functions"
msgstr ""

msgid "Open a connection to an SQLite database."
msgstr ""

msgid "Parameters"
msgstr "Параметри"

msgid ""
"The path to the database file to be opened. Pass ``\":memory:\"`` to open a "
"connection to a database that is in RAM instead of on disk."
msgstr ""

msgid ""
"How many seconds the connection should wait before raising an exception, if "
"the database is locked by another connection. If another connection opens a "
"transaction to modify the database, it will be locked until that transaction "
"is committed. Default five seconds."
msgstr ""

msgid ""
"Control whether and how data types not :ref:`natively supported by SQLite "
"<sqlite3-types>` are looked up to be converted to Python types, using the "
"converters registered with :func:`register_converter`. Set it to any "
"combination (using ``|``, bitwise or) of :const:`PARSE_DECLTYPES` and :const:"
"`PARSE_COLNAMES` to enable this. Column names takes precedence over declared "
"types if both flags are set. Types cannot be detected for generated fields "
"(for example ``max(data)``), even when the *detect_types* parameter is set; :"
"class:`str` will be returned instead. By default (``0``), type detection is "
"disabled."
msgstr ""

msgid ""
"The :attr:`~Connection.isolation_level` of the connection, controlling "
"whether and how transactions are implicitly opened. Can be ``\"DEFERRED\"`` "
"(default), ``\"EXCLUSIVE\"`` or ``\"IMMEDIATE\"``; or ``None`` to disable "
"opening transactions implicitly. See :ref:`sqlite3-controlling-transactions` "
"for more."
msgstr ""

msgid ""
"If ``True`` (default), only the creating thread may use the connection. If "
"``False``, the connection may be shared across multiple threads; if so, "
"write operations should be serialized by the user to avoid data corruption."
msgstr ""

msgid ""
"A custom subclass of :class:`Connection` to create the connection with, if "
"not the default :class:`Connection` class."
msgstr ""

msgid ""
"The number of statements that :mod:`!sqlite3` should internally cache for "
"this connection, to avoid parsing overhead. By default, 128 statements."
msgstr ""

msgid ""
"If set to ``True``, *database* is interpreted as a :abbr:`URI (Uniform "
"Resource Identifier)` with a file path and an optional query string. The "
"scheme part *must* be ``\"file:\"``, and the path can be relative or "
"absolute. The query string allows passing parameters to SQLite, enabling "
"various :ref:`sqlite3-uri-tricks`."
msgstr ""

msgid "Return type"
msgstr ""

msgid ""
"Raises an :ref:`auditing event <auditing>` ``sqlite3.connect`` with argument "
"``database``."
msgstr ""
"Викликає :ref:`подію аудиту <auditing>` ``sqlite3.connect`` з аргументом "
"``база даних``."

msgid ""
"Raises an :ref:`auditing event <auditing>` ``sqlite3.connect/handle`` with "
"argument ``connection_handle``."
msgstr ""
"Викликає :ref:`подію аудиту <auditing>` ``sqlite3.connect/handle`` з "
"аргументом ``connection_handle``."

msgid "The *uri* parameter."
msgstr ""

msgid ""
"*database* can now also be a :term:`path-like object`, not only a string."
msgstr ""
"*database* тепер також може бути :term:`path-like object`, а не лише рядком."

msgid "The ``sqlite3.connect/handle`` auditing event."
msgstr ""

msgid ""
"Return ``True`` if the string *statement* appears to contain one or more "
"complete SQL statements. No syntactic verification or parsing of any kind is "
"performed, other than checking that there are no unclosed string literals "
"and the statement is terminated by a semicolon."
msgstr ""

msgid "For example:"
msgstr "Наприклад:"

msgid ""
"This function may be useful during command-line input to determine if the "
"entered text seems to form a complete SQL statement, or if additional input "
"is needed before calling :meth:`~Cursor.execute`."
msgstr ""

msgid ""
"Enable or disable callback tracebacks. By default you will not get any "
"tracebacks in user-defined functions, aggregates, converters, authorizer "
"callbacks etc. If you want to debug them, you can call this function with "
"*flag* set to ``True``. Afterwards, you will get tracebacks from callbacks "
"on :data:`sys.stderr`. Use ``False`` to disable the feature again."
msgstr ""

msgid ""
"Register an :func:`unraisable hook handler <sys.unraisablehook>` for an "
"improved debug experience:"
msgstr ""

msgid ""
"Register an *adapter* callable to adapt the Python type *type* into an "
"SQLite type. The adapter is called with a Python object of type *type* as "
"its sole argument, and must return a value of a :ref:`type that SQLite "
"natively understands <sqlite3-types>`."
msgstr ""

msgid ""
"Register the *converter* callable to convert SQLite objects of type "
"*typename* into a Python object of a specific type. The converter is invoked "
"for all SQLite values of type *typename*; it is passed a :class:`bytes` "
"object and should return an object of the desired Python type. Consult the "
"parameter *detect_types* of :func:`connect` for information regarding how "
"type detection works."
msgstr ""

msgid ""
"Note: *typename* and the name of the type in your query are matched case-"
"insensitively."
msgstr ""

msgid "Module constants"
msgstr ""

msgid ""
"Pass this flag value to the *detect_types* parameter of :func:`connect` to "
"look up a converter function by using the type name, parsed from the query "
"column name, as the converter dictionary key. The type name must be wrapped "
"in square brackets (``[]``)."
msgstr ""

msgid ""
"This flag may be combined with :const:`PARSE_DECLTYPES` using the ``|`` "
"(bitwise or) operator."
msgstr ""

msgid ""
"Pass this flag value to the *detect_types* parameter of :func:`connect` to "
"look up a converter function using the declared types for each column. The "
"types are declared when the database table is created. :mod:`!sqlite3` will "
"look up a converter function using the first word of the declared type as "
"the converter dictionary key. For example:"
msgstr ""

msgid ""
"This flag may be combined with :const:`PARSE_COLNAMES` using the ``|`` "
"(bitwise or) operator."
msgstr ""

msgid ""
"Flags that should be returned by the *authorizer_callback* callable passed "
"to :meth:`Connection.set_authorizer`, to indicate whether:"
msgstr ""

msgid "Access is allowed (:const:`!SQLITE_OK`),"
msgstr ""

msgid ""
"The SQL statement should be aborted with an error (:const:`!SQLITE_DENY`)"
msgstr ""

msgid ""
"The column should be treated as a ``NULL`` value (:const:`!SQLITE_IGNORE`)"
msgstr ""

msgid ""
"String constant stating the supported DB-API level. Required by the DB-API. "
"Hard-coded to ``\"2.0\"``."
msgstr ""
"Рядкова константа, що вказує підтримуваний рівень DB-API. Потрібний для DB-"
"API. Жорстко закодований на ``\"2.0\"``."

msgid ""
"String constant stating the type of parameter marker formatting expected by "
"the :mod:`!sqlite3` module. Required by the DB-API. Hard-coded to "
"``\"qmark\"``."
msgstr ""

msgid ""
"The :mod:`!sqlite3` module supports ``qmark``, ``numeric``, and ``named`` DB-"
"API parameter styles, because that is what the underlying SQLite library "
"supports. However, the DB-API does not allow multiple values for the "
"``paramstyle`` attribute."
msgstr ""

msgid ""
"Version number of the runtime SQLite library as a :class:`string <str>`."
msgstr ""

msgid ""
"Version number of the runtime SQLite library as a :class:`tuple` of :class:"
"`integers <int>`."
msgstr ""

msgid ""
"Integer constant required by the DB-API 2.0, stating the level of thread "
"safety the :mod:`!sqlite3` module supports. This attribute is set based on "
"the default `threading mode <https://sqlite.org/threadsafe.html>`_ the "
"underlying SQLite library is compiled with. The SQLite threading modes are:"
msgstr ""

msgid ""
"**Single-thread**: In this mode, all mutexes are disabled and SQLite is "
"unsafe to use in more than a single thread at once."
msgstr ""

msgid ""
"**Multi-thread**: In this mode, SQLite can be safely used by multiple "
"threads provided that no single database connection is used simultaneously "
"in two or more threads."
msgstr ""

msgid ""
"**Serialized**: In serialized mode, SQLite can be safely used by multiple "
"threads with no restriction."
msgstr ""

msgid ""
"The mappings from SQLite threading modes to DB-API 2.0 threadsafety levels "
"are as follows:"
msgstr ""

msgid "SQLite threading mode"
msgstr ""

msgid "`threadsafety`_"
msgstr ""

msgid "`SQLITE_THREADSAFE`_"
msgstr ""

msgid "DB-API 2.0 meaning"
msgstr ""

msgid "single-thread"
msgstr ""

msgid "0"
msgstr "0"

msgid "Threads may not share the module"
msgstr ""

msgid "multi-thread"
msgstr ""

msgid "1"
msgstr "1"

msgid "2"
msgstr "2"

msgid "Threads may share the module, but not connections"
msgstr ""

msgid "serialized"
msgstr ""

msgid "3"
msgstr "3"

msgid "Threads may share the module, connections and cursors"
msgstr ""

msgid "Set *threadsafety* dynamically instead of hard-coding it to ``1``."
msgstr ""

msgid ""
"Version number of this module as a :class:`string <str>`. This is not the "
"version of the SQLite library."
msgstr ""

msgid ""
"Version number of this module as a :class:`tuple` of :class:`integers "
"<int>`. This is not the version of the SQLite library."
msgstr ""

msgid "Connection objects"
msgstr ""

msgid ""
"Each open SQLite database is represented by a ``Connection`` object, which "
"is created using :func:`sqlite3.connect`. Their main purpose is creating :"
"class:`Cursor` objects, and :ref:`sqlite3-controlling-transactions`."
msgstr ""

msgid ":ref:`sqlite3-connection-shortcuts`"
msgstr ""

msgid "An SQLite database connection has the following attributes and methods:"
msgstr "Підключення до бази даних SQLite має такі атрибути та методи:"

msgid ""
"Create and return a :class:`Cursor` object. The cursor method accepts a "
"single optional parameter *factory*. If supplied, this must be a callable "
"returning an instance of :class:`Cursor` or its subclasses."
msgstr ""

msgid ""
"Open a :class:`Blob` handle to an existing :abbr:`BLOB (Binary Large "
"OBject)`."
msgstr ""

msgid "The name of the table where the blob is located."
msgstr ""

msgid "The name of the column where the blob is located."
msgstr ""

msgid "The name of the row where the blob is located."
msgstr ""

msgid ""
"Set to ``True`` if the blob should be opened without write permissions. "
"Defaults to ``False``."
msgstr ""

msgid ""
"The name of the database where the blob is located. Defaults to ``\"main\"``."
msgstr ""

msgid "Raises"
msgstr ""

msgid "When trying to open a blob in a ``WITHOUT ROWID`` table."
msgstr ""

msgid ""
"The blob size cannot be changed using the :class:`Blob` class. Use the SQL "
"function ``zeroblob`` to create a blob with a fixed size."
msgstr ""

msgid ""
"Commit any pending transaction to the database. If there is no open "
"transaction, this method is a no-op."
msgstr ""

msgid ""
"Roll back to the start of any pending transaction. If there is no open "
"transaction, this method is a no-op."
msgstr ""

msgid ""
"Close the database connection. Any pending transaction is not committed "
"implicitly; make sure to :meth:`commit` before closing to avoid losing "
"pending changes."
msgstr ""

msgid ""
"Create a new :class:`Cursor` object and call :meth:`~Cursor.execute` on it "
"with the given *sql* and *parameters*. Return the new cursor object."
msgstr ""
"Створіть новий об’єкт :class:`Cursor` і викличте :meth:`~Cursor.execute` для "
"нього з заданими *sql* і *параметрами*. Повернути новий об’єкт курсору."

msgid ""
"Create a new :class:`Cursor` object and call :meth:`~Cursor.executemany` on "
"it with the given *sql* and *parameters*. Return the new cursor object."
msgstr ""
"Створіть новий об’єкт :class:`Cursor` і викличте :meth:`~Cursor.executemany` "
"для нього з заданими *sql* і *параметрами*. Повернути новий об’єкт курсору."

msgid ""
"Create a new :class:`Cursor` object and call :meth:`~Cursor.executescript` "
"on it with the given *sql_script*. Return the new cursor object."
msgstr ""
"Створіть новий об’єкт :class:`Cursor` і викличте :meth:`~Cursor."
"executescript` для нього за допомогою заданого *sql_script*. Повернути новий "
"об’єкт курсору."

msgid "Create or remove a user-defined SQL function."
msgstr ""

msgid "The name of the SQL function."
msgstr ""

msgid ""
"The number of arguments the SQL function can accept. If ``-1``, it may take "
"any number of arguments."
msgstr ""

msgid ""
"A callable that is called when the SQL function is invoked. The callable "
"must return :ref:`a type natively supported by SQLite <sqlite3-types>`. Set "
"to ``None`` to remove an existing SQL function."
msgstr ""

msgid ""
"If ``True``, the created SQL function is marked as `deterministic <https://"
"sqlite.org/deterministic.html>`_, which allows SQLite to perform additional "
"optimizations."
msgstr ""

msgid "If *deterministic* is used with SQLite versions older than 3.8.3."
msgstr ""

msgid "The *deterministic* parameter."
msgstr ""

msgid "Example:"
msgstr "приклад:"

msgid "Create or remove a user-defined SQL aggregate function."
msgstr ""

msgid "The name of the SQL aggregate function."
msgstr ""

msgid ""
"The number of arguments the SQL aggregate function can accept. If ``-1``, it "
"may take any number of arguments."
msgstr ""

msgid ""
"A class must implement the following methods:  * ``step()``: Add a row to "
"the aggregate. * ``finalize()``: Return the final result of the aggregate "
"as   :ref:`a type natively supported by SQLite <sqlite3-types>`.  The number "
"of arguments that the ``step()`` method must accept is controlled by "
"*n_arg*.  Set to ``None`` to remove an existing SQL aggregate function."
msgstr ""

msgid "A class must implement the following methods:"
msgstr ""

msgid "``step()``: Add a row to the aggregate."
msgstr ""

msgid ""
"``finalize()``: Return the final result of the aggregate as :ref:`a type "
"natively supported by SQLite <sqlite3-types>`."
msgstr ""

msgid ""
"The number of arguments that the ``step()`` method must accept is controlled "
"by *n_arg*."
msgstr ""

msgid "Set to ``None`` to remove an existing SQL aggregate function."
msgstr ""

msgid "Create or remove a user-defined aggregate window function."
msgstr ""

msgid "The name of the SQL aggregate window function to create or remove."
msgstr ""

msgid ""
"The number of arguments the SQL aggregate window function can accept. If "
"``-1``, it may take any number of arguments."
msgstr ""

msgid ""
"A class that must implement the following methods:  * ``step()``: Add a row "
"to the current window. * ``value()``: Return the current value of the "
"aggregate. * ``inverse()``: Remove a row from the current window. * "
"``finalize()``: Return the final result of the aggregate as   :ref:`a type "
"natively supported by SQLite <sqlite3-types>`.  The number of arguments that "
"the ``step()`` and ``value()`` methods must accept is controlled by "
"*num_params*.  Set to ``None`` to remove an existing SQL aggregate window "
"function."
msgstr ""

msgid "A class that must implement the following methods:"
msgstr ""

msgid "``step()``: Add a row to the current window."
msgstr ""

msgid "``value()``: Return the current value of the aggregate."
msgstr ""

msgid "``inverse()``: Remove a row from the current window."
msgstr ""

msgid ""
"The number of arguments that the ``step()`` and ``value()`` methods must "
"accept is controlled by *num_params*."
msgstr ""

msgid "Set to ``None`` to remove an existing SQL aggregate window function."
msgstr ""

msgid ""
"If used with a version of SQLite older than 3.25.0, which does not support "
"aggregate window functions."
msgstr ""

msgid ""
"Create a collation named *name* using the collating function *callable*. "
"*callable* is passed two :class:`string <str>` arguments, and it should "
"return an :class:`integer <int>`:"
msgstr ""
"Створіть зіставлення під назвою *name* за допомогою функції зіставлення "
"*callable*. *callable* передається два аргументи :class:`string <str>`, і "
"він має повернути :class:`ціле число <int>`:"

msgid "``1`` if the first is ordered higher than the second"
msgstr "``1``, якщо перший впорядкований вище за другий"

msgid "``-1`` if the first is ordered lower than the second"
msgstr "``-1``, якщо перший впорядкований нижче другого"

msgid "``0`` if they are ordered equal"
msgstr "``0``, якщо вони в порядку рівності"

msgid "The following example shows a reverse sorting collation:"
msgstr "У наступному прикладі показано порівняння зворотного сортування:"

msgid "Remove a collation function by setting *callable* to ``None``."
msgstr ""

msgid ""
"The collation name can contain any Unicode character.  Earlier, only ASCII "
"characters were allowed."
msgstr ""

msgid ""
"Call this method from a different thread to abort any queries that might be "
"executing on the connection. Aborted queries will raise an exception."
msgstr ""

msgid ""
"Register callable *authorizer_callback* to be invoked for each attempt to "
"access a column of a table in the database. The callback should return one "
"of :const:`SQLITE_OK`, :const:`SQLITE_DENY`, or :const:`SQLITE_IGNORE` to "
"signal how access to the column should be handled by the underlying SQLite "
"library."
msgstr ""

msgid ""
"The first argument to the callback signifies what kind of operation is to be "
"authorized. The second and third argument will be arguments or ``None`` "
"depending on the first argument. The 4th argument is the name of the "
"database (\"main\", \"temp\", etc.) if applicable. The 5th argument is the "
"name of the inner-most trigger or view that is responsible for the access "
"attempt or ``None`` if this access attempt is directly from input SQL code."
msgstr ""

msgid ""
"Please consult the SQLite documentation about the possible values for the "
"first argument and the meaning of the second and third argument depending on "
"the first one. All necessary constants are available in the :mod:`!sqlite3` "
"module."
msgstr ""

msgid "Passing ``None`` as *authorizer_callback* will disable the authorizer."
msgstr ""

msgid "Added support for disabling the authorizer using ``None``."
msgstr ""

msgid ""
"Register callable *progress_handler* to be invoked for every *n* "
"instructions of the SQLite virtual machine. This is useful if you want to "
"get called from SQLite during long-running operations, for example to update "
"a GUI."
msgstr ""

msgid ""
"If you want to clear any previously installed progress handler, call the "
"method with ``None`` for *progress_handler*."
msgstr ""

msgid ""
"Returning a non-zero value from the handler function will terminate the "
"currently executing query and cause it to raise an :exc:`OperationalError` "
"exception."
msgstr ""
"Повернення ненульового значення з функції обробника призведе до завершення "
"запиту, що виконується, і викликання виключення :exc:`OperationalError`."

msgid ""
"Register callable *trace_callback* to be invoked for each SQL statement that "
"is actually executed by the SQLite backend."
msgstr ""

msgid ""
"The only argument passed to the callback is the statement (as :class:`str`) "
"that is being executed. The return value of the callback is ignored. Note "
"that the backend does not only run statements passed to the :meth:`Cursor."
"execute` methods.  Other sources include the :ref:`transaction management "
"<sqlite3-controlling-transactions>` of the :mod:`!sqlite3` module and the "
"execution of triggers defined in the current database."
msgstr ""

msgid "Passing ``None`` as *trace_callback* will disable the trace callback."
msgstr ""

msgid ""
"Exceptions raised in the trace callback are not propagated. As a development "
"and debugging aid, use :meth:`~sqlite3.enable_callback_tracebacks` to enable "
"printing tracebacks from exceptions raised in the trace callback."
msgstr ""
"Винятки, викликані зворотним викликом трасування, не поширюються. Як "
"допомога при розробці та налагодженні використовуйте :meth:`~sqlite3."
"enable_callback_tracebacks`, щоб увімкнути друк трасування з винятків, "
"викликаних у зворотному виклику трасування."

msgid ""
"Enable the SQLite engine to load SQLite extensions from shared libraries if "
"*enabled* is ``True``; else, disallow loading SQLite extensions. SQLite "
"extensions can define new functions, aggregates or whole new virtual table "
"implementations.  One well-known extension is the fulltext-search extension "
"distributed with SQLite."
msgstr ""

msgid ""
"The :mod:`!sqlite3` module is not built with loadable extension support by "
"default, because some platforms (notably macOS) have SQLite libraries which "
"are compiled without this feature. To get loadable extension support, you "
"must pass the :option:`--enable-loadable-sqlite-extensions` option to :"
"program:`configure`."
msgstr ""

msgid ""
"Raises an :ref:`auditing event <auditing>` ``sqlite3.enable_load_extension`` "
"with arguments ``connection``, ``enabled``."
msgstr ""
"Викликає :ref:`подію аудиту <auditing>` ``sqlite3.enable_load_extension`` з "
"аргументами ``connection``, ``enabled``."

msgid "Added the ``sqlite3.enable_load_extension`` auditing event."
msgstr "Додано подію аудиту sqlite3.enable_load_extension."

msgid ""
"Load an SQLite extension from a shared library located at *path*. Enable "
"extension loading with :meth:`enable_load_extension` before calling this "
"method."
msgstr ""

msgid ""
"Raises an :ref:`auditing event <auditing>` ``sqlite3.load_extension`` with "
"arguments ``connection``, ``path``."
msgstr ""
"Викликає :ref:`подію аудиту <auditing>` ``sqlite3.load_extension`` з "
"аргументами ``connection``, ``path``."

msgid "Added the ``sqlite3.load_extension`` auditing event."
msgstr "Додано подію аудиту ``sqlite3.load_extension``."

msgid ""
"Return an :term:`iterator` to dump the database as SQL source code. Useful "
"when saving an in-memory database for later restoration. Similar to the ``."
"dump`` command in the :program:`sqlite3` shell."
msgstr ""

msgid "Create a backup of an SQLite database."
msgstr ""

msgid ""
"Works even if the database is being accessed by other clients or "
"concurrently by the same connection."
msgstr ""

msgid "The database connection to save the backup to."
msgstr ""

msgid ""
"The number of pages to copy at a time. If equal to or less than ``0``, the "
"entire database is copied in a single step. Defaults to ``-1``."
msgstr ""

msgid ""
"If set to a callable, it is invoked with three integer arguments for every "
"backup iteration: the *status* of the last iteration, the *remaining* number "
"of pages still to be copied, and the *total* number of pages. Defaults to "
"``None``."
msgstr ""

msgid ""
"The name of the database to back up. Either ``\"main\"`` (the default) for "
"the main database, ``\"temp\"`` for the temporary database, or the name of a "
"custom database as attached using the ``ATTACH DATABASE`` SQL statement."
msgstr ""

msgid ""
"The number of seconds to sleep between successive attempts to back up "
"remaining pages."
msgstr ""

msgid "Example 1, copy an existing database into another:"
msgstr ""

msgid "Example 2, copy an existing database into a transient copy:"
msgstr ""

msgid "Get a connection runtime limit."
msgstr ""

msgid "The `SQLite limit category`_ to be queried."
msgstr ""

msgid "If *category* is not recognised by the underlying SQLite library."
msgstr ""

msgid ""
"Example, query the maximum length of an SQL statement for :class:"
"`Connection` ``con`` (the default is 1000000000):"
msgstr ""

msgid ""
"Set a connection runtime limit. Attempts to increase a limit above its hard "
"upper bound are silently truncated to the hard upper bound. Regardless of "
"whether or not the limit was changed, the prior value of the limit is "
"returned."
msgstr ""

msgid "The `SQLite limit category`_ to be set."
msgstr ""

msgid ""
"The value of the new limit. If negative, the current limit is unchanged."
msgstr ""

msgid ""
"Example, limit the number of attached databases to 1 for :class:`Connection` "
"``con`` (the default limit is 10):"
msgstr ""

msgid ""
"Serialize a database into a :class:`bytes` object.  For an ordinary on-disk "
"database file, the serialization is just a copy of the disk file.  For an in-"
"memory database or a \"temp\" database, the serialization is the same "
"sequence of bytes which would be written to disk if that database were "
"backed up to disk."
msgstr ""

msgid "The database name to be serialized. Defaults to ``\"main\"``."
msgstr ""

msgid ""
"This method is only available if the underlying SQLite library has the "
"serialize API."
msgstr ""

msgid ""
"Deserialize a :meth:`serialized <serialize>` database into a :class:"
"`Connection`. This method causes the database connection to disconnect from "
"database *name*, and reopen *name* as an in-memory database based on the "
"serialization contained in *data*."
msgstr ""

msgid "A serialized database."
msgstr ""

msgid "The database name to deserialize into. Defaults to ``\"main\"``."
msgstr ""

msgid ""
"If the database connection is currently involved in a read transaction or a "
"backup operation."
msgstr ""

msgid "If *data* does not contain a valid SQLite database."
msgstr ""

msgid "If :func:`len(data) <len>` is larger than ``2**63 - 1``."
msgstr ""

msgid ""
"This method is only available if the underlying SQLite library has the "
"deserialize API."
msgstr ""

msgid ""
"This read-only attribute corresponds to the low-level SQLite `autocommit "
"mode`_."
msgstr ""

msgid ""
"``True`` if a transaction is active (there are uncommitted changes), "
"``False`` otherwise."
msgstr ""

msgid ""
"This attribute controls the :ref:`transaction handling <sqlite3-controlling-"
"transactions>` performed by :mod:`!sqlite3`. If set to ``None``, "
"transactions are never implicitly opened. If set to one of ``\"DEFERRED\"``, "
"``\"IMMEDIATE\"``, or ``\"EXCLUSIVE\"``, corresponding to the underlying "
"`SQLite transaction behaviour`_, implicit :ref:`transaction management "
"<sqlite3-controlling-transactions>` is performed."
msgstr ""

msgid ""
"If not overridden by the *isolation_level* parameter of :func:`connect`, the "
"default is ``\"\"``, which is an alias for ``\"DEFERRED\"``."
msgstr ""

msgid ""
"A callable that accepts two arguments, a :class:`Cursor` object and the raw "
"row results as a :class:`tuple`, and returns a custom object representing an "
"SQLite row."
msgstr ""

msgid ""
"If returning a tuple doesn't suffice and you want name-based access to "
"columns, you should consider setting :attr:`row_factory` to the highly "
"optimized :class:`sqlite3.Row` type. :class:`Row` provides both index-based "
"and case-insensitive name-based access to columns with almost no memory "
"overhead. It will probably be better than your own custom dictionary-based "
"approach or even a db_row based solution."
msgstr ""

msgid ""
"A callable that accepts a :class:`bytes` parameter and returns a text "
"representation of it. The callable is invoked for SQLite values with the "
"``TEXT`` data type. By default, this attribute is set to :class:`str`. If "
"you want to return ``bytes`` instead, set *text_factory* to ``bytes``."
msgstr ""

msgid ""
"Return the total number of database rows that have been modified, inserted, "
"or deleted since the database connection was opened."
msgstr ""

msgid "Cursor objects"
msgstr ""

msgid ""
"A ``Cursor`` object represents a `database cursor`_ which is used to execute "
"SQL statements, and manage the context of a fetch operation. Cursors are "
"created using :meth:`Connection.cursor`, or by using any of the :ref:"
"`connection shortcut methods <sqlite3-connection-shortcuts>`."
msgstr ""

msgid ""
"Cursor objects are :term:`iterators <iterator>`, meaning that if you :meth:"
"`~Cursor.execute` a ``SELECT`` query, you can simply iterate over the cursor "
"to fetch the resulting rows:"
msgstr ""

msgid "A :class:`Cursor` instance has the following attributes and methods."
msgstr "Екземпляр :class:`Cursor` має такі атрибути та методи."

msgid ""
"Execute SQL statement *sql*. Bind values to the statement using :ref:"
"`placeholders <sqlite3-placeholders>` that map to the :term:`sequence` or :"
"class:`dict` *parameters*."
msgstr ""

msgid ""
":meth:`execute` will only execute a single SQL statement. If you try to "
"execute more than one statement with it, it will raise a :exc:"
"`ProgrammingError`. Use :meth:`executescript` if you want to execute "
"multiple SQL statements with one call."
msgstr ""

msgid ""
"If :attr:`~Connection.isolation_level` is not ``None``, *sql* is an "
"``INSERT``, ``UPDATE``, ``DELETE``, or ``REPLACE`` statement, and there is "
"no open transaction, a transaction is implicitly opened before executing "
"*sql*."
msgstr ""

msgid ""
"Execute :ref:`parameterized <sqlite3-placeholders>` SQL statement *sql* "
"against all parameter sequences or mappings found in the sequence "
"*parameters*.  It is also possible to use an :term:`iterator` yielding "
"parameters instead of a sequence. Uses the same implicit transaction "
"handling as :meth:`~Cursor.execute`."
msgstr ""

msgid ""
"Execute the SQL statements in *sql_script*. If there is a pending "
"transaction, an implicit ``COMMIT`` statement is executed first. No other "
"implicit transaction control is performed; any transaction control must be "
"added to *sql_script*."
msgstr ""

msgid "*sql_script* must be a :class:`string <str>`."
msgstr ""

msgid ""
"If :attr:`~Connection.row_factory` is ``None``, return the next row query "
"result set as a :class:`tuple`. Else, pass it to the row factory and return "
"its result. Return ``None`` if no more data is available."
msgstr ""

msgid ""
"Return the next set of rows of a query result as a :class:`list`. Return an "
"empty list if no more rows are available."
msgstr ""

msgid ""
"The number of rows to fetch per call is specified by the *size* parameter. "
"If *size* is not given, :attr:`arraysize` determines the number of rows to "
"be fetched. If fewer than *size* rows are available, as many rows as are "
"available are returned."
msgstr ""

msgid ""
"Note there are performance considerations involved with the *size* "
"parameter. For optimal performance, it is usually best to use the arraysize "
"attribute. If the *size* parameter is used, then it is best for it to retain "
"the same value from one :meth:`fetchmany` call to the next."
msgstr ""
"Зауважте, що з параметром *size* пов’язані міркування щодо продуктивності. "
"Для оптимальної продуктивності зазвичай найкраще використовувати атрибут "
"arraysize. Якщо використовується параметр *size*, то найкраще, щоб він "
"зберігав те саме значення від одного виклику :meth:`fetchmany` до наступного."

msgid ""
"Return all (remaining) rows of a query result as a :class:`list`. Return an "
"empty list if no rows are available. Note that the :attr:`arraysize` "
"attribute can affect the performance of this operation."
msgstr ""

msgid "Close the cursor now (rather than whenever ``__del__`` is called)."
msgstr "Закрийте курсор зараз (а не під час кожного виклику ``__del__``)."

msgid ""
"The cursor will be unusable from this point forward; a :exc:"
"`ProgrammingError` exception will be raised if any operation is attempted "
"with the cursor."
msgstr ""
"Курсор стане непридатним для використання з цього моменту; виняток :exc:"
"`ProgrammingError` буде викликано, якщо будь-яка операція буде виконана з "
"курсором."

msgid "Required by the DB-API. Does nothing in :mod:`!sqlite3`."
msgstr ""

msgid ""
"Read/write attribute that controls the number of rows returned by :meth:"
"`fetchmany`. The default value is 1 which means a single row would be "
"fetched per call."
msgstr ""
"Атрибут читання/запису, який контролює кількість рядків, які повертає :meth:"
"`fetchmany`. Значення за замовчуванням дорівнює 1, що означає, що за виклик "
"буде отримано один рядок."

msgid ""
"Read-only attribute that provides the SQLite database :class:`Connection` "
"belonging to the cursor.  A :class:`Cursor` object created by calling :meth:"
"`con.cursor() <Connection.cursor>` will have a :attr:`connection` attribute "
"that refers to *con*:"
msgstr ""

msgid ""
"Read-only attribute that provides the column names of the last query. To "
"remain compatible with the Python DB API, it returns a 7-tuple for each "
"column where the last six items of each tuple are ``None``."
msgstr ""

msgid "It is set for ``SELECT`` statements without any matching rows as well."
msgstr ""
"Він також встановлений для операторів ``SELECT`` без будь-яких відповідних "
"рядків."

msgid ""
"Read-only attribute that provides the row id of the last inserted row. It is "
"only updated after successful ``INSERT`` or ``REPLACE`` statements using "
"the :meth:`execute` method.  For other statements, after :meth:`executemany` "
"or :meth:`executescript`, or if the insertion failed, the value of "
"``lastrowid`` is left unchanged.  The initial value of ``lastrowid`` is "
"``None``."
msgstr ""

msgid "Inserts into ``WITHOUT ROWID`` tables are not recorded."
msgstr "Вставки в таблиці ``БЕЗ ROWID`` не записуються."

msgid "Added support for the ``REPLACE`` statement."
msgstr "Додано підтримку оператора REPLACE."

msgid ""
"Read-only attribute that provides the number of modified rows for "
"``INSERT``, ``UPDATE``, ``DELETE``, and ``REPLACE`` statements; is ``-1`` "
"for other statements, including :abbr:`CTE (Common Table Expression)` "
"queries. It is only updated by the :meth:`execute` and :meth:`executemany` "
"methods."
msgstr ""

msgid "Row objects"
msgstr ""

msgid ""
"A :class:`!Row` instance serves as a highly optimized :attr:`~Connection."
"row_factory` for :class:`Connection` objects. It supports iteration, "
"equality testing, :func:`len`, and :term:`mapping` access by column name and "
"index."
msgstr ""

msgid "Two row objects compare equal if have equal columns and equal members."
msgstr ""

msgid ""
"Return a :class:`list` of column names as :class:`strings <str>`. "
"Immediately after a query, it is the first member of each tuple in :attr:"
"`Cursor.description`."
msgstr ""

msgid "Added support of slicing."
msgstr "Додана підтримка нарізки."

msgid "Blob objects"
msgstr ""

msgid ""
"A :class:`Blob` instance is a :term:`file-like object` that can read and "
"write data in an SQLite :abbr:`BLOB (Binary Large OBject)`. Call :func:"
"`len(blob) <len>` to get the size (number of bytes) of the blob. Use indices "
"and :term:`slices <slice>` for direct access to the blob data."
msgstr ""

msgid ""
"Use the :class:`Blob` as a :term:`context manager` to ensure that the blob "
"handle is closed after use."
msgstr ""

msgid "Close the blob."
msgstr ""

msgid ""
"The blob will be unusable from this point onward.  An :class:`~sqlite3."
"Error` (or subclass) exception will be raised if any further operation is "
"attempted with the blob."
msgstr ""

msgid ""
"Read *length* bytes of data from the blob at the current offset position. If "
"the end of the blob is reached, the data up to :abbr:`EOF (End of File)` "
"will be returned.  When *length* is not specified, or is negative, :meth:"
"`~Blob.read` will read until the end of the blob."
msgstr ""

msgid ""
"Write *data* to the blob at the current offset.  This function cannot change "
"the blob length.  Writing beyond the end of the blob will raise :exc:"
"`ValueError`."
msgstr ""

msgid "Return the current access position of the blob."
msgstr ""

msgid ""
"Set the current access position of the blob to *offset*.  The *origin* "
"argument defaults to :data:`os.SEEK_SET` (absolute blob positioning). Other "
"values for *origin* are :data:`os.SEEK_CUR` (seek relative to the current "
"position) and :data:`os.SEEK_END` (seek relative to the blob’s end)."
msgstr ""

msgid "PrepareProtocol objects"
msgstr ""

msgid ""
"The PrepareProtocol type's single purpose is to act as a :pep:`246` style "
"adaption protocol for objects that can :ref:`adapt themselves <sqlite3-"
"conform>` to :ref:`native SQLite types <sqlite3-types>`."
msgstr ""

msgid "Exceptions"
msgstr "Винятки"

msgid "The exception hierarchy is defined by the DB-API 2.0 (:pep:`249`)."
msgstr "Ієрархія винятків визначається DB-API 2.0 (:pep:`249`)."

msgid ""
"This exception is not currently raised by the :mod:`!sqlite3` module, but "
"may be raised by applications using :mod:`!sqlite3`, for example if a user-"
"defined function truncates data while inserting. ``Warning`` is a subclass "
"of :exc:`Exception`."
msgstr ""

msgid ""
"The base class of the other exceptions in this module. Use this to catch all "
"errors with one single :keyword:`except` statement. ``Error`` is a subclass "
"of :exc:`Exception`."
msgstr ""
"Базовий клас інших винятків у цьому модулі. Використовуйте це, щоб "
"перехопити всі помилки за допомогою одного оператора :keyword:`except`. "
"``Error`` є підкласом :exc:`Exception`."

msgid ""
"If the exception originated from within the SQLite library, the following "
"two attributes are added to the exception:"
msgstr ""

msgid ""
"The numeric error code from the `SQLite API <https://sqlite.org/rescode."
"html>`_"
msgstr ""

msgid ""
"The symbolic name of the numeric error code from the `SQLite API <https://"
"sqlite.org/rescode.html>`_"
msgstr ""

msgid ""
"Exception raised for misuse of the low-level SQLite C API. In other words, "
"if this exception is raised, it probably indicates a bug in the :mod:`!"
"sqlite3` module. ``InterfaceError`` is a subclass of :exc:`Error`."
msgstr ""

msgid ""
"Exception raised for errors that are related to the database. This serves as "
"the base exception for several types of database errors. It is only raised "
"implicitly through the specialised subclasses. ``DatabaseError`` is a "
"subclass of :exc:`Error`."
msgstr ""
"Виняток створено для помилок, пов’язаних із базою даних. Це служить базовим "
"винятком для кількох типів помилок бази даних. Він виникає лише неявно через "
"спеціалізовані підкласи. ``DatabaseError`` є підкласом :exc:`Error`."

msgid ""
"Exception raised for errors caused by problems with the processed data, like "
"numeric values out of range, and strings which are too long. ``DataError`` "
"is a subclass of :exc:`DatabaseError`."
msgstr ""
"Виняток створено для помилок, спричинених проблемами з обробленими даними, "
"як-от числові значення поза межами діапазону та надто довгі рядки. "
"``DataError`` є підкласом :exc:`DatabaseError`."

msgid ""
"Exception raised for errors that are related to the database's operation, "
"and not necessarily under the control of the programmer. For example, the "
"database path is not found, or a transaction could not be processed. "
"``OperationalError`` is a subclass of :exc:`DatabaseError`."
msgstr ""
"Виняток створено для помилок, які пов’язані з роботою бази даних і не "
"обов’язково знаходяться під контролем програміста. Наприклад, шлях до бази "
"даних не знайдено або транзакцію не вдалося обробити. ``OperationalError`` є "
"підкласом :exc:`DatabaseError`."

msgid ""
"Exception raised when the relational integrity of the database is affected, "
"e.g. a foreign key check fails.  It is a subclass of :exc:`DatabaseError`."
msgstr ""
"Виняток виникає, коли порушується реляційна цілісність бази даних, "
"наприклад. не вдається перевірити зовнішній ключ. Це підклас :exc:"
"`DatabaseError`."

msgid ""
"Exception raised when SQLite encounters an internal error. If this is "
"raised, it may indicate that there is a problem with the runtime SQLite "
"library. ``InternalError`` is a subclass of :exc:`DatabaseError`."
msgstr ""
"Виняток виникає, коли SQLite стикається з внутрішньою помилкою. Якщо це "
"виникає, це може означати, що існує проблема з бібліотекою SQLite під час "
"виконання. ``InternalError`` є підкласом :exc:`DatabaseError`."

msgid ""
"Exception raised for :mod:`!sqlite3` API programming errors, for example "
"supplying the wrong number of bindings to a query, or trying to operate on a "
"closed :class:`Connection`. ``ProgrammingError`` is a subclass of :exc:"
"`DatabaseError`."
msgstr ""

msgid ""
"Exception raised in case a method or database API is not supported by the "
"underlying SQLite library. For example, setting *deterministic* to ``True`` "
"in :meth:`~Connection.create_function`, if the underlying SQLite library "
"does not support deterministic functions. ``NotSupportedError`` is a "
"subclass of :exc:`DatabaseError`."
msgstr ""

msgid "SQLite and Python types"
msgstr "Типи SQLite і Python"

msgid ""
"SQLite natively supports the following types: ``NULL``, ``INTEGER``, "
"``REAL``, ``TEXT``, ``BLOB``."
msgstr ""
"SQLite спочатку підтримує такі типи: ``NULL``, ``INTEGER``, ``REAL``, "
"``TEXT``, ``BLOB``."

msgid ""
"The following Python types can thus be sent to SQLite without any problem:"
msgstr ""
"Таким чином, такі типи Python можна без будь-яких проблем надсилати до "
"SQLite:"

msgid "Python type"
msgstr "Тип Python"

msgid "SQLite type"
msgstr "Тип SQLite"

msgid "``None``"
msgstr "``Жодного``"

msgid "``NULL``"
msgstr "``NULL``"

msgid ":class:`int`"
msgstr ":class:`int`"

msgid "``INTEGER``"
msgstr "``ЦІЛЕ ЧИСЛО``"

msgid ":class:`float`"
msgstr ":class:`float`"

msgid "``REAL``"
msgstr "``РЕАЛЬНИЙ``"

msgid ":class:`str`"
msgstr ":class:`str`"

msgid "``TEXT``"
msgstr "``ТЕКСТ``"

msgid ":class:`bytes`"
msgstr ":class:`bytes`"

msgid "``BLOB``"
msgstr "``BLOB``"

msgid "This is how SQLite types are converted to Python types by default:"
msgstr "Ось як типи SQLite перетворюються на типи Python за замовчуванням:"

msgid "depends on :attr:`~Connection.text_factory`, :class:`str` by default"
msgstr ""
"залежить від :attr:`~Connection.text_factory`, :class:`str` за замовчуванням"

msgid ""
"The type system of the :mod:`!sqlite3` module is extensible in two ways: you "
"can store additional Python types in an SQLite database via :ref:`object "
"adapters <sqlite3-adapters>`, and you can let the :mod:`!sqlite3` module "
"convert SQLite types to Python types via :ref:`converters <sqlite3-"
"converters>`."
msgstr ""

msgid "Default adapters and converters"
msgstr "Стандартні адаптери та конвертери"

msgid ""
"There are default adapters for the date and datetime types in the datetime "
"module. They will be sent as ISO dates/ISO timestamps to SQLite."
msgstr ""
"У модулі datetime є стандартні адаптери для типів date і datetime. Вони "
"будуть надіслані як дати ISO/мітки часу ISO до SQLite."

msgid ""
"The default converters are registered under the name \"date\" for :class:"
"`datetime.date` and under the name \"timestamp\" for :class:`datetime."
"datetime`."
msgstr ""
"Перетворювачі за замовчуванням зареєстровані під назвою \"date\" для :class:"
"`datetime.date` і під назвою \"timestamp\" для :class:`datetime.datetime`."

msgid ""
"This way, you can use date/timestamps from Python without any additional "
"fiddling in most cases. The format of the adapters is also compatible with "
"the experimental SQLite date/time functions."
msgstr ""
"Таким чином, у більшості випадків ви можете використовувати мітки дати/часу "
"з Python без будь-яких додаткових маніпуляцій. Формат адаптерів також "
"сумісний з експериментальними функціями дати/часу SQLite."

msgid "The following example demonstrates this."
msgstr "Наступний приклад демонструє це."

msgid ""
"If a timestamp stored in SQLite has a fractional part longer than 6 numbers, "
"its value will be truncated to microsecond precision by the timestamp "
"converter."
msgstr ""
"Якщо мітка часу, що зберігається в SQLite, має дробову частину, яка "
"перевищує 6 чисел, її значення буде скорочено до мікросекундної точності "
"конвертером міток часу."

msgid ""
"The default \"timestamp\" converter ignores UTC offsets in the database and "
"always returns a naive :class:`datetime.datetime` object. To preserve UTC "
"offsets in timestamps, either leave converters disabled, or register an "
"offset-aware converter with :func:`register_converter`."
msgstr ""
"Конвертер \"міток часу\" за замовчуванням ігнорує зміщення UTC у базі даних "
"і завжди повертає простий об’єкт :class:`datetime.datetime`. Щоб зберегти "
"зміщення UTC у мітках часу, залиште конвертери вимкненими або зареєструйте "
"конвертер із зсувом за допомогою :func:`register_converter`."

msgid "How-to guides"
msgstr ""

msgid "How to use placeholders to bind values in SQL queries"
msgstr ""

msgid ""
"SQL operations usually need to use values from Python variables. However, "
"beware of using Python's string operations to assemble queries, as they are "
"vulnerable to `SQL injection attacks`_ (see the `xkcd webcomic <https://xkcd."
"com/327/>`_ for a humorous example of what can go wrong)::"
msgstr ""

msgid ""
"Instead, use the DB-API's parameter substitution. To insert a variable into "
"a query string, use a placeholder in the string, and substitute the actual "
"values into the query by providing them as a :class:`tuple` of values to the "
"second argument of the cursor's :meth:`~Cursor.execute` method. An SQL "
"statement may use one of two kinds of placeholders: question marks (qmark "
"style) or named placeholders (named style). For the qmark style, "
"``parameters`` must be a :term:`sequence <sequence>`. For the named style, "
"it can be either a :term:`sequence <sequence>` or :class:`dict` instance. "
"The length of the :term:`sequence <sequence>` must match the number of "
"placeholders, or a :exc:`ProgrammingError` is raised. If a :class:`dict` is "
"given, it must contain keys for all named parameters. Any extra items are "
"ignored. Here's an example of both styles:"
msgstr ""
"Замість цього використовуйте підстановку параметрів DB-API. Щоб вставити "
"змінну в рядок запиту, використовуйте заповнювач у рядку та підставте "
"фактичні значення в запит, надавши їх як :class:`tuple` значень у другому "
"аргументі :meth:`~курсора курсора .execute` метод. Інструкція SQL може "
"використовувати один із двох видів заповнювачів: знаки питання (стиль qmark) "
"або іменовані заповнювачі (іменований стиль). Для стилю qmark ``параметри`` "
"мають бути :term:`послідовністю <sequence>`. Для названого стилю це може "
"бути екземпляр :term:`sequence <sequence>` або :class:`dict`. Довжина :term:"
"`послідовності <sequence>` має збігатися з кількістю заповнювачів, інакше "
"виникне :exc:`ProgrammingError`. Якщо вказано :class:`dict`, він повинен "
"містити ключі для всіх названих параметрів. Будь-які додаткові елементи "
"ігноруються. Ось приклад обох стилів:"

msgid "How to adapt custom Python types to SQLite values"
msgstr ""

msgid ""
"SQLite supports only a limited set of data types natively. To store custom "
"Python types in SQLite databases, *adapt* them to one of the :ref:`Python "
"types SQLite natively understands <sqlite3-types>`."
msgstr ""

msgid ""
"There are two ways to adapt Python objects to SQLite types: letting your "
"object adapt itself, or using an *adapter callable*. The latter will take "
"precedence above the former. For a library that exports a custom type, it "
"may make sense to enable that type to adapt itself. As an application "
"developer, it may make more sense to take direct control by registering "
"custom adapter functions."
msgstr ""

msgid "How to write adaptable objects"
msgstr ""

msgid ""
"Suppose we have a :class:`!Point` class that represents a pair of "
"coordinates, ``x`` and ``y``, in a Cartesian coordinate system. The "
"coordinate pair will be stored as a text string in the database, using a "
"semicolon to separate the coordinates. This can be implemented by adding a "
"``__conform__(self, protocol)`` method which returns the adapted value. The "
"object passed to *protocol* will be of type :class:`PrepareProtocol`."
msgstr ""

msgid "How to register adapter callables"
msgstr ""

msgid ""
"The other possibility is to create a function that converts the Python "
"object to an SQLite-compatible type. This function can then be registered "
"using :func:`register_adapter`."
msgstr ""

msgid "How to convert SQLite values to custom Python types"
msgstr ""

msgid ""
"Writing an adapter lets you convert *from* custom Python types *to* SQLite "
"values. To be able to convert *from* SQLite values *to* custom Python types, "
"we use *converters*."
msgstr ""

msgid ""
"Let's go back to the :class:`!Point` class. We stored the x and y "
"coordinates separated via semicolons as strings in SQLite."
msgstr ""

msgid ""
"First, we'll define a converter function that accepts the string as a "
"parameter and constructs a :class:`!Point` object from it."
msgstr ""

msgid ""
"Converter functions are **always** passed a :class:`bytes` object, no matter "
"the underlying SQLite data type."
msgstr ""

msgid ""
"We now need to tell :mod:`!sqlite3` when it should convert a given SQLite "
"value. This is done when connecting to a database, using the *detect_types* "
"parameter of :func:`connect`. There are three options:"
msgstr ""

msgid "Implicit: set *detect_types* to :const:`PARSE_DECLTYPES`"
msgstr ""

msgid "Explicit: set *detect_types* to :const:`PARSE_COLNAMES`"
msgstr ""

msgid ""
"Both: set *detect_types* to ``sqlite3.PARSE_DECLTYPES | sqlite3."
"PARSE_COLNAMES``. Column names take precedence over declared types."
msgstr ""

msgid "The following example illustrates the implicit and explicit approaches:"
msgstr ""

msgid "Adapter and converter recipes"
msgstr ""

msgid "This section shows recipes for common adapters and converters."
msgstr ""

msgid "How to use connection shortcut methods"
msgstr ""

msgid ""
"Using the :meth:`~Connection.execute`, :meth:`~Connection.executemany`, and :"
"meth:`~Connection.executescript` methods of the :class:`Connection` class, "
"your code can be written more concisely because you don't have to create the "
"(often superfluous) :class:`Cursor` objects explicitly. Instead, the :class:"
"`Cursor` objects are created implicitly and these shortcut methods return "
"the cursor objects. This way, you can execute a ``SELECT`` statement and "
"iterate over it directly using only a single call on the :class:`Connection` "
"object."
msgstr ""

msgid "How to use the connection context manager"
msgstr ""

msgid ""
"A :class:`Connection` object can be used as a context manager that "
"automatically commits or rolls back open transactions when leaving the body "
"of the context manager. If the body of the :keyword:`with` statement "
"finishes without exceptions, the transaction is committed. If this commit "
"fails, or if the body of the ``with`` statement raises an uncaught "
"exception, the transaction is rolled back."
msgstr ""

msgid ""
"If there is no open transaction upon leaving the body of the ``with`` "
"statement, the context manager is a no-op."
msgstr ""

msgid ""
"The context manager neither implicitly opens a new transaction nor closes "
"the connection."
msgstr ""

msgid "How to work with SQLite URIs"
msgstr ""

msgid "Some useful URI tricks include:"
msgstr ""

msgid "Open a database in read-only mode:"
msgstr ""

msgid ""
"Do not implicitly create a new database file if it does not already exist; "
"will raise :exc:`~sqlite3.OperationalError` if unable to create a new file:"
msgstr ""

msgid "Create a shared named in-memory database:"
msgstr ""

msgid ""
"More information about this feature, including a list of parameters, can be "
"found in the `SQLite URI documentation`_."
msgstr ""

msgid "Explanation"
msgstr "Пояснення"

msgid "Transaction control"
msgstr ""

msgid ""
"The :mod:`!sqlite3` module does not adhere to the transaction handling "
"recommended by :pep:`249`."
msgstr ""

msgid ""
"If the connection attribute :attr:`~Connection.isolation_level` is not "
"``None``, new transactions are implicitly opened before :meth:`~Cursor."
"execute` and :meth:`~Cursor.executemany` executes ``INSERT``, ``UPDATE``, "
"``DELETE``, or ``REPLACE`` statements; for other statements, no implicit "
"transaction handling is performed. Use the :meth:`~Connection.commit` and :"
"meth:`~Connection.rollback` methods to respectively commit and roll back "
"pending transactions. You can choose the underlying `SQLite transaction "
"behaviour`_ — that is, whether and what type of ``BEGIN`` statements :mod:`!"
"sqlite3` implicitly executes – via the :attr:`~Connection.isolation_level` "
"attribute."
msgstr ""

msgid ""
"If :attr:`~Connection.isolation_level` is set to ``None``, no transactions "
"are implicitly opened at all. This leaves the underlying SQLite library in "
"`autocommit mode`_, but also allows the user to perform their own "
"transaction handling using explicit SQL statements. The underlying SQLite "
"library autocommit mode can be queried using the :attr:`~Connection."
"in_transaction` attribute."
msgstr ""

msgid ""
"The :meth:`~Cursor.executescript` method implicitly commits any pending "
"transaction before execution of the given SQL script, regardless of the "
"value of :attr:`~Connection.isolation_level`."
msgstr ""

msgid ""
":mod:`!sqlite3` used to implicitly commit an open transaction before DDL "
"statements.  This is no longer the case."
msgstr ""
