# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Dmytro Kazanzhy, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-29 17:18+0300\n"
"PO-Revision-Date: 2022-07-05 15:39+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://www.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

msgid "Using :mod:`!importlib.metadata`"
msgstr "Використання :mod:`!importlib.metadata`"

msgid "``importlib.metadata`` is no longer provisional."
msgstr "``importlib.metadata`` більше не є тимчасовим."

msgid "**Source code:** :source:`Lib/importlib/metadata/__init__.py`"
msgstr "**Вихідний код:** :source:`Lib/importlib/metadata/__init__.py`"

msgid ""
"``importlib.metadata`` is a library that provides for access to installed "
"package metadata.  Built in part on Python's import system, this library "
"intends to replace similar functionality in the `entry point API`_ and "
"`metadata API`_ of ``pkg_resources``.  Along with :mod:`importlib.resources` "
"(with new features backported to the `importlib_resources`_ package), this "
"can eliminate the need to use the older and less efficient ``pkg_resources`` "
"package."
msgstr ""
"``importlib.metadata`` — це бібліотека, яка надає доступ до встановлених "
"метаданих пакетів. Частково створена на основі системи імпорту Python, ця "
"бібліотека має намір замінити подібні функції в `entry point API`_ та "
"`metadata API`_ ``pkg_resources``. Разом із :mod:`importlib.resources` (з "
"новими функціями, портованими до пакета `importlib_resources`_), це може "
"усунути потребу у використанні старішого та менш ефективного пакета "
"``pkg_resources``."

msgid ""
"By \"installed package\" we generally mean a third-party package installed "
"into Python's ``site-packages`` directory via tools such as `pip <https://"
"pypi.org/project/pip/>`_.  Specifically, it means a package with either a "
"discoverable ``dist-info`` or ``egg-info`` directory, and metadata defined "
"by :pep:`566` or its older specifications. By default, package metadata can "
"live on the file system or in zip archives on :data:`sys.path`.  Through an "
"extension mechanism, the metadata can live almost anywhere."
msgstr ""
"Під \"встановленим пакетом\" ми зазвичай маємо на увазі пакет третьої "
"сторони, встановлений у каталозі ``site-packages`` Python за допомогою таких "
"інструментів, як `pip <https://pypi.org/project/pip/>`_. Зокрема, це означає "
"пакунок із відкритим каталогом ``dist-info`` або ``egg-info`` і метаданими, "
"визначеними :pep:`566` або його старішими специфікаціями. За замовчуванням "
"метадані пакета можуть зберігатися у файловій системі або в zip-архівах на :"
"data:`sys.path`. Завдяки механізму розширення метадані можуть зберігатися "
"майже будь-де."

msgid "Overview"
msgstr "Огляд"

msgid ""
"Let's say you wanted to get the version string for a package you've "
"installed using ``pip``.  We start by creating a virtual environment and "
"installing something into it:"
msgstr ""
"Припустімо, ви хочете отримати рядок версії для пакета, який ви встановили "
"за допомогою ``pip``. Ми починаємо зі створення віртуального середовища та "
"інсталяції в нього чогось:"

msgid "You can get the version string for ``wheel`` by running the following:"
msgstr "Ви можете отримати рядок версії для ``wheel``, виконавши наступне:"

msgid ""
"You can also get the set of entry points keyed by group, such as "
"``console_scripts``, ``distutils.commands`` and others.  Each group contains "
"a sequence of :ref:`EntryPoint <entry-points>` objects."
msgstr ""
"Ви також можете отримати набір точок входу з ключем групи, наприклад "
"``console_scripts``, ``distutils.commands`` та інші. Кожна група містить "
"послідовність об’єктів :ref:`EntryPoint <entry-points>`."

msgid "You can get the :ref:`metadata for a distribution <metadata>`::"
msgstr "Ви можете отримати :ref:`метадані для дистрибутива <metadata>`::"

msgid ""
"You can also get a :ref:`distribution's version number <version>`, list its :"
"ref:`constituent files <files>`, and get a list of the distribution's :ref:"
"`requirements`."
msgstr ""
"Ви також можете отримати :ref:`номер версії дистрибутива <version>`, "
"перелічити його :ref:`складові файли <files>` та отримати список :ref:"
"`requirements` дистрибутива."

msgid "Functional API"
msgstr "Функціональний API"

msgid "This package provides the following functionality via its public API."
msgstr "Цей пакет забезпечує такі функції через свій загальнодоступний API."

msgid "Entry points"
msgstr "Точки входу"

msgid ""
"The ``entry_points()`` function returns a collection of entry points. Entry "
"points are represented by ``EntryPoint`` instances; each ``EntryPoint`` has "
"a ``.name``, ``.group``, and ``.value`` attributes and a ``.load()`` method "
"to resolve the value.  There are also ``.module``, ``.attr``, and ``."
"extras`` attributes for getting the components of the ``.value`` attribute."
msgstr ""
"Функція ``entry_points()`` повертає набір точок входу. Точки входу "
"представлені екземплярами ``EntryPoint``; кожен ``EntryPoint`` має атрибути "
"``.name``, ``.group`` і ``.value``, а також метод ``.load()`` для визначення "
"значення. Існують також атрибути ``.module``, ``.attr`` і ``.extras`` для "
"отримання компонентів атрибута ``.value``."

msgid "Query all entry points::"
msgstr "Запитувати всі точки входу::"

msgid ""
"The ``entry_points()`` function returns an ``EntryPoints`` object, a "
"sequence of all ``EntryPoint`` objects with ``names`` and ``groups`` "
"attributes for convenience::"
msgstr ""
"Функція ``entry_points()`` повертає об’єкт ``EntryPoints``, послідовність "
"усіх об’єктів ``EntryPoint`` з атрибутами ``names`` і ``groups`` для "
"зручності::"

msgid ""
"``EntryPoints`` has a ``select`` method to select entry points matching "
"specific properties. Select entry points in the ``console_scripts`` group::"
msgstr ""
"``EntryPoints`` має метод ``select`` для вибору точок входу, які "
"відповідають певним властивостям. Виберіть точки входу в групі "
"``console_scripts``::"

msgid ""
"Equivalently, since ``entry_points`` passes keyword arguments through to "
"select::"
msgstr ""
"Так само, оскільки ``entry_points`` передає ключові аргументи для вибору::"

msgid ""
"Pick out a specific script named \"wheel\" (found in the wheel project)::"
msgstr ""
"Виберіть певний сценарій під назвою \"колесо\" (знаходиться в проекті "
"колеса):"

msgid "Equivalently, query for that entry point during selection::"
msgstr "Аналогічно, запитайте цю точку входу під час вибору:"

msgid "Inspect the resolved entry point::"
msgstr "Огляньте вирішену точку входу::"

msgid ""
"The ``group`` and ``name`` are arbitrary values defined by the package "
"author and usually a client will wish to resolve all entry points for a "
"particular group.  Read `the setuptools docs <https://setuptools.pypa.io/en/"
"latest/userguide/entry_point.html>`_ for more information on entry points, "
"their definition, and usage."
msgstr ""
"``group`` і ``name`` є довільними значеннями, визначеними автором пакету, і "
"зазвичай клієнт бажає вирішити всі точки входу для певної групи. Прочитайте "
"`документи setuptools <https://setuptools.pypa.io/en/latest/userguide/"
"entry_point.html>`_, щоб дізнатися більше про точки входу, їх визначення та "
"використання."

msgid "*Compatibility Note*"
msgstr "*Примітка щодо сумісності*"

msgid ""
"The \"selectable\" entry points were introduced in ``importlib_metadata`` "
"3.6 and Python 3.10. Prior to those changes, ``entry_points`` accepted no "
"parameters and always returned a dictionary of entry points, keyed by group. "
"For compatibility, if no parameters are passed to entry_points, a "
"``SelectableGroups`` object is returned, implementing that dict interface. "
"In the future, calling ``entry_points`` with no parameters will return an "
"``EntryPoints`` object. Users should rely on the selection interface to "
"retrieve entry points by group."
msgstr ""
"Точки входу, які можна вибрати, були представлені в ``importlib_metadata`` "
"3.6 і Python 3.10. До цих змін ``entry_points`` не приймав жодних параметрів "
"і завжди повертав словник точок входу з ключем групи. Для сумісності, якщо "
"параметри не передані до entry_points, повертається об’єкт "
"``SelectableGroups``, який реалізує цей інтерфейс dict. У майбутньому виклик "
"``entry_points`` без параметрів повертатиме об’єкт ``EntryPoints``. "
"Користувачам слід покладатися на інтерфейс вибору для отримання точок входу "
"за групою."

msgid "Distribution metadata"
msgstr "Метадані розповсюдження"

msgid ""
"Every distribution includes some metadata, which you can extract using the "
"``metadata()`` function::"
msgstr ""
"Кожен дистрибутив містить деякі метадані, які ви можете отримати за "
"допомогою функції ``metadata()``:"

msgid ""
"The keys of the returned data structure, a ``PackageMetadata``, name the "
"metadata keywords, and the values are returned unparsed from the "
"distribution metadata::"
msgstr ""
"Ключі повернутої структури даних, ``PackageMetadata``, іменують ключові "
"слова метаданих, і значення повертаються без аналізу з метаданих розподілу::"

msgid ""
"``PackageMetadata`` also presents a ``json`` attribute that returns all the "
"metadata in a JSON-compatible form per :PEP:`566`::"
msgstr ""
"``PackageMetadata`` також представляє атрибут ``json``, який повертає всі "
"метадані у JSON-сумісній формі відповідно до :PEP:`566`::"

msgid ""
"The ``Description`` is now included in the metadata when presented through "
"the payload. Line continuation characters have been removed."
msgstr ""
"``Опис`` тепер включено в метадані, коли представлено через корисне "
"навантаження. Символи продовження рядка видалено."

msgid "The ``json`` attribute was added."
msgstr "Додано атрибут ``json``."

msgid "Distribution versions"
msgstr "Версії розповсюдження"

msgid ""
"The ``version()`` function is the quickest way to get a distribution's "
"version number, as a string::"
msgstr ""
"Функція ``version()`` — це найшвидший спосіб отримати номер версії "
"дистрибутива у вигляді рядка::"

msgid "Distribution files"
msgstr "Файли розповсюдження"

msgid ""
"You can also get the full set of files contained within a distribution.  The "
"``files()`` function takes a distribution package name and returns all of "
"the files installed by this distribution.  Each file object returned is a "
"``PackagePath``, a :class:`pathlib.PurePath` derived object with additional "
"``dist``, ``size``, and ``hash`` properties as indicated by the metadata.  "
"For example::"
msgstr ""
"Ви також можете отримати повний набір файлів, які містяться в дистрибутиві. "
"Функція ``files()`` приймає назву пакета дистрибутива та повертає всі файли, "
"встановлені цим дистрибутивом. Кожен повернутий файловий об’єкт є "
"``PackagePath``, похідним об’єктом :class:`pathlib.PurePath` з додатковими "
"властивостями ``dist``, ``size`` і ``hash``, як зазначено в метаданих. "
"Наприклад::"

msgid "Once you have the file, you can also read its contents::"
msgstr "Отримавши файл, ви також можете прочитати його вміст:"

msgid ""
"You can also use the ``locate`` method to get a the absolute path to the "
"file::"
msgstr ""
"Ви також можете використовувати метод ``locate``, щоб отримати абсолютний "
"шлях до файлу::"

msgid ""
"In the case where the metadata file listing files (RECORD or SOURCES.txt) is "
"missing, ``files()`` will return ``None``. The caller may wish to wrap calls "
"to ``files()`` in `always_iterable <https://more-itertools.readthedocs.io/en/"
"stable/api.html#more_itertools.always_iterable>`_ or otherwise guard against "
"this condition if the target distribution is not known to have the metadata "
"present."
msgstr ""
"У випадку, якщо файл метаданих зі списком файлів (RECORD або SOURCES.txt) "
"відсутній, ``files()`` поверне ``None``. Виклик може забажати обернути "
"виклики ``files()`` в `always_iterable <https://more-itertools.readthedocs."
"io/en/stable/api.html#more_itertools.always_iterable>`_ або іншим чином "
"захиститися від цієї умови, якщо відомо, що цільовий розподіл не містить "
"метаданих."

msgid "Distribution requirements"
msgstr "Вимоги до розповсюдження"

msgid ""
"To get the full set of requirements for a distribution, use the "
"``requires()`` function::"
msgstr ""
"Щоб отримати повний набір вимог до дистрибутива, скористайтеся функцією "
"``requires()``::"

msgid "Package distributions"
msgstr "Пакетні розповсюдження"

msgid ""
"A convenience method to resolve the distribution or distributions (in the "
"case of a namespace package) for top-level Python packages or modules::"
msgstr ""
"Зручний метод вирішення дистрибутива або дистрибутивів (у випадку пакета "
"простору імен) для пакетів або модулів Python верхнього рівня::"

msgid "Distributions"
msgstr "Розподіл"

msgid ""
"While the above API is the most common and convenient usage, you can get all "
"of that information from the ``Distribution`` class.  A ``Distribution`` is "
"an abstract object that represents the metadata for a Python package.  You "
"can get the ``Distribution`` instance::"
msgstr ""
"Хоча наведений вище API є найбільш поширеним і зручним використанням, ви "
"можете отримати всю цю інформацію з класу ``Distribution``. ``Distribution`` "
"— це абстрактний об’єкт, який представляє метадані для пакета Python. Ви "
"можете отримати екземпляр ``Distribution``::"

msgid ""
"Thus, an alternative way to get the version number is through the "
"``Distribution`` instance::"
msgstr ""
"Таким чином, альтернативним способом отримання номера версії є екземпляр "
"``Distribution``::"

msgid ""
"There are all kinds of additional metadata available on the ``Distribution`` "
"instance::"
msgstr "У екземплярі ``Distribution`` є всі види додаткових метаданих:"

msgid ""
"The full set of available metadata is not described here.  See :pep:`566` "
"for additional details."
msgstr ""
"Повний набір доступних метаданих тут не описаний. Перегляньте :pep:`566` для "
"отримання додаткової інформації."

msgid "Extending the search algorithm"
msgstr "Розширення алгоритму пошуку"

msgid ""
"Because package metadata is not available through :data:`sys.path` searches, "
"or package loaders directly, the metadata for a package is found through "
"import system :ref:`finders <finders-and-loaders>`.  To find a distribution "
"package's metadata, ``importlib.metadata`` queries the list of :term:`meta "
"path finders <meta path finder>` on :data:`sys.meta_path`."
msgstr ""
"Оскільки метадані пакета недоступні за допомогою пошуку :data:`sys.path` або "
"напряму завантажувачів пакетів, метадані для пакета можна знайти через "
"систему імпорту :ref:`finders <finders-and-loaders>`. Щоб знайти метадані "
"дистрибутивного пакета, ``importlib.metadata`` запитує список :term:`мета-"
"шляхів пошуку <meta path finder>` на :data:`sys.meta_path`."

msgid ""
"The default ``PathFinder`` for Python includes a hook that calls into "
"``importlib.metadata.MetadataPathFinder`` for finding distributions loaded "
"from typical file-system-based paths."
msgstr ""
"Типовий ``PathFinder`` для Python включає хук, який викликає ``importlib."
"metadata.MetadataPathFinder`` для пошуку дистрибутивів, завантажених із "
"типових шляхів на основі файлової системи."

msgid ""
"The abstract class :py:class:`importlib.abc.MetaPathFinder` defines the "
"interface expected of finders by Python's import system. ``importlib."
"metadata`` extends this protocol by looking for an optional "
"``find_distributions`` callable on the finders from :data:`sys.meta_path` "
"and presents this extended interface as the ``DistributionFinder`` abstract "
"base class, which defines this abstract method::"
msgstr ""
"Абстрактний клас :py:class:`importlib.abc.MetaPathFinder` визначає "
"інтерфейс, очікуваний від шукачів системою імпорту Python. ``importlib."
"metadata`` розширює цей протокол, шукаючи необов’язковий "
"``find_distributions``, викликаний у шукачах з :data:`sys.meta_path`, і "
"представляє цей розширений інтерфейс як ``DistributionFinder`` абстрактний "
"базовий клас, який визначає цей абстрактний метод::"

msgid ""
"The ``DistributionFinder.Context`` object provides ``.path`` and ``.name`` "
"properties indicating the path to search and name to match and may supply "
"other relevant context."
msgstr ""
"Об’єкт ``DistributionFinder.Context`` надає властивості ``.path`` і ``."
"name``, що вказують шлях для пошуку та ім’я, яке відповідає, і може надати "
"інший відповідний контекст."

msgid ""
"What this means in practice is that to support finding distribution package "
"metadata in locations other than the file system, subclass ``Distribution`` "
"and implement the abstract methods. Then from a custom finder, return "
"instances of this derived ``Distribution`` in the ``find_distributions()`` "
"method."
msgstr ""
"На практиці це означає, що для підтримки пошуку метаданих пакетів "
"дистрибутива в місцях, відмінних від файлової системи, створіть підклас "
"``Distribution`` і реалізуйте абстрактні методи. Потім із спеціального "
"засобу пошуку поверніть екземпляри цього похідного ``Distribution`` у методі "
"``find_distributions()``."
