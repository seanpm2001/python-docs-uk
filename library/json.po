# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Dmytro Kazanzhy, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-12 16:28+0000\n"
"PO-Revision-Date: 2021-06-28 01:08+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://www.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

msgid ":mod:`json` --- JSON encoder and decoder"
msgstr ":mod:`json` --- Кодувальник і декодер JSON"

msgid "**Source code:** :source:`Lib/json/__init__.py`"
msgstr "**Вихідний код:** :source:`Lib/json/__init__.py`"

msgid ""
"`JSON (JavaScript Object Notation) <https://json.org>`_, specified by :rfc:"
"`7159` (which obsoletes :rfc:`4627`) and by `ECMA-404 <https://www.ecma-"
"international.org/publications-and-standards/standards/ecma-404/>`_, is a "
"lightweight data interchange format inspired by `JavaScript <https://en."
"wikipedia.org/wiki/JavaScript>`_ object literal syntax (although it is not a "
"strict subset of JavaScript [#rfc-errata]_ )."
msgstr ""
"`JSON (JavaScript Object Notation) <https://json.org>`_, визначений :rfc:"
"`7159` (який є застарілим :rfc:`4627`) і `ECMA-404 <https://www.ecma-"
"international.org/publications-and-standards/standards/ecma-404/>`_, є "
"полегшеним форматом обміну даними, натхненним `JavaScript <https://en."
"wikipedia.org/wiki/JavaScript>`_ синтаксис об’єктного літералу (хоча цене "
"сувора підмножина JavaScript [#rfc-errata]_)."

msgid ""
"Be cautious when parsing JSON data from untrusted sources. A malicious JSON "
"string may cause the decoder to consume considerable CPU and memory "
"resources. Limiting the size of data to be parsed is recommended."
msgstr ""

msgid ""
":mod:`json` exposes an API familiar to users of the standard library :mod:"
"`marshal` and :mod:`pickle` modules."
msgstr ""
":mod:`json` надає API, знайомий користувачам модулів стандартної бібліотеки :"
"mod:`marshal` і :mod:`pickle`."

msgid "Encoding basic Python object hierarchies::"
msgstr "Кодування основних ієрархій об’єктів Python::"

msgid "Compact encoding::"
msgstr "Компактне кодування::"

msgid "Pretty printing::"
msgstr "Гарний друк::"

msgid "Decoding JSON::"
msgstr "Декодування JSON::"

msgid "Specializing JSON object decoding::"
msgstr "Спеціалізоване декодування об'єктів JSON::"

msgid "Extending :class:`JSONEncoder`::"
msgstr "Розширення :class:`JSONEncoder`::"

msgid "Using :mod:`json.tool` from the shell to validate and pretty-print:"
msgstr ""
"Використання :mod:`json.tool` з оболонки для перевірки та красивого друку:"

msgid "See :ref:`json-commandline` for detailed documentation."
msgstr "Перегляньте :ref:`json-commandline` для детальної документації."

msgid ""
"JSON is a subset of `YAML <https://yaml.org/>`_ 1.2.  The JSON produced by "
"this module's default settings (in particular, the default *separators* "
"value) is also a subset of YAML 1.0 and 1.1.  This module can thus also be "
"used as a YAML serializer."
msgstr ""

msgid ""
"This module's encoders and decoders preserve input and output order by "
"default.  Order is only lost if the underlying containers are unordered."
msgstr ""
"Кодери та декодери цього модуля зберігають порядок введення та виведення за "
"замовчуванням. Порядок втрачається, лише якщо базові контейнери не "
"впорядковані."

msgid "Basic Usage"
msgstr "Основне використання"

msgid ""
"Serialize *obj* as a JSON formatted stream to *fp* (a ``.write()``-"
"supporting :term:`file-like object`) using this :ref:`conversion table <py-"
"to-json-table>`."
msgstr ""
"Серіалізуйте *obj* як потік у форматі JSON у *fp* (``.write()``-"
"підтримуючий :term:`file-like object`), використовуючи цю :ref:`таблицю "
"перетворення <py-to-json-table>`."

msgid ""
"If *skipkeys* is true (default: ``False``), then dict keys that are not of a "
"basic type (:class:`str`, :class:`int`, :class:`float`, :class:`bool`, "
"``None``) will be skipped instead of raising a :exc:`TypeError`."
msgstr ""
"Якщо *skipkeys* має значення true (за замовчуванням: ``False``), тоді ключі "
"dict не мають базового типу (:class:`str`, :class:`int`, :class:`float`, :"
"class:`bool`, ``None``) буде пропущено замість виклику :exc:`TypeError`."

msgid ""
"The :mod:`json` module always produces :class:`str` objects, not :class:"
"`bytes` objects. Therefore, ``fp.write()`` must support :class:`str` input."
msgstr ""
"Модуль :mod:`json` завжди створює об’єкти :class:`str`, а не об’єкти :class:"
"`bytes`. Тому ``fp.write()`` має підтримувати введення :class:`str`."

msgid ""
"If *ensure_ascii* is true (the default), the output is guaranteed to have "
"all incoming non-ASCII characters escaped.  If *ensure_ascii* is false, "
"these characters will be output as-is."
msgstr ""
"Якщо *ensure_ascii* має значення true (за замовчуванням), вивід гарантовано "
"матиме екранування всіх вхідних символів, які не є ASCII. Якщо "
"*ensure_ascii* має значення false, ці символи виводитимуться як є."

msgid ""
"If *check_circular* is false (default: ``True``), then the circular "
"reference check for container types will be skipped and a circular reference "
"will result in a :exc:`RecursionError` (or worse)."
msgstr ""

msgid ""
"If *allow_nan* is false (default: ``True``), then it will be a :exc:"
"`ValueError` to serialize out of range :class:`float` values (``nan``, "
"``inf``, ``-inf``) in strict compliance of the JSON specification. If "
"*allow_nan* is true, their JavaScript equivalents (``NaN``, ``Infinity``, ``-"
"Infinity``) will be used."
msgstr ""
"Якщо *allow_nan* має значення false (за замовчуванням: ``True``), то це "
"буде :exc:`ValueError` для серіалізації значень поза діапазоном :class:"
"`float` (``nan``, ``inf``, ``-inf``) у суворій відповідності до специфікації "
"JSON. Якщо *allow_nan* має значення true, будуть використані їхні "
"еквіваленти JavaScript (``NaN``, ``Infinity``, ``-Infinity``)."

msgid ""
"If *indent* is a non-negative integer or string, then JSON array elements "
"and object members will be pretty-printed with that indent level.  An indent "
"level of 0, negative, or ``\"\"`` will only insert newlines.  ``None`` (the "
"default) selects the most compact representation. Using a positive integer "
"indent indents that many spaces per level.  If *indent* is a string (such as "
"``\"\\t\"``), that string is used to indent each level."
msgstr ""
"Якщо *indent* є невід’ємним цілим числом або рядком, елементи масиву JSON і "
"члени об’єкта будуть надруковані з таким рівнем відступу. Рівень відступу 0, "
"негативний або ``\"\"`` вставлятиме лише нові рядки. ``None`` (за "
"замовчуванням) вибирає найбільш компактне представлення. Використання "
"додатного цілого відступу робить стільки відступів на рівень. Якщо *indent* "
"є рядком (наприклад, ``\"\\t\"``), цей рядок використовується для відступу "
"кожного рівня."

msgid "Allow strings for *indent* in addition to integers."
msgstr "Дозволити рядки для *відступу* на додаток до цілих чисел."

msgid ""
"If specified, *separators* should be an ``(item_separator, key_separator)`` "
"tuple.  The default is ``(', ', ': ')`` if *indent* is ``None`` and ``(',', "
"': ')`` otherwise.  To get the most compact JSON representation, you should "
"specify ``(',', ':')`` to eliminate whitespace."
msgstr ""
"Якщо вказано, *роздільники* мають бути кортежем ``(item_separator, "
"key_separator)``. Типовим значенням є ``(', ', ': ')``, якщо *indent* має "
"значення ``None``, і ``(',', ': ')`` в іншому випадку. Щоб отримати найбільш "
"компактне представлення JSON, ви повинні вказати ``(',', ':')``, щоб усунути "
"пробіли."

msgid "Use ``(',', ': ')`` as default if *indent* is not ``None``."
msgstr ""
"Використовуйте ``(',', ': ')`` за умовчанням, якщо *indent* не є ``None``."

msgid ""
"If specified, *default* should be a function that gets called for objects "
"that can't otherwise be serialized.  It should return a JSON encodable "
"version of the object or raise a :exc:`TypeError`.  If not specified, :exc:"
"`TypeError` is raised."
msgstr ""
"Якщо вказано, *default* має бути функцією, яка викликається для об’єктів, "
"які не можуть бути серіалізовані інакше. Він має повертати кодовану JSON "
"версію об’єкта або викликати :exc:`TypeError`. Якщо не вказано, виникає :exc:"
"`TypeError`."

msgid ""
"If *sort_keys* is true (default: ``False``), then the output of dictionaries "
"will be sorted by key."
msgstr ""
"Якщо *sort_keys* має значення true (за замовчуванням: ``False``), тоді "
"вихідні дані словників будуть відсортовані за ключем."

msgid ""
"To use a custom :class:`JSONEncoder` subclass (e.g. one that overrides the :"
"meth:`default` method to serialize additional types), specify it with the "
"*cls* kwarg; otherwise :class:`JSONEncoder` is used."
msgstr ""
"Щоб використовувати спеціальний підклас :class:`JSONEncoder` (наприклад, "
"такий, який замінює метод :meth:`default` для серіалізації додаткових "
"типів), укажіть його за допомогою *cls* kwarg; інакше використовується :"
"class:`JSONEncoder`."

msgid ""
"All optional parameters are now :ref:`keyword-only <keyword-only_parameter>`."
msgstr ""
"Усі додаткові параметри тепер :ref:`лише для ключових слів <keyword-"
"only_parameter>`."

msgid ""
"Unlike :mod:`pickle` and :mod:`marshal`, JSON is not a framed protocol, so "
"trying to serialize multiple objects with repeated calls to :func:`dump` "
"using the same *fp* will result in an invalid JSON file."
msgstr ""
"На відміну від :mod:`pickle` і :mod:`marshal`, JSON не є фреймованим "
"протоколом, тому спроба серіалізувати кілька об’єктів за допомогою повторних "
"викликів :func:`dump` з використанням того самого *fp* призведе до "
"недійсного JSON файл."

msgid ""
"Serialize *obj* to a JSON formatted :class:`str` using this :ref:`conversion "
"table <py-to-json-table>`.  The arguments have the same meaning as in :func:"
"`dump`."
msgstr ""
"Серіалізуйте *obj* у JSON у форматі :class:`str` за допомогою цієї :ref:"
"`таблиці перетворення <py-to-json-table>`. Аргументи мають те саме значення, "
"що й у :func:`dump`."

msgid ""
"Keys in key/value pairs of JSON are always of the type :class:`str`. When a "
"dictionary is converted into JSON, all the keys of the dictionary are "
"coerced to strings. As a result of this, if a dictionary is converted into "
"JSON and then back into a dictionary, the dictionary may not equal the "
"original one. That is, ``loads(dumps(x)) != x`` if x has non-string keys."
msgstr ""
"Ключі в парах ключ/значення JSON завжди мають тип :class:`str`. Коли словник "
"перетворюється на JSON, усі ключі словника перетворюються на рядки. У "
"результаті цього, якщо словник перетворюється на JSON, а потім знову на "
"словник, словник може не відповідати оригінальному. Тобто ``loads(dumps(x)) !"
"= x``, якщо x має нерядкові ключі."

msgid ""
"Deserialize *fp* (a ``.read()``-supporting :term:`text file` or :term:"
"`binary file` containing a JSON document) to a Python object using this :ref:"
"`conversion table <json-to-py-table>`."
msgstr ""
"Десеріалізуйте *fp* (:term:`text file` із підтримкою ``.read()`` або :term:"
"`binary file`, що містить документ JSON) в об’єкт Python за допомогою цієї :"
"ref:`таблиці перетворення <json-to-py-table>` ."

msgid ""
"*object_hook* is an optional function that will be called with the result of "
"any object literal decoded (a :class:`dict`).  The return value of "
"*object_hook* will be used instead of the :class:`dict`.  This feature can "
"be used to implement custom decoders (e.g. `JSON-RPC <https://www.jsonrpc."
"org>`_ class hinting)."
msgstr ""

msgid ""
"*object_pairs_hook* is an optional function that will be called with the "
"result of any object literal decoded with an ordered list of pairs.  The "
"return value of *object_pairs_hook* will be used instead of the :class:"
"`dict`.  This feature can be used to implement custom decoders. If "
"*object_hook* is also defined, the *object_pairs_hook* takes priority."
msgstr ""
"*object_pairs_hook* — це необов’язкова функція, яка буде викликана з "
"результатом будь-якого об’єктного літералу, декодованого за допомогою "
"впорядкованого списку пар. Повернене значення *object_pairs_hook* "
"використовуватиметься замість :class:`dict`. Ця функція може бути "
"використана для реалізації спеціальних декодерів. Якщо *object_hook* також "
"визначено, *object_pairs_hook* має пріоритет."

msgid "Added support for *object_pairs_hook*."
msgstr "Додано підтримку *object_pairs_hook*."

msgid ""
"*parse_float*, if specified, will be called with the string of every JSON "
"float to be decoded.  By default, this is equivalent to ``float(num_str)``. "
"This can be used to use another datatype or parser for JSON floats (e.g. :"
"class:`decimal.Decimal`)."
msgstr ""
"*parse_float*, якщо вказано, буде викликано з рядком кожного числа JSON з "
"плаваючою точкою для декодування. За замовчуванням це еквівалентно "
"``float(num_str)``. Це можна використовувати для використання іншого типу "
"даних або синтаксичного аналізатора для JSON з плаваючою точкою (наприклад, :"
"class:`decimal.Decimal`)."

msgid ""
"*parse_int*, if specified, will be called with the string of every JSON int "
"to be decoded.  By default, this is equivalent to ``int(num_str)``.  This "
"can be used to use another datatype or parser for JSON integers (e.g. :class:"
"`float`)."
msgstr ""
"*parse_int*, якщо вказано, буде викликано з рядком кожного JSON int, який "
"потрібно декодувати. За замовчуванням це еквівалентно ``int(num_str)``. Це "
"можна використовувати для використання іншого типу даних або синтаксичного "
"аналізатора для цілих чисел JSON (наприклад, :class:`float`)."

msgid ""
"The default *parse_int* of :func:`int` now limits the maximum length of the "
"integer string via the interpreter's :ref:`integer string conversion length "
"limitation <int_max_str_digits>` to help avoid denial of service attacks."
msgstr ""

msgid ""
"*parse_constant*, if specified, will be called with one of the following "
"strings: ``'-Infinity'``, ``'Infinity'``, ``'NaN'``. This can be used to "
"raise an exception if invalid JSON numbers are encountered."
msgstr ""
"*parse_constant*, якщо вказано, буде викликано з одним із таких рядків: ``'-"
"Infinity'``, ``'Infinity'``, ``'NaN'``. Це можна використати для створення "
"винятку, якщо виявлено недійсні номери JSON."

msgid "*parse_constant* doesn't get called on 'null', 'true', 'false' anymore."
msgstr "*parse_constant* більше не викликається на 'null', 'true', 'false'."

msgid ""
"To use a custom :class:`JSONDecoder` subclass, specify it with the ``cls`` "
"kwarg; otherwise :class:`JSONDecoder` is used.  Additional keyword arguments "
"will be passed to the constructor of the class."
msgstr ""
"Щоб використовувати спеціальний підклас :class:`JSONDecoder`, вкажіть його "
"за допомогою ``cls`` kwarg; інакше :class:`JSONDecoder` використовується. "
"Додаткові ключові аргументи будуть передані конструктору класу."

msgid ""
"If the data being deserialized is not a valid JSON document, a :exc:"
"`JSONDecodeError` will be raised."
msgstr ""
"Якщо дані, які десеріалізуються, не є дійсним документом JSON, виникне :exc:"
"`JSONDecodeError`."

msgid ""
"*fp* can now be a :term:`binary file`. The input encoding should be UTF-8, "
"UTF-16 or UTF-32."
msgstr ""
"*fp* тепер може бути :term:`binary file`. Вхідне кодування має бути UTF-8, "
"UTF-16 або UTF-32."

msgid ""
"Deserialize *s* (a :class:`str`, :class:`bytes` or :class:`bytearray` "
"instance containing a JSON document) to a Python object using this :ref:"
"`conversion table <json-to-py-table>`."
msgstr ""
"Десеріалізуйте *s* (екземпляр :class:`str`, :class:`bytes` або :class:"
"`bytearray`, що містить документ JSON) в об’єкт Python за допомогою цієї :"
"ref:`таблиці перетворення <json-to-py-table>`."

msgid "The other arguments have the same meaning as in :func:`load`."
msgstr "Інші аргументи мають те саме значення, що й у :func:`load`."

msgid ""
"*s* can now be of type :class:`bytes` or :class:`bytearray`. The input "
"encoding should be UTF-8, UTF-16 or UTF-32."
msgstr ""
"*s* тепер може бути типу :class:`bytes` або :class:`bytearray`. Вхідне "
"кодування має бути UTF-8, UTF-16 або UTF-32."

msgid "The keyword argument *encoding* has been removed."
msgstr "Аргумент ключового слова *кодування* видалено."

msgid "Encoders and Decoders"
msgstr "Кодери та декодери"

msgid "Simple JSON decoder."
msgstr "Простий декодер JSON."

msgid "Performs the following translations in decoding by default:"
msgstr "Виконує такі переклади в декодуванні за замовчуванням:"

msgid "JSON"
msgstr "JSON"

msgid "Python"
msgstr "Python"

msgid "object"
msgstr "об'єкт"

msgid "dict"
msgstr "дикт"

msgid "array"
msgstr "масив"

msgid "list"
msgstr "список"

msgid "string"
msgstr "рядок"

msgid "str"
msgstr "вул"

msgid "number (int)"
msgstr "число (ціле)"

msgid "int"
msgstr "внутр"

msgid "number (real)"
msgstr "число (дійсне)"

msgid "float"
msgstr "плавати"

msgid "true"
msgstr "правда"

msgid "True"
msgstr "правда"

msgid "false"
msgstr "помилковий"

msgid "False"
msgstr "помилковий"

msgid "null"
msgstr "нуль"

msgid "None"
msgstr "Жодного"

msgid ""
"It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as their "
"corresponding ``float`` values, which is outside the JSON spec."
msgstr ""
"Він також розуміє ``NaN``, ``Infinity`` і ``-Infinity`` як їхні відповідні "
"значення ``float``, що виходить за межі специфікації JSON."

msgid ""
"*object_hook*, if specified, will be called with the result of every JSON "
"object decoded and its return value will be used in place of the given :"
"class:`dict`.  This can be used to provide custom deserializations (e.g. to "
"support `JSON-RPC <https://www.jsonrpc.org>`_ class hinting)."
msgstr ""

msgid ""
"*object_pairs_hook*, if specified will be called with the result of every "
"JSON object decoded with an ordered list of pairs.  The return value of "
"*object_pairs_hook* will be used instead of the :class:`dict`.  This feature "
"can be used to implement custom decoders.  If *object_hook* is also defined, "
"the *object_pairs_hook* takes priority."
msgstr ""
"*object_pairs_hook*, якщо вказано, буде викликано з результатом кожного "
"об’єкта JSON, декодованого за допомогою впорядкованого списку пар. Повернене "
"значення *object_pairs_hook* використовуватиметься замість :class:`dict`. Ця "
"функція може бути використана для реалізації спеціальних декодерів. Якщо "
"*object_hook* також визначено, *object_pairs_hook* має пріоритет."

msgid ""
"If *strict* is false (``True`` is the default), then control characters will "
"be allowed inside strings.  Control characters in this context are those "
"with character codes in the 0--31 range, including ``'\\t'`` (tab), "
"``'\\n'``, ``'\\r'`` and ``'\\0'``."
msgstr ""
"Якщо *strict* має значення false (``True`` є значенням за замовчуванням), то "
"керуючі символи будуть дозволені всередині рядків. Контрольні символи в "
"цьому контексті — це символи з кодами символів у діапазоні 0--31, включаючи "
"``'\\t'`` (табуляція), ``'\\n'``, ``'\\r'`` і ``'\\0'``."

msgid "All parameters are now :ref:`keyword-only <keyword-only_parameter>`."
msgstr ""
"Усі параметри тепер :ref:`лише для ключових слів <keyword-only_parameter>`."

msgid ""
"Return the Python representation of *s* (a :class:`str` instance containing "
"a JSON document)."
msgstr ""
"Повертає представлення Python *s* (екземпляр :class:`str`, що містить "
"документ JSON)."

msgid ""
":exc:`JSONDecodeError` will be raised if the given JSON document is not "
"valid."
msgstr ""
":exc:`JSONDecodeError` буде викликано, якщо вказаний документ JSON недійсний."

msgid ""
"Decode a JSON document from *s* (a :class:`str` beginning with a JSON "
"document) and return a 2-tuple of the Python representation and the index in "
"*s* where the document ended."
msgstr ""
"Декодуйте документ JSON із *s* (:class:`str`, що починається з документа "
"JSON) і повертайте 2-кортеж представлення Python та індекс у *s*, де "
"документ закінчився."

msgid ""
"This can be used to decode a JSON document from a string that may have "
"extraneous data at the end."
msgstr ""
"Це можна використовувати для декодування документа JSON із рядка, який може "
"містити сторонні дані в кінці."

msgid "Extensible JSON encoder for Python data structures."
msgstr "Розширюваний кодувальник JSON для структур даних Python."

msgid "Supports the following objects and types by default:"
msgstr "За замовчуванням підтримує такі об’єкти та типи:"

msgid "list, tuple"
msgstr "список, кортеж"

msgid "int, float, int- & float-derived Enums"
msgstr "int, float, int- & float-derived Enums"

msgid "number"
msgstr "номер"

msgid "Added support for int- and float-derived Enum classes."
msgstr "Додано підтримку класів Enum, похідних від int і float."

msgid ""
"To extend this to recognize other objects, subclass and implement a :meth:"
"`default` method with another method that returns a serializable object for "
"``o`` if possible, otherwise it should call the superclass implementation "
"(to raise :exc:`TypeError`)."
msgstr ""
"Щоб розширити це для розпізнавання інших об’єктів, створіть підклас і "
"реалізуйте метод :meth:`default` іншим методом, який повертає серіалізований "
"об’єкт для ``o``, якщо це можливо, інакше він повинен викликати реалізацію "
"суперкласу (для підвищення :exc:`TypeError`)."

msgid ""
"If *skipkeys* is false (the default), a :exc:`TypeError` will be raised when "
"trying to encode keys that are not :class:`str`, :class:`int`, :class:"
"`float` or ``None``.  If *skipkeys* is true, such items are simply skipped."
msgstr ""
"Якщо *skipkeys* має значення false (за замовчуванням), :exc:`TypeError` буде "
"викликано під час спроби закодувати ключі, які не є :class:`str`, :class:"
"`int`, :class:`float` або ``Жодного``. Якщо *skipkeys* має значення true, "
"такі елементи просто пропускаються."

msgid ""
"If *check_circular* is true (the default), then lists, dicts, and custom "
"encoded objects will be checked for circular references during encoding to "
"prevent an infinite recursion (which would cause a :exc:`RecursionError`). "
"Otherwise, no such check takes place."
msgstr ""

msgid ""
"If *allow_nan* is true (the default), then ``NaN``, ``Infinity``, and ``-"
"Infinity`` will be encoded as such.  This behavior is not JSON specification "
"compliant, but is consistent with most JavaScript based encoders and "
"decoders.  Otherwise, it will be a :exc:`ValueError` to encode such floats."
msgstr ""
"Якщо *allow_nan* має значення true (за замовчуванням), тоді ``NaN``, "
"``Infinity`` і ``-Infinity`` будуть закодовані як такі. Така поведінка не "
"відповідає специфікації JSON, але відповідає більшості кодувальників і "
"декодерів на основі JavaScript. В іншому випадку це буде :exc:`ValueError` "
"для кодування таких плаваючих значень."

msgid ""
"If *sort_keys* is true (default: ``False``), then the output of dictionaries "
"will be sorted by key; this is useful for regression tests to ensure that "
"JSON serializations can be compared on a day-to-day basis."
msgstr ""
"Якщо *sort_keys* має значення true (за замовчуванням: ``False``), тоді "
"вихідні дані словників будуть відсортовані за ключем; це корисно для "
"регресійних тестів, щоб гарантувати, що серіалізації JSON можна порівнювати "
"щодня."

msgid ""
"Implement this method in a subclass such that it returns a serializable "
"object for *o*, or calls the base implementation (to raise a :exc:"
"`TypeError`)."
msgstr ""
"Реалізуйте цей метод у підкласі так, щоб він повертав серіалізований об’єкт "
"для *o* або викликав базову реалізацію (щоб викликати :exc:`TypeError`)."

msgid ""
"For example, to support arbitrary iterators, you could implement :meth:"
"`default` like this::"
msgstr ""
"Наприклад, щоб підтримувати довільні ітератори, ви можете реалізувати :meth:"
"`default` так:"

msgid ""
"Return a JSON string representation of a Python data structure, *o*.  For "
"example::"
msgstr ""
"Повертає рядкове представлення JSON структури даних Python, *o*. Наприклад::"

msgid ""
"Encode the given object, *o*, and yield each string representation as "
"available.  For example::"
msgstr ""
"Закодуйте вказаний об’єкт, *o*, і передайте кожне представлення рядка як "
"доступне. Наприклад::"

msgid "Exceptions"
msgstr "Винятки"

msgid "Subclass of :exc:`ValueError` with the following additional attributes:"
msgstr "Підклас :exc:`ValueError` з такими додатковими атрибутами:"

msgid "The unformatted error message."
msgstr "Неформатне повідомлення про помилку."

msgid "The JSON document being parsed."
msgstr "Документ JSON аналізується."

msgid "The start index of *doc* where parsing failed."
msgstr "Початковий індекс *doc*, де синтаксичний аналіз не вдався."

msgid "The line corresponding to *pos*."
msgstr "Рядок, що відповідає *pos*."

msgid "The column corresponding to *pos*."
msgstr "Стовпець, що відповідає *pos*."

msgid "Standard Compliance and Interoperability"
msgstr "Відповідність стандартам і сумісність"

msgid ""
"The JSON format is specified by :rfc:`7159` and by `ECMA-404 <https://www."
"ecma-international.org/publications-and-standards/standards/ecma-404/>`_. "
"This section details this module's level of compliance with the RFC. For "
"simplicity, :class:`JSONEncoder` and :class:`JSONDecoder` subclasses, and "
"parameters other than those explicitly mentioned, are not considered."
msgstr ""
"Формат JSON визначається :rfc:`7159` і `ECMA-404 <https://www.ecma-"
"international.org/publications-and-standards/standards/ecma-404/>`_. У цьому "
"розділі детально описано рівень відповідності цього модуля вимогам RFC. Для "
"простоти підкласи :class:`JSONEncoder` і :class:`JSONDecoder`, а також інші "
"параметри, окрім тих, що зазначені явно, не розглядаються."

msgid ""
"This module does not comply with the RFC in a strict fashion, implementing "
"some extensions that are valid JavaScript but not valid JSON.  In particular:"
msgstr ""
"Цей модуль не повністю відповідає RFC, реалізуючи деякі розширення, які є "
"дійсним JavaScript, але не дійсним JSON. Зокрема:"

msgid "Infinite and NaN number values are accepted and output;"
msgstr "Нескінченні та NaN числові значення приймаються та виводяться;"

msgid ""
"Repeated names within an object are accepted, and only the value of the last "
"name-value pair is used."
msgstr ""
"Повторювані імена в межах об’єкта приймаються, і використовується лише "
"значення останньої пари ім’я-значення."

msgid ""
"Since the RFC permits RFC-compliant parsers to accept input texts that are "
"not RFC-compliant, this module's deserializer is technically RFC-compliant "
"under default settings."
msgstr ""
"Оскільки RFC дозволяє RFC-сумісним парсерам приймати вхідні тексти, які не є "
"RFC-сумісними, десеріалізатор цього модуля є технічно RFC-сумісним за "
"умовчанням."

msgid "Character Encodings"
msgstr "Кодування символів"

msgid ""
"The RFC requires that JSON be represented using either UTF-8, UTF-16, or "
"UTF-32, with UTF-8 being the recommended default for maximum "
"interoperability."
msgstr ""
"RFC вимагає, щоб JSON був представлений за допомогою UTF-8, UTF-16 або "
"UTF-32, причому UTF-8 є рекомендованим за замовчуванням для максимальної "
"сумісності."

msgid ""
"As permitted, though not required, by the RFC, this module's serializer sets "
"*ensure_ascii=True* by default, thus escaping the output so that the "
"resulting strings only contain ASCII characters."
msgstr ""
"Як це дозволено, хоча й не вимагається RFC, серіалізатор цього модуля "
"встановлює *ensure_ascii=True* за замовчуванням, таким чином усуваючи "
"вихідні дані, щоб кінцеві рядки містили лише символи ASCII."

msgid ""
"Other than the *ensure_ascii* parameter, this module is defined strictly in "
"terms of conversion between Python objects and :class:`Unicode strings "
"<str>`, and thus does not otherwise directly address the issue of character "
"encodings."
msgstr ""
"За винятком параметра *ensure_ascii*, цей модуль визначено суворо в термінах "
"перетворення між об’єктами Python і :class:`рядками Unicode <str>`, і, отже, "
"іншим чином безпосередньо не вирішує проблему кодування символів."

msgid ""
"The RFC prohibits adding a byte order mark (BOM) to the start of a JSON "
"text, and this module's serializer does not add a BOM to its output. The RFC "
"permits, but does not require, JSON deserializers to ignore an initial BOM "
"in their input.  This module's deserializer raises a :exc:`ValueError` when "
"an initial BOM is present."
msgstr ""
"RFC забороняє додавати позначку порядку байтів (BOM) на початок тексту JSON, "
"а серіалізатор цього модуля не додає BOM до свого виводу. RFC дозволяє, але "
"не вимагає, щоб десеріалізатори JSON ігнорували початкову специфікацію у "
"своїх вхідних даних. Десеріалізатор цього модуля викликає :exc:`ValueError`, "
"коли присутня початкова специфікація."

msgid ""
"The RFC does not explicitly forbid JSON strings which contain byte sequences "
"that don't correspond to valid Unicode characters (e.g. unpaired UTF-16 "
"surrogates), but it does note that they may cause interoperability problems. "
"By default, this module accepts and outputs (when present in the original :"
"class:`str`) code points for such sequences."
msgstr ""
"RFC явно не забороняє рядки JSON, які містять послідовності байтів, які не "
"відповідають дійсним символам Unicode (наприклад, непарні сурогати UTF-16), "
"але зазначається, що вони можуть спричинити проблеми взаємодії. За "
"замовчуванням цей модуль приймає та виводить (якщо є в оригінальному :class:"
"`str`) кодові точки для таких послідовностей."

msgid "Infinite and NaN Number Values"
msgstr "Нескінченні значення чисел NaN"

msgid ""
"The RFC does not permit the representation of infinite or NaN number values. "
"Despite that, by default, this module accepts and outputs ``Infinity``, ``-"
"Infinity``, and ``NaN`` as if they were valid JSON number literal values::"
msgstr ""
"RFC не дозволяє подання нескінченних значень чи чисел NaN. Незважаючи на це, "
"за замовчуванням цей модуль приймає та виводить ``Infinity``, ``-Infinity`` "
"і ``NaN`` так, якби вони були дійсними літеральними значеннями номерів JSON::"

msgid ""
"In the serializer, the *allow_nan* parameter can be used to alter this "
"behavior.  In the deserializer, the *parse_constant* parameter can be used "
"to alter this behavior."
msgstr ""
"У серіалізаторі можна використовувати параметр *allow_nan*, щоб змінити цю "
"поведінку. У десеріалізаторі можна використовувати параметр "
"*parse_constant*, щоб змінити цю поведінку."

msgid "Repeated Names Within an Object"
msgstr "Повторювані імена в межах об’єкта"

msgid ""
"The RFC specifies that the names within a JSON object should be unique, but "
"does not mandate how repeated names in JSON objects should be handled.  By "
"default, this module does not raise an exception; instead, it ignores all "
"but the last name-value pair for a given name::"
msgstr ""
"RFC визначає, що імена в об’єкті JSON мають бути унікальними, але не "
"визначає, як слід обробляти повторювані імена в об’єктах JSON. За "
"замовчуванням цей модуль не викликає винятку; замість цього він ігнорує все, "
"окрім пари прізвище-значення для даного імені::"

msgid "The *object_pairs_hook* parameter can be used to alter this behavior."
msgstr ""
"Параметр *object_pairs_hook* можна використовувати, щоб змінити цю поведінку."

msgid "Top-level Non-Object, Non-Array Values"
msgstr "Необ’єктні та немасивні значення верхнього рівня"

msgid ""
"The old version of JSON specified by the obsolete :rfc:`4627` required that "
"the top-level value of a JSON text must be either a JSON object or array "
"(Python :class:`dict` or :class:`list`), and could not be a JSON null, "
"boolean, number, or string value.  :rfc:`7159` removed that restriction, and "
"this module does not and has never implemented that restriction in either "
"its serializer or its deserializer."
msgstr ""
"Стара версія JSON, визначена застарілим :rfc:`4627`, вимагала, щоб значення "
"верхнього рівня тексту JSON було або об’єктом JSON, або масивом (Python :"
"class:`dict` або :class:`list`) і не може бути нульовим, логічним, числовим "
"або рядковим значенням JSON. :rfc:`7159` видалив це обмеження, і цей модуль "
"не реалізував і ніколи не реалізував це обмеження ні в серіалізаторі, ні в "
"десеріалізаторі."

msgid ""
"Regardless, for maximum interoperability, you may wish to voluntarily adhere "
"to the restriction yourself."
msgstr ""
"Незважаючи на це, для максимальної сумісності ви можете самостійно "
"добровільно дотримуватися цього обмеження."

msgid "Implementation Limitations"
msgstr "Обмеження реалізації"

msgid "Some JSON deserializer implementations may set limits on:"
msgstr ""
"Деякі реалізації десеріалізатора JSON можуть встановлювати обмеження на:"

msgid "the size of accepted JSON texts"
msgstr "розмір прийнятих текстів JSON"

msgid "the maximum level of nesting of JSON objects and arrays"
msgstr "максимальний рівень вкладеності об'єктів і масивів JSON"

msgid "the range and precision of JSON numbers"
msgstr "діапазон і точність чисел JSON"

msgid "the content and maximum length of JSON strings"
msgstr "вміст і максимальну довжину рядків JSON"

msgid ""
"This module does not impose any such limits beyond those of the relevant "
"Python datatypes themselves or the Python interpreter itself."
msgstr ""
"Цей модуль не накладає жодних таких обмежень, окрім обмежень відповідних "
"типів даних Python або самого інтерпретатора Python."

msgid ""
"When serializing to JSON, beware any such limitations in applications that "
"may consume your JSON.  In particular, it is common for JSON numbers to be "
"deserialized into IEEE 754 double precision numbers and thus subject to that "
"representation's range and precision limitations.  This is especially "
"relevant when serializing Python :class:`int` values of extremely large "
"magnitude, or when serializing instances of \"exotic\" numerical types such "
"as :class:`decimal.Decimal`."
msgstr ""
"Під час серіалізації в JSON уникайте таких обмежень у програмах, які можуть "
"використовувати ваш JSON. Зокрема, зазвичай числа JSON десеріалізуються в "
"числа подвійної точності IEEE 754 і, таким чином, підпадають під обмеження "
"діапазону представлення та точності. Це особливо важливо під час "
"серіалізації Python :class:`int` значень надзвичайно великої величини або "
"під час серіалізації екзотичних числових типів, таких як :class:`decimal."
"Decimal`."

msgid "Command Line Interface"
msgstr "Інтерфейс командного рядка"

msgid "**Source code:** :source:`Lib/json/tool.py`"
msgstr "**Вихідний код:** :source:`Lib/json/tool.py`"

msgid ""
"The :mod:`json.tool` module provides a simple command line interface to "
"validate and pretty-print JSON objects."
msgstr ""
"Модуль :mod:`json.tool` забезпечує простий інтерфейс командного рядка для "
"перевірки та красивого друку об’єктів JSON."

msgid ""
"If the optional ``infile`` and ``outfile`` arguments are not specified, :"
"attr:`sys.stdin` and :attr:`sys.stdout` will be used respectively:"
msgstr ""
"Якщо необов’язкові аргументи ``infile`` і ``outfile`` не вказано, :attr:`sys."
"stdin` і :attr:`sys.stdout` будуть використані відповідно:"

msgid ""
"The output is now in the same order as the input. Use the :option:`--sort-"
"keys` option to sort the output of dictionaries alphabetically by key."
msgstr ""
"Вихід тепер у такому самому порядку, як і вхід. Використовуйте опцію :option:"
"`--sort-keys`, щоб відсортувати вихідні дані словників за алфавітом за "
"ключем."

msgid "Command line options"
msgstr "Параметри командного рядка"

msgid "The JSON file to be validated or pretty-printed:"
msgstr "Файл JSON, який потрібно перевірити або роздрукувати:"

msgid "If *infile* is not specified, read from :attr:`sys.stdin`."
msgstr "Якщо *infile* не вказано, читайте з :attr:`sys.stdin`."

msgid ""
"Write the output of the *infile* to the given *outfile*. Otherwise, write it "
"to :attr:`sys.stdout`."
msgstr ""
"Запишіть вихід *infile* у вказаний *outfile*. В іншому випадку запишіть його "
"в :attr:`sys.stdout`."

msgid "Sort the output of dictionaries alphabetically by key."
msgstr "Сортувати вихідні дані словників за алфавітом за ключем."

msgid ""
"Disable escaping of non-ascii characters, see :func:`json.dumps` for more "
"information."
msgstr ""
"Вимкніть екранування символів, відмінних від ASCII, див. :func:`json.dumps` "
"для отримання додаткової інформації."

msgid "Parse every input line as separate JSON object."
msgstr "Проаналізуйте кожен рядок введення як окремий об’єкт JSON."

msgid "Mutually exclusive options for whitespace control."
msgstr "Взаємовиключні параметри керування пробілами."

msgid "Show the help message."
msgstr "Показати довідкове повідомлення."

msgid "Footnotes"
msgstr "Виноски"

msgid ""
"As noted in `the errata for RFC 7159 <https://www.rfc-editor.org/"
"errata_search.php?rfc=7159>`_, JSON permits literal U+2028 (LINE SEPARATOR) "
"and U+2029 (PARAGRAPH SEPARATOR) characters in strings, whereas JavaScript "
"(as of ECMAScript Edition 5.1) does not."
msgstr ""
"Як зазначено в `виправленнях для RFC 7159 <https://www.rfc-editor.org/"
"errata_search.php?rfc=7159>`_, JSON дозволяє літерали U+2028 (РОЗДІЛЮВАЧ "
"РЯДКУ) і U+2029 (РОЗДІЛЮВАЧ ПАРАГРАФА) у рядках, тоді як JavaScript "
"(починаючи з версії ECMAScript 5.1) не допускає."
