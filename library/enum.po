# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Dmytro Kazanzhy, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-12 16:28+0000\n"
"PO-Revision-Date: 2021-06-28 01:05+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://www.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

msgid ":mod:`enum` --- Support for enumerations"
msgstr ":mod:`enum` --- Підтримка перерахувань"

msgid "**Source code:** :source:`Lib/enum.py`"
msgstr "**Вихідний код:** :source:`Lib/enum.py`"

msgid ""
"This page contains the API reference information. For tutorial information "
"and discussion of more advanced topics, see"
msgstr ""
"Ця сторінка містить довідкову інформацію про API. Інформацію про підручники "
"та обговорення більш складних тем див"

msgid ":ref:`Basic Tutorial <enum-basic-tutorial>`"
msgstr ""

msgid ":ref:`Advanced Tutorial <enum-advanced-tutorial>`"
msgstr ""

msgid ":ref:`Enum Cookbook <enum-cookbook>`"
msgstr ""

msgid "An enumeration:"
msgstr ""

msgid "is a set of symbolic names (members) bound to unique values"
msgstr ""

msgid "can be iterated over to return its members in definition order"
msgstr ""

msgid "uses *call* syntax to return members by value"
msgstr ""

msgid "uses *index* syntax to return members by name"
msgstr ""

msgid ""
"Enumerations are created either by using :keyword:`class` syntax, or by "
"using function-call syntax::"
msgstr ""

msgid ""
"Even though we can use :keyword:`class` syntax to create Enums, Enums are "
"not normal Python classes.  See :ref:`How are Enums different? <enum-class-"
"differences>` for more details."
msgstr ""

msgid "Nomenclature"
msgstr "Номенклатура"

msgid "The class :class:`Color` is an *enumeration* (or *enum*)"
msgstr "Клас :class:`Color` є *переліком* (або *enum*)"

msgid ""
"The attributes :attr:`Color.RED`, :attr:`Color.GREEN`, etc., are "
"*enumeration members* (or *members*) and are functionally constants."
msgstr ""

msgid ""
"The enum members have *names* and *values* (the name of :attr:`Color.RED` is "
"``RED``, the value of :attr:`Color.BLUE` is ``3``, etc.)"
msgstr ""
"Члени enum мають *імена* та *значення* (ім’я :attr:`Color.RED` — ``RED``, "
"значення :attr:`Color.BLUE` — ``3`` тощо). )"

msgid "Module Contents"
msgstr "Зміст модуля"

msgid ":class:`EnumType`"
msgstr ""

msgid "The ``type`` for Enum and its subclasses."
msgstr ""

msgid ":class:`Enum`"
msgstr ""

msgid "Base class for creating enumerated constants."
msgstr ""

msgid ":class:`IntEnum`"
msgstr ""

msgid ""
"Base class for creating enumerated constants that are also subclasses of :"
"class:`int`. (`Notes`_)"
msgstr ""

msgid ":class:`StrEnum`"
msgstr ""

msgid ""
"Base class for creating enumerated constants that are also subclasses of :"
"class:`str`. (`Notes`_)"
msgstr ""

msgid ":class:`Flag`"
msgstr ""

msgid ""
"Base class for creating enumerated constants that can be combined using the "
"bitwise operations without losing their :class:`Flag` membership."
msgstr ""
"Базовий клас для створення перерахованих констант, які можна комбінувати за "
"допомогою порозрядних операцій, не втрачаючи приналежності до :class:`Flag`."

msgid ":class:`IntFlag`"
msgstr ""

msgid ""
"Base class for creating enumerated constants that can be combined using the "
"bitwise operators without losing their :class:`IntFlag` membership. :class:"
"`IntFlag` members are also subclasses of :class:`int`. (`Notes`_)"
msgstr ""

msgid ":class:`ReprEnum`"
msgstr ""

msgid ""
"Used by :class:`IntEnum`, :class:`StrEnum`, and :class:`IntFlag` to keep "
"the :class:`str() <str>` of the mixed-in type."
msgstr ""

msgid ":class:`EnumCheck`"
msgstr ""

msgid ""
"An enumeration with the values ``CONTINUOUS``, ``NAMED_FLAGS``, and "
"``UNIQUE``, for use with :func:`verify` to ensure various constraints are "
"met by a given enumeration."
msgstr ""

msgid ":class:`FlagBoundary`"
msgstr ""

msgid ""
"An enumeration with the values ``STRICT``, ``CONFORM``, ``EJECT``, and "
"``KEEP`` which allows for more fine-grained control over how invalid values "
"are dealt with in an enumeration."
msgstr ""

msgid ":class:`auto`"
msgstr ""

msgid ""
"Instances are replaced with an appropriate value for Enum members. :class:"
"`StrEnum` defaults to the lower-cased version of the member name, while "
"other Enums default to 1 and increase from there."
msgstr ""

msgid ":func:`~enum.property`"
msgstr ""

msgid ""
"Allows :class:`Enum` members to have attributes without conflicting with "
"member names."
msgstr ""

msgid ":func:`unique`"
msgstr ""

msgid ""
"Enum class decorator that ensures only one name is bound to any one value."
msgstr ""
"Декоратор класу Enum, який забезпечує прив’язку лише одного імені до будь-"
"якого значення."

msgid ":func:`verify`"
msgstr ""

msgid ""
"Enum class decorator that checks user-selectable constraints on an "
"enumeration."
msgstr ""

msgid ":func:`member`"
msgstr ""

msgid "Make ``obj`` a member.  Can be used as a decorator."
msgstr ""

msgid ":func:`nonmember`"
msgstr ""

msgid "Do not make ``obj`` a member.  Can be used as a decorator."
msgstr ""

msgid ":func:`global_enum`"
msgstr ""

msgid ""
"Modify the :class:`str() <str>` and :func:`repr` of an enum to show its "
"members as belonging to the module instead of its class. Should only be used "
"if the enum members will be exported to the module global namespace."
msgstr ""

msgid ":func:`show_flag_values`"
msgstr ""

msgid "Return a list of all power-of-two integers contained in a flag."
msgstr ""

msgid "``Flag``, ``IntFlag``, ``auto``"
msgstr "``Flag``, ``IntFlag``, ``auto``"

msgid ""
"``StrEnum``, ``EnumCheck``, ``ReprEnum``, ``FlagBoundary``, ``property``, "
"``member``, ``nonmember``, ``global_enum``, ``show_flag_values``"
msgstr ""

msgid "Data Types"
msgstr "Типи даних"

msgid ""
"*EnumType* is the :term:`metaclass` for *enum* enumerations.  It is possible "
"to subclass *EnumType* -- see :ref:`Subclassing EnumType <enumtype-"
"examples>` for details."
msgstr ""

msgid ""
"*EnumType* is responsible for setting the correct :meth:`__repr__`, :meth:"
"`__str__`, :meth:`__format__`, and :meth:`__reduce__` methods on the final "
"*enum*, as well as creating the enum members, properly handling duplicates, "
"providing iteration over the enum class, etc."
msgstr ""

msgid "Returns ``True`` if member belongs to the ``cls``::"
msgstr ""

msgid ""
"In Python 3.12 it will be possible to check for member values and not just "
"members; until then, a ``TypeError`` will be raised if a non-Enum-member is "
"used in a containment check."
msgstr ""

msgid ""
"Returns ``['__class__', '__doc__', '__members__', '__module__']`` and the "
"names of the members in *cls*::"
msgstr ""

msgid ""
"Returns the Enum member in *cls* matching *name*, or raises an :exc:"
"`AttributeError`::"
msgstr ""

msgid ""
"Returns the Enum member in *cls* matching *name*, or raises an :exc:"
"`KeyError`::"
msgstr ""

msgid "Returns each member in *cls* in definition order::"
msgstr ""

msgid "Returns the number of member in *cls*::"
msgstr ""

msgid "Returns each member in *cls* in reverse definition order::"
msgstr ""

msgid "*Enum* is the base class for all *enum* enumerations."
msgstr ""

msgid "The name used to define the ``Enum`` member::"
msgstr ""

msgid "The value given to the ``Enum`` member::"
msgstr ""

msgid "Enum member values"
msgstr "Значення члена Enum"

msgid ""
"Member values can be anything: :class:`int`, :class:`str`, etc..  If the "
"exact value is unimportant you may use :class:`auto` instances and an "
"appropriate value will be chosen for you.  See :class:`auto` for the details."
msgstr ""

msgid ""
"``_ignore_`` is only used during creation and is removed from the "
"enumeration once creation is complete."
msgstr ""

msgid ""
"``_ignore_`` is a list of names that will not become members, and whose "
"names will also be removed from the completed enumeration.  See :ref:"
"`TimePeriod <enum-time-period>` for an example."
msgstr ""

msgid "This method is called in two different ways:"
msgstr ""

msgid "to look up an existing member:"
msgstr ""

msgid "cls"
msgstr ""

msgid "The enum class being called."
msgstr ""

msgid "value"
msgstr "значення"

msgid "The value to lookup."
msgstr ""

msgid "to use the ``cls`` enum to create a new enum:"
msgstr ""

msgid "The name of the new Enum to create."
msgstr ""

msgid "names"
msgstr "імена"

msgid "The names/values of the members for the new Enum."
msgstr ""

msgid "module"
msgstr "модуль"

msgid "The name of the module the new Enum is created in."
msgstr ""

msgid "qualname"
msgstr "qualname"

msgid "The actual location in the module where this Enum can be found."
msgstr ""

msgid "type"
msgstr "типу"

msgid "A mix-in type for the new Enum."
msgstr ""

msgid "start"
msgstr "початок"

msgid "The first integer value for the Enum (used by :class:`auto`)"
msgstr ""

msgid "boundary"
msgstr ""

msgid ""
"How to handle out-of-range values from bit operations (:class:`Flag` only)"
msgstr ""

msgid ""
"Returns ``['__class__', '__doc__', '__module__', 'name', 'value']`` and any "
"public methods defined on *self.__class__*::"
msgstr ""

msgid "name"
msgstr "name"

msgid "The name of the member being defined (e.g. 'RED')."
msgstr ""

msgid "The start value for the Enum; the default is 1."
msgstr ""

msgid "count"
msgstr ""

msgid "The number of members currently defined, not including this one."
msgstr ""

msgid "last_values"
msgstr ""

msgid "A list of the previous values."
msgstr ""

msgid ""
"A *staticmethod* that is used to determine the next value returned by :class:"
"`auto`::"
msgstr ""

msgid ""
"A *classmethod* that is used to further configure subsequent subclasses. By "
"default, does nothing."
msgstr ""

msgid ""
"A *classmethod* for looking up values not found in *cls*.  By default it "
"does nothing, but can be overridden to implement custom search behavior::"
msgstr ""

msgid ""
"Returns the string used for *repr()* calls.  By default, returns the *Enum* "
"name, member name, and value, but can be overridden::"
msgstr ""

msgid ""
"Returns the string used for *str()* calls.  By default, returns the *Enum* "
"name and member name, but can be overridden::"
msgstr ""

msgid ""
"Returns the string used for *format()* and *f-string* calls.  By default, "
"returns :meth:`__str__` returns, but can be overridden::"
msgstr ""

msgid ""
"Using :class:`auto` with :class:`Enum` results in integers of increasing "
"value, starting with ``1``."
msgstr ""

msgid ""
"*IntEnum* is the same as *Enum*, but its members are also integers and can "
"be used anywhere that an integer can be used.  If any integer operation is "
"performed with an *IntEnum* member, the resulting value loses its "
"enumeration status."
msgstr ""

msgid ""
"Using :class:`auto` with :class:`IntEnum` results in integers of increasing "
"value, starting with ``1``."
msgstr ""

msgid ""
":meth:`__str__` is now :func:`int.__str__` to better support the "
"*replacement of existing constants* use-case. :meth:`__format__` was "
"already :func:`int.__format__` for that same reason."
msgstr ""

msgid ""
"*StrEnum* is the same as *Enum*, but its members are also strings and can be "
"used in most of the same places that a string can be used.  The result of "
"any string operation performed on or with a *StrEnum* member is not part of "
"the enumeration."
msgstr ""

msgid ""
"There are places in the stdlib that check for an exact :class:`str` instead "
"of a :class:`str` subclass (i.e. ``type(unknown) == str`` instead of "
"``isinstance(unknown, str)``), and in those locations you will need to use "
"``str(StrEnum.member)``."
msgstr ""

msgid ""
"Using :class:`auto` with :class:`StrEnum` results in the lower-cased member "
"name as the value."
msgstr ""

msgid ""
":meth:`__str__` is :func:`str.__str__` to better support the *replacement of "
"existing constants* use-case.  :meth:`__format__` is likewise :func:`str."
"__format__` for that same reason."
msgstr ""

msgid ""
"*Flag* members support the bitwise operators ``&`` (*AND*), ``|`` (*OR*), "
"``^`` (*XOR*), and ``~`` (*INVERT*); the results of those operators are "
"members of the enumeration."
msgstr ""

msgid "Returns *True* if value is in self::"
msgstr ""

msgid "Returns all contained members::"
msgstr ""

msgid "Returns number of members in flag::"
msgstr ""

msgid "Returns *True* if any members in flag, *False* otherwise::"
msgstr ""

msgid "Returns current flag binary or'ed with other::"
msgstr ""

msgid "Returns current flag binary and'ed with other::"
msgstr ""

msgid "Returns current flag binary xor'ed with other::"
msgstr ""

msgid "Returns all the flags in *type(self)* that are not in self::"
msgstr ""

msgid ""
"Function used to format any remaining unnamed numeric values.  Default is "
"the value's repr; common choices are :func:`hex` and :func:`oct`."
msgstr ""

msgid ""
"Using :class:`auto` with :class:`Flag` results in integers that are powers "
"of two, starting with ``1``."
msgstr ""

msgid "The *repr()* of zero-valued flags has changed.  It is now::"
msgstr ""

msgid ""
"*IntFlag* is the same as *Flag*, but its members are also integers and can "
"be used anywhere that an integer can be used."
msgstr ""

msgid ""
"If any integer operation is performed with an *IntFlag* member, the result "
"is not an *IntFlag*::"
msgstr ""

msgid "If a *Flag* operation is performed with an *IntFlag* member and:"
msgstr ""

msgid "the result is a valid *IntFlag*: an *IntFlag* is returned"
msgstr ""

msgid ""
"the result is not a valid *IntFlag*: the result depends on the "
"*FlagBoundary* setting"
msgstr ""

msgid "The *repr()* of unnamed zero-valued flags has changed.  It is now:"
msgstr ""

msgid ""
"Using :class:`auto` with :class:`IntFlag` results in integers that are "
"powers of two, starting with ``1``."
msgstr ""

msgid ""
":class:`!ReprEum` uses the :meth:`repr() <Enum.__repr__>` of :class:`Enum`, "
"but the :class:`str() <str>` of the mixed-in data type:"
msgstr ""

msgid ":meth:`!int.__str__` for :class:`IntEnum` and :class:`IntFlag`"
msgstr ""

msgid ":meth:`!str.__str__` for :class:`StrEnum`"
msgstr ""

msgid ""
"Inherit from :class:`!ReprEnum` to keep the :class:`str() <str> / :func:"
"`format` of the mixed-in data type instead of using the :class:`Enum`-"
"default :meth:`str() <Enum.__str__>`."
msgstr ""

msgid ""
"*EnumCheck* contains the options used by the :func:`verify` decorator to "
"ensure various constraints; failed constraints result in a :exc:`ValueError`."
msgstr ""

msgid "Ensure that each value has only one name::"
msgstr ""

msgid ""
"Ensure that there are no missing values between the lowest-valued member and "
"the highest-valued member::"
msgstr ""

msgid ""
"Ensure that any flag groups/masks contain only named flags -- useful when "
"values are specified instead of being generated by :func:`auto`"
msgstr ""

msgid ""
"CONTINUOUS and NAMED_FLAGS are designed to work with integer-valued members."
msgstr ""

msgid ""
"*FlagBoundary* controls how out-of-range values are handled in *Flag* and "
"its subclasses."
msgstr ""

msgid ""
"Out-of-range values cause a :exc:`ValueError` to be raised.  This is the "
"default for :class:`Flag`::"
msgstr ""

msgid ""
"Out-of-range values have invalid values removed, leaving a valid *Flag* "
"value::"
msgstr ""

msgid ""
"Out-of-range values lose their *Flag* membership and revert to :class:`int`. "
"This is the default for :class:`IntFlag`::"
msgstr ""

msgid ""
"Out-of-range values are kept, and the *Flag* membership is kept.  This is "
"used for some stdlib flags:"
msgstr ""

msgid "Supported ``__dunder__`` names"
msgstr "Підтримувані імена ``__dunder__``"

msgid ""
":attr:`__members__` is a read-only ordered mapping of ``member_name``:"
"``member`` items.  It is only available on the class."
msgstr ""
":attr:`__members__` — це впорядковане зіставлення елементів ``member_name``:"
"``member`` лише для читання. Це доступно лише в класі."

msgid ""
":meth:`__new__`, if specified, must create and return the enum members; it "
"is also a very good idea to set the member's :attr:`_value_` appropriately.  "
"Once all the members are created it is no longer used."
msgstr ""
":meth:`__new__`, якщо вказано, має створити та повернути члени enum; також "
"дуже гарна ідея належним чином встановити :attr:`_value_` члена. Після "
"створення всіх учасників він більше не використовується."

msgid "Supported ``_sunder_`` names"
msgstr "Підтримувані імена ``_sunder_``"

msgid "``_name_`` -- name of the member"
msgstr "``_name_`` -- ім'я учасника"

msgid ""
"``_value_`` -- value of the member; can be set / modified in ``__new__``"
msgstr "``_value_`` -- значення члена; можна встановити/змінити в ``__new__``"

msgid ""
"``_missing_`` -- a lookup function used when a value is not found; may be "
"overridden"
msgstr ""
"``_missing_`` -- функція пошуку, яка використовується, коли значення не "
"знайдено; може бути перевизначено"

msgid ""
"``_ignore_`` -- a list of names, either as a :class:`list` or a :class:"
"`str`, that will not be transformed into members, and will be removed from "
"the final class"
msgstr ""
"``_ignore_`` -- список імен у вигляді :class:`list` або :class:`str`, які не "
"будуть перетворені в члени та будуть видалені з остаточного класу"

msgid ""
"``_order_`` -- used in Python 2/3 code to ensure member order is consistent "
"(class attribute, removed during class creation)"
msgstr ""
"``_order_`` -- використовується в коді Python 2/3 для забезпечення "
"узгодженості порядку членів (атрибут класу, видалений під час створення "
"класу)"

msgid ""
"``_generate_next_value_`` -- used to get an appropriate value for an enum "
"member; may be overridden"
msgstr ""

msgid ""
"For standard :class:`Enum` classes the next value chosen is the last value "
"seen incremented by one."
msgstr ""
"Для стандартних класів :class:`Enum` наступним вибраним значенням є останнє "
"значення, збільшене на одиницю."

msgid ""
"For :class:`Flag` classes the next value chosen will be the next highest "
"power-of-two, regardless of the last value seen."
msgstr ""
"Для класів :class:`Flag` наступним вибраним значенням буде наступний "
"найвищий ступінь двох, незалежно від останнього побаченого значення."

msgid "``_missing_``, ``_order_``, ``_generate_next_value_``"
msgstr "``_missing_``, ``_order_``, ``_generate_next_value_``"

msgid "``_ignore_``"
msgstr "``_ігнорувати_``"

msgid "Utilities and Decorators"
msgstr ""

msgid ""
"*auto* can be used in place of a value.  If used, the *Enum* machinery will "
"call an *Enum*'s :meth:`_generate_next_value_` to get an appropriate value. "
"For *Enum* and *IntEnum* that appropriate value will be the last value plus "
"one; for *Flag* and *IntFlag* it will be the first power-of-two greater than "
"the last value; for *StrEnum* it will be the lower-cased version of the "
"member's name.  Care must be taken if mixing *auto()* with manually "
"specified values."
msgstr ""

msgid ""
"*auto* instances are only resolved when at the top level of an assignment:"
msgstr ""

msgid "``FIRST = auto()`` will work (auto() is replaced with ``1``);"
msgstr ""

msgid ""
"``SECOND = auto(), -2`` will work (auto is replaced with ``2``, so ``2, -2`` "
"is"
msgstr ""

msgid "used to create the ``SECOND`` enum member;"
msgstr ""

msgid ""
"``THREE = [auto(), -3]`` will *not* work (``<auto instance>, -3`` is used to "
"create the ``THREE`` enum member)"
msgstr ""

msgid ""
"``_generate_next_value_`` can be overridden to customize the values used by "
"*auto*."
msgstr ""

msgid ""
"in 3.13 the default ``\"generate_next_value_`` will always return the "
"highest member value incremented by 1, and will fail if any member is an "
"incompatible type."
msgstr ""

msgid ""
"A decorator similar to the built-in *property*, but specifically for "
"enumerations.  It allows member attributes to have the same names as members "
"themselves."
msgstr ""

msgid ""
"the *property* and the member must be defined in separate classes; for "
"example, the *value* and *name* attributes are defined in the *Enum* class, "
"and *Enum* subclasses can define members with the names ``value`` and "
"``name``."
msgstr ""

msgid ""
"A :keyword:`class` decorator specifically for enumerations.  It searches an "
"enumeration's :attr:`__members__`, gathering any aliases it finds; if any "
"are found :exc:`ValueError` is raised with the details::"
msgstr ""

msgid ""
"A :keyword:`class` decorator specifically for enumerations.  Members from :"
"class:`EnumCheck` are used to specify which constraints should be checked on "
"the decorated enumeration."
msgstr ""

msgid "A decorator for use in enums: its target will become a member."
msgstr ""

msgid "A decorator for use in enums: its target will not become a member."
msgstr ""

msgid ""
"A decorator to change the :class:`str() <str>` and :func:`repr` of an enum "
"to show its members as belonging to the module instead of its class. Should "
"only be used when the enum members are exported to the module global "
"namespace (see :class:`re.RegexFlag` for an example)."
msgstr ""

msgid "Return a list of all power-of-two integers contained in a flag *value*."
msgstr ""

msgid "Notes"
msgstr "Примітки"

msgid ":class:`IntEnum`, :class:`StrEnum`, and :class:`IntFlag`"
msgstr ""

msgid ""
"These three enum types are designed to be drop-in replacements for existing "
"integer- and string-based values; as such, they have extra limitations:"
msgstr ""

msgid "``__str__`` uses the value and not the name of the enum member"
msgstr ""

msgid ""
"``__format__``, because it uses ``__str__``, will also use the value of the "
"enum member instead of its name"
msgstr ""

msgid ""
"If you do not need/want those limitations, you can either create your own "
"base class by mixing in the ``int`` or ``str`` type yourself::"
msgstr ""

msgid "or you can reassign the appropriate :meth:`str`, etc., in your enum::"
msgstr ""
