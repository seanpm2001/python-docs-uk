# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Stanislav Silin, 2022
# Taras Kuzyo <kuzyo.taras@gmail.com>, 2022
# Vadim Kashirny, 2022
# Dmytro Kazanzhy, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-12 16:28+0000\n"
"PO-Revision-Date: 2021-06-28 00:47+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://www.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

msgid "Glossary"
msgstr "Глосарій"

msgid "``>>>``"
msgstr "``>>>``"

msgid ""
"The default Python prompt of the interactive shell.  Often seen for code "
"examples which can be executed interactively in the interpreter."
msgstr ""
"Типова позначка в інтерактивнії оболонці Python-у. Часто зустрічається разом "
"з прикладами коду, які можна інтерактивно запустити в інтерпретаторі."

msgid "``...``"
msgstr "``...``"

msgid "Can refer to:"
msgstr "Може посилатися на:"

msgid ""
"The default Python prompt of the interactive shell when entering the code "
"for an indented code block, when within a pair of matching left and right "
"delimiters (parentheses, square brackets, curly braces or triple quotes), or "
"after specifying a decorator."
msgstr ""
"Типова позначка в інтерактивній оболонці Python. Застосовується підчас "
"написання коду з відступами, в межах пари відповідних лівих і правих "
"роздільників (дужки, квадратні дужки, фігурні або потрійні лапки) або після "
"декоратора."

msgid "The :const:`Ellipsis` built-in constant."
msgstr "Вбудована константа :const:`Ellipsis`."

msgid "2to3"
msgstr "2to3"

msgid ""
"A tool that tries to convert Python 2.x code to Python 3.x code by handling "
"most of the incompatibilities which can be detected by parsing the source "
"and traversing the parse tree."
msgstr ""
"Інструмент, який намагається перетворити код Python 2.x на код Python 3.x, "
"обробляючи більшість несумісностей, які можна виявити шляхом розбору "
"синтаксичного дерева."

msgid ""
"2to3 is available in the standard library as :mod:`lib2to3`; a standalone "
"entry point is provided as :file:`Tools/scripts/2to3`.  See :ref:`2to3-"
"reference`."
msgstr ""
"2to3 знаходиться в стандартній бібліотеці як :mod:`lib2to3`; точка входу має "
"вигляд :file:`Tools/scripts/2to3`. Перегляньте :ref:`2to3-reference`."

msgid "abstract base class"
msgstr "абстрактний базовий клас"

msgid ""
"Abstract base classes complement :term:`duck-typing` by providing a way to "
"define interfaces when other techniques like :func:`hasattr` would be clumsy "
"or subtly wrong (for example with :ref:`magic methods <special-lookup>`).  "
"ABCs introduce virtual subclasses, which are classes that don't inherit from "
"a class but are still recognized by :func:`isinstance` and :func:"
"`issubclass`; see the :mod:`abc` module documentation.  Python comes with "
"many built-in ABCs for data structures (in the :mod:`collections.abc` "
"module), numbers (in the :mod:`numbers` module), streams (in the :mod:`io` "
"module), import finders and loaders (in the :mod:`importlib.abc` module).  "
"You can create your own ABCs with the :mod:`abc` module."
msgstr ""
"Абстрактні базові класи доповнюють :term:`duck-typing`, надаючи спосіб для "
"визначення інтерфейсів, коли інші методи, такі як :func:`hasattr`, були б "
"незручними або дещо неправильними (наприклад, з :ref:`магічними методами "
"<special-lookup>`). ABC вводить віртуальні підкласи, що є класами, які не "
"успадковуються від класу, але все ще можуть розпізнватися за допомогою :func:"
"`isinstance` та :func:`issubclass`; дивіться документацію модуля :mod:`abc`. "
"Python має багато вбудованх ABC для різних структур(у модулі :mod:"
"`collections.abc`), чисел (у модулі :mod:`numbers`), потоків (у модулі :mod:"
"`io`) , шукачів імпортів і завантажувачів (у модулі :mod:`importlib.abc`). "
"Ви можете створювати власні азбуки за допомогою модуля :mod:`abc`."

msgid "annotation"
msgstr "анотація"

msgid ""
"A label associated with a variable, a class attribute or a function "
"parameter or return value, used by convention as a :term:`type hint`."
msgstr ""
"Мітка, пов’язана зі змінною, атрибутом класу або параметром функції чи "
"результатом функції, застосовується за конвенцією як :term:`type hint`."

msgid ""
"Annotations of local variables cannot be accessed at runtime, but "
"annotations of global variables, class attributes, and functions are stored "
"in the :attr:`__annotations__` special attribute of modules, classes, and "
"functions, respectively."
msgstr ""
"Анотації локальних змінних недоступні під час виконання, але анотації "
"глобальних змінних, атрибутів класів і функцій зберігаються в спеціальному "
"атрибуті :attr:`__annotations__` модулів, класів і функцій відповідно."

msgid ""
"See :term:`variable annotation`, :term:`function annotation`, :pep:`484` "
"and :pep:`526`, which describe this functionality. Also see :ref:"
"`annotations-howto` for best practices on working with annotations."
msgstr ""
"Перегляньте :term:`variable annotation`, :term:`function annotation`, :pep:"
"`484` та :pep:`526`, які описують цю функціональність. Також перегляньте :"
"ref:`annotations-howto`, щоб дізнатися про найкращі практики роботи з "
"анотаціями."

msgid "argument"
msgstr "аргумент"

msgid ""
"A value passed to a :term:`function` (or :term:`method`) when calling the "
"function.  There are two kinds of argument:"
msgstr ""
"Значення, яке передається :term:`function` (або :term:`method`) під час "
"виклику функції. Існує два види аргументів:"

msgid ""
":dfn:`keyword argument`: an argument preceded by an identifier (e.g. "
"``name=``) in a function call or passed as a value in a dictionary preceded "
"by ``**``.  For example, ``3`` and ``5`` are both keyword arguments in the "
"following calls to :func:`complex`::"
msgstr ""
":dfn:`keyword argument`: аргумент, якому передує ідентифікатор (наприклад, "
"``name=``) під час виклику функції або передається як значення в словнику "
"перед яким ``**``. Наприклад, ``3`` і ``5`` є ключовими аргументами в "
"наступних викликах :func:`complex`::"

msgid ""
":dfn:`positional argument`: an argument that is not a keyword argument. "
"Positional arguments can appear at the beginning of an argument list and/or "
"be passed as elements of an :term:`iterable` preceded by ``*``. For example, "
"``3`` and ``5`` are both positional arguments in the following calls::"
msgstr ""
":dfn:`positional argument`: аргумент, який не є аргументом ключового слова. "
"Позиційні аргументи можуть з’являтися на початку списку аргументів і/або "
"передаватися як елементи :term:`iterable`, яким передує ``*``. Наприклад, "
"``3`` і ``5`` є позиційними аргументами в наступних викликах:"

msgid ""
"Arguments are assigned to the named local variables in a function body. See "
"the :ref:`calls` section for the rules governing this assignment. "
"Syntactically, any expression can be used to represent an argument; the "
"evaluated value is assigned to the local variable."
msgstr ""
"Аргументи призначаються названим локальним змінним у тілі функції. "
"Перегляньте розділ :ref:`calls` для правил, що регулюють це призначення. "
"Синтаксично будь-який вираз можна використовувати для представлення "
"аргументу; обчислене значення присвоюється локальній змінній."

msgid ""
"See also the :term:`parameter` glossary entry, the FAQ question on :ref:`the "
"difference between arguments and parameters <faq-argument-vs-parameter>`, "
"and :pep:`362`."
msgstr ""
"Дивіться також :term:`parameter` глосарій, питання FAQ про :ref:`різницю між "
"аргументами та параметрами <faq-argument-vs-parameter>`, і :pep:`362`."

msgid "asynchronous context manager"
msgstr "менеджер асинхронного контексту"

msgid ""
"An object which controls the environment seen in an :keyword:`async with` "
"statement by defining :meth:`__aenter__` and :meth:`__aexit__` methods.  "
"Introduced by :pep:`492`."
msgstr ""
"Об’єкт, який керує середовищем, видимим у операторі :keyword:`async with`, "
"визначаючи методи :meth:`__aenter__` і :meth:`__aexit__`. Представлений :pep:"
"`492`."

msgid "asynchronous generator"
msgstr "асинхронний генератор"

msgid ""
"A function which returns an :term:`asynchronous generator iterator`.  It "
"looks like a coroutine function defined with :keyword:`async def` except "
"that it contains :keyword:`yield` expressions for producing a series of "
"values usable in an :keyword:`async for` loop."
msgstr ""
"Функція, яка повертає :term:`asynchronous generator iterator`. Це виглядає "
"як функція співпрограми, визначена за допомогою :keyword:`async def`, за "
"винятком того, що вона містить вирази :keyword:`yield` для створення серії "
"значень, які можна використовувати в циклі :keyword:`async for`."

msgid ""
"Usually refers to an asynchronous generator function, but may refer to an "
"*asynchronous generator iterator* in some contexts.  In cases where the "
"intended meaning isn't clear, using the full terms avoids ambiguity."
msgstr ""
"Зазвичай відноситься до функції асинхронного генератора, але в деяких "
"контекстах може посилатися на *ітератор асинхронного генератора*. У "
"випадках, коли передбачуване значення не є зрозумілим, використання повних "
"термінів дозволяє уникнути двозначності."

msgid ""
"An asynchronous generator function may contain :keyword:`await` expressions "
"as well as :keyword:`async for`, and :keyword:`async with` statements."
msgstr ""
"Функція асинхронного генератора може містити вирази :keyword:`await`, а "
"також оператори :keyword:`async for` і :keyword:`async with`."

msgid "asynchronous generator iterator"
msgstr "ітератор асинхронного генератора"

msgid "An object created by a :term:`asynchronous generator` function."
msgstr "Об’єкт, створений функцією :term:`asynchronous generator`."

msgid ""
"This is an :term:`asynchronous iterator` which when called using the :meth:"
"`__anext__` method returns an awaitable object which will execute the body "
"of the asynchronous generator function until the next :keyword:`yield` "
"expression."
msgstr ""
"Це :term:`asynchronous iterator`, який під час виклику за допомогою методу :"
"meth:`__anext__` повертає очікуваний об’єкт, який виконуватиме тіло функції "
"асинхронного генератора до наступного виразу :keyword:`yield`."

msgid ""
"Each :keyword:`yield` temporarily suspends processing, remembering the "
"location execution state (including local variables and pending try-"
"statements).  When the *asynchronous generator iterator* effectively resumes "
"with another awaitable returned by :meth:`__anext__`, it picks up where it "
"left off.  See :pep:`492` and :pep:`525`."
msgstr ""
"Кожен :keyword:`yield` тимчасово призупиняє обробку, запам’ятовуючи стан "
"виконання розташування (включно з локальними змінними та очікуваними "
"операторами спроби). Коли *ітератор асинхронного генератора* фактично "
"продовжує роботу з іншим очікуванням, повернутим :meth:`__anext__`, він "
"продовжує роботу з того місця, де зупинився. Дивіться :pep:`492` і :pep:"
"`525`."

msgid "asynchronous iterable"
msgstr "асинхронний ітерований"

msgid ""
"An object, that can be used in an :keyword:`async for` statement. Must "
"return an :term:`asynchronous iterator` from its :meth:`__aiter__` method.  "
"Introduced by :pep:`492`."
msgstr ""
"Об’єкт, який можна використовувати в операторі :keyword:`async for`. Повинен "
"повертати :term:`asynchronous iterator` зі свого методу :meth:`__aiter__`. "
"Представлений :pep:`492`."

msgid "asynchronous iterator"
msgstr "асинхронний ітератор"

msgid ""
"An object that implements the :meth:`__aiter__` and :meth:`__anext__` "
"methods.  ``__anext__`` must return an :term:`awaitable` object. :keyword:"
"`async for` resolves the awaitables returned by an asynchronous iterator's :"
"meth:`__anext__` method until it raises a :exc:`StopAsyncIteration` "
"exception.  Introduced by :pep:`492`."
msgstr ""
"Об’єкт, який реалізує методи :meth:`__aiter__` і :meth:`__anext__`. "
"``__anext__`` має повертати об’єкт :term:`awaitable`. :keyword:`async for` "
"вирішує очікувані значення, які повертає метод :meth:`__anext__` "
"асинхронного ітератора, доки він не спричинить виняткову ситуацію :exc:"
"`StopAsyncIteration`. Представлений :pep:`492`."

msgid "attribute"
msgstr "атрибут"

msgid ""
"A value associated with an object which is usually referenced by name using "
"dotted expressions. For example, if an object *o* has an attribute *a* it "
"would be referenced as *o.a*."
msgstr ""

msgid ""
"It is possible to give an object an attribute whose name is not an "
"identifier as defined by :ref:`identifiers`, for example using :func:"
"`setattr`, if the object allows it. Such an attribute will not be accessible "
"using a dotted expression, and would instead need to be retrieved with :func:"
"`getattr`."
msgstr ""

msgid "awaitable"
msgstr "очікуваний"

msgid ""
"An object that can be used in an :keyword:`await` expression.  Can be a :"
"term:`coroutine` or an object with an :meth:`__await__` method. See also :"
"pep:`492`."
msgstr ""
"Об’єкт, який можна використовувати у виразі :keyword:`await`. Може бути :"
"term:`coroutine` або об’єктом з методом :meth:`__await__`. Дивіться також :"
"pep:`492`."

msgid "BDFL"
msgstr "BDFL"

msgid ""
"Benevolent Dictator For Life, a.k.a. `Guido van Rossum <https://gvanrossum."
"github.io/>`_, Python's creator."
msgstr ""
"Доброзичливий диктатор на все життя (BDFL - Benevolent Dictator For Life), "
"також відомий як `Гвідо ван Россум <https://gvanrossum.github.io/>`_, "
"творець Python."

msgid "binary file"
msgstr "двійковий файл"

msgid ""
"A :term:`file object` able to read and write :term:`bytes-like objects "
"<bytes-like object>`. Examples of binary files are files opened in binary "
"mode (``'rb'``, ``'wb'`` or ``'rb+'``), :data:`sys.stdin.buffer`, :data:`sys."
"stdout.buffer`, and instances of :class:`io.BytesIO` and :class:`gzip."
"GzipFile`."
msgstr ""
":term:`file object`, здатний читати та записувати :term:`байтоподібні "
"об’єкти <bytes-like object>`. Прикладами двійкових файлів є файли, відкриті "
"у двійковому режимі (``'rb'``, ``'wb'`` або ``'rb+'``), :data:`sys.stdin."
"buffer`, :data:`sys.stdout.buffer` та екземпляри :class:`io.BytesIO` і :"
"class:`gzip.GzipFile`."

msgid ""
"See also :term:`text file` for a file object able to read and write :class:"
"`str` objects."
msgstr ""
"Дивіться також :term:`text file` для об’єкта файлу, здатного читати та "
"записувати об’єкти :class:`str`."

msgid "borrowed reference"
msgstr "запозичене посилання"

msgid ""
"In Python's C API, a borrowed reference is a reference to an object. It does "
"not modify the object reference count. It becomes a dangling pointer if the "
"object is destroyed. For example, a garbage collection can remove the last :"
"term:`strong reference` to the object and so destroy it."
msgstr ""
"В API C Python запозичене посилання є посиланням на об’єкт. Це не змінює "
"кількість посилань на об’єкт. Він стає висячим покажчиком, якщо об’єкт "
"знищено. Наприклад, збірка сміття може видалити останнє :term:`strong "
"reference` на об’єкт і таким чином знищити його."

msgid ""
"Calling :c:func:`Py_INCREF` on the :term:`borrowed reference` is recommended "
"to convert it to a :term:`strong reference` in-place, except when the object "
"cannot be destroyed before the last usage of the borrowed reference. The :c:"
"func:`Py_NewRef` function can be used to create a new :term:`strong "
"reference`."
msgstr ""
"Виклик :c:func:`Py_INCREF` для :term:`borrowed reference` рекомендовано для "
"перетворення його на :term:`strong reference` на місці, за винятком "
"випадків, коли об’єкт не можна знищити до останнього використання "
"запозиченого посилання. Функцію :c:func:`Py_NewRef` можна використати для "
"створення нового :term:`strong reference`."

msgid "bytes-like object"
msgstr "байтоподібний об'єкт"

msgid ""
"An object that supports the :ref:`bufferobjects` and can export a C-:term:"
"`contiguous` buffer. This includes all :class:`bytes`, :class:`bytearray`, "
"and :class:`array.array` objects, as well as many common :class:`memoryview` "
"objects.  Bytes-like objects can be used for various operations that work "
"with binary data; these include compression, saving to a binary file, and "
"sending over a socket."
msgstr ""
"Об’єкт, який підтримує :ref:`bufferobjects` і може експортувати буфер C-:"
"term:`contiguous`. Це включає всі об’єкти :class:`bytes`, :class:`bytearray` "
"і :class:`array.array`, а також багато поширених об’єктів :class:"
"`memoryview`. Байтоподібні об'єкти можна використовувати для різних "
"операцій, які працюють з двійковими даними; вони включають стиснення, "
"збереження у бінарний файл і надсилання через сокет."

msgid ""
"Some operations need the binary data to be mutable.  The documentation often "
"refers to these as \"read-write bytes-like objects\".  Example mutable "
"buffer objects include :class:`bytearray` and a :class:`memoryview` of a :"
"class:`bytearray`. Other operations require the binary data to be stored in "
"immutable objects (\"read-only bytes-like objects\"); examples of these "
"include :class:`bytes` and a :class:`memoryview` of a :class:`bytes` object."
msgstr ""
"Для деяких операцій двійкові дані повинні бути змінними. У документації вони "
"часто називаються \"байтоподібними об’єктами читання-запису\". Приклади "
"змінних буферних об’єктів включають :class:`bytearray` і :class:"
"`memoryview` :class:`bytearray`. Інші операції вимагають, щоб двійкові дані "
"зберігалися в незмінних об’єктах (\"байтоподібні об’єкти лише для "
"читання\"); прикладами таких є :class:`bytes` і :class:`memoryview` об’єкта :"
"class:`bytes`."

msgid "bytecode"
msgstr "байт-код"

msgid ""
"Python source code is compiled into bytecode, the internal representation of "
"a Python program in the CPython interpreter.  The bytecode is also cached in "
"``.pyc`` files so that executing the same file is faster the second time "
"(recompilation from source to bytecode can be avoided).  This \"intermediate "
"language\" is said to run on a :term:`virtual machine` that executes the "
"machine code corresponding to each bytecode. Do note that bytecodes are not "
"expected to work between different Python virtual machines, nor to be stable "
"between Python releases."
msgstr ""
"Вихідний код Python компілюється в байт-код, внутрішнє представлення "
"програми Python в інтерпретаторі CPython. Байт-код також кешується у файлах "
"``.pyc``, тому виконання того самого файлу відбувається швидше вдруге (можна "
"уникнути перекомпіляції з вихідного коду в байт-код). Кажуть, що ця "
"\"проміжна мова\" працює на :term:`virtual machine`, яка виконує машинний "
"код, що відповідає кожному байт-коду. Зауважте, що байт-коди не повинні "
"працювати між різними віртуальними машинами Python, а також бути стабільними "
"між випусками Python."

msgid ""
"A list of bytecode instructions can be found in the documentation for :ref:"
"`the dis module <bytecodes>`."
msgstr ""
"Список інструкцій байт-коду можна знайти в документації для :ref:`the dis "
"module <bytecodes>`."

msgid "callable"
msgstr "викликний"

msgid ""
"A callable is an object that can be called, possibly with a set of arguments "
"(see :term:`argument`), with the following syntax::"
msgstr ""

msgid ""
"A :term:`function`, and by extension a :term:`method`, is a callable. An "
"instance of a class that implements the :meth:`~object.__call__` method is "
"also a callable."
msgstr ""

msgid "callback"
msgstr "зворотній виклик"

msgid ""
"A subroutine function which is passed as an argument to be executed at some "
"point in the future."
msgstr ""
"Функція підпрограми, яка передається як аргумент для виконання в певний "
"момент у майбутньому."

msgid "class"
msgstr "клас"

msgid ""
"A template for creating user-defined objects. Class definitions normally "
"contain method definitions which operate on instances of the class."
msgstr ""
"Шаблон для створення користувальницьких об'єктів. Визначення класу зазвичай "
"містять визначення методів, які працюють над екземплярами класу."

msgid "class variable"
msgstr "змінна класу"

msgid ""
"A variable defined in a class and intended to be modified only at class "
"level (i.e., not in an instance of the class)."
msgstr ""
"Змінна, визначена в класі та призначена для зміни лише на рівні класу (тобто "
"не в екземплярі класу)."

msgid "complex number"
msgstr "комплексне число"

msgid ""
"An extension of the familiar real number system in which all numbers are "
"expressed as a sum of a real part and an imaginary part.  Imaginary numbers "
"are real multiples of the imaginary unit (the square root of ``-1``), often "
"written ``i`` in mathematics or ``j`` in engineering.  Python has built-in "
"support for complex numbers, which are written with this latter notation; "
"the imaginary part is written with a ``j`` suffix, e.g., ``3+1j``.  To get "
"access to complex equivalents of the :mod:`math` module, use :mod:`cmath`.  "
"Use of complex numbers is a fairly advanced mathematical feature.  If you're "
"not aware of a need for them, it's almost certain you can safely ignore them."
msgstr ""
"Розширення відомої дійсної системи числення, у якій усі числа виражаються як "
"сума дійсної та уявної частин. Уявні числа — це дійсні кратні уявної одиниці "
"(квадратного кореня з ``-1``), які часто пишуться ``i`` в математиці або "
"``j`` в інженерії. Python має вбудовану підтримку комплексних чисел, які "
"записуються з використанням цієї останньої нотації; уявна частина "
"записується з суфіксом ``j``, наприклад, ``3+1j``. Щоб отримати доступ до "
"комплексних еквівалентів модуля :mod:`math`, використовуйте :mod:`cmath`. "
"Використання комплексних чисел є досить просунутою математичною функцією. "
"Якщо ви не усвідомлюєте потреби в них, майже впевнено, що можете спокійно їх "
"ігнорувати."

msgid "context manager"
msgstr "контекстний менеджер"

msgid ""
"An object which controls the environment seen in a :keyword:`with` statement "
"by defining :meth:`__enter__` and :meth:`__exit__` methods. See :pep:`343`."
msgstr ""
"Об’єкт, який керує середовищем, видимим у операторі :keyword:`with`, шляхом "
"визначення методів :meth:`__enter__` і :meth:`__exit__`. Дивіться :pep:`343`."

msgid "context variable"
msgstr "контекстна змінна"

msgid ""
"A variable which can have different values depending on its context. This is "
"similar to Thread-Local Storage in which each execution thread may have a "
"different value for a variable. However, with context variables, there may "
"be several contexts in one execution thread and the main usage for context "
"variables is to keep track of variables in concurrent asynchronous tasks. "
"See :mod:`contextvars`."
msgstr ""
"Змінна, яка може мати різні значення залежно від контексту. Це схоже на "
"Thread-Local Storage, у якому кожен потік виконання може мати різне значення "
"для змінної. Однак із змінними контексту в одному потоці виконання може бути "
"кілька контекстів, і основне використання змінних контексту — це відстеження "
"змінних у паралельних асинхронних завданнях. Див. :mod:`contextvars`."

msgid "contiguous"
msgstr "суміжний"

msgid ""
"A buffer is considered contiguous exactly if it is either *C-contiguous* or "
"*Fortran contiguous*.  Zero-dimensional buffers are C and Fortran "
"contiguous.  In one-dimensional arrays, the items must be laid out in memory "
"next to each other, in order of increasing indexes starting from zero.  In "
"multidimensional C-contiguous arrays, the last index varies the fastest when "
"visiting items in order of memory address.  However, in Fortran contiguous "
"arrays, the first index varies the fastest."
msgstr ""
"Буфер вважається безперервним, якщо він *C-суміжний* або *Fortran "
"безперервний*. Нульвимірні буфери є суміжними на C і Fortran. В одновимірних "
"масивах елементи повинні розташовуватися в пам’яті поруч один з одним у "
"порядку зростання індексів, починаючи з нуля. У багатовимірних C-суміжних "
"масивах останній індекс змінюється найшвидше під час відвідування елементів "
"у порядку адреси пам’яті. Однак у безперервних масивах Fortran перший індекс "
"змінюється найшвидше."

msgid "coroutine"
msgstr "співпрограма"

msgid ""
"Coroutines are a more generalized form of subroutines. Subroutines are "
"entered at one point and exited at another point.  Coroutines can be "
"entered, exited, and resumed at many different points.  They can be "
"implemented with the :keyword:`async def` statement.  See also :pep:`492`."
msgstr ""
"Співпрограми є більш узагальненою формою підпрограм. Підпрограми вводяться в "
"одній точці і виходять з іншої. У співпрограми можна ввійти, вийти з них і "
"відновити їх у багатьох різних точках. Їх можна реалізувати за допомогою "
"оператора :keyword:`async def`. Дивіться також :pep:`492`."

msgid "coroutine function"
msgstr "функція співпрограми"

msgid ""
"A function which returns a :term:`coroutine` object.  A coroutine function "
"may be defined with the :keyword:`async def` statement, and may contain :"
"keyword:`await`, :keyword:`async for`, and :keyword:`async with` keywords.  "
"These were introduced by :pep:`492`."
msgstr ""
"Функція, яка повертає об’єкт :term:`coroutine`. Функція співпрограми може "
"бути визначена оператором :keyword:`async def` і може містити ключові слова :"
"keyword:`await`, :keyword:`async for` і :keyword:`async with`. Їх "
"представив :pep:`492`."

msgid "CPython"
msgstr "CPython"

msgid ""
"The canonical implementation of the Python programming language, as "
"distributed on `python.org <https://www.python.org>`_.  The term \"CPython\" "
"is used when necessary to distinguish this implementation from others such "
"as Jython or IronPython."
msgstr ""
"Канонічна реалізація мови програмування Python, яка розповсюджується на "
"`python.org <https://www.python.org>`_. Термін \"CPython\" використовується, "
"коли необхідно відрізнити цю реалізацію від інших, таких як Jython або "
"IronPython."

msgid "decorator"
msgstr "декоратор"

msgid ""
"A function returning another function, usually applied as a function "
"transformation using the ``@wrapper`` syntax.  Common examples for "
"decorators are :func:`classmethod` and :func:`staticmethod`."
msgstr ""
"Функція, що повертає іншу функцію, зазвичай застосовується як перетворення "
"функції за допомогою синтаксису ``@wrapper``. Типовими прикладами для "
"декораторів є :func:`classmethod` і :func:`staticmethod`."

msgid ""
"The decorator syntax is merely syntactic sugar, the following two function "
"definitions are semantically equivalent::"
msgstr ""
"Синтаксис декоратора є просто синтаксичним цукром, наступні два визначення "
"функції семантично еквівалентні:"

msgid ""
"The same concept exists for classes, but is less commonly used there.  See "
"the documentation for :ref:`function definitions <function>` and :ref:`class "
"definitions <class>` for more about decorators."
msgstr ""
"Така сама концепція існує для класів, але використовується там рідше. "
"Перегляньте документацію щодо :ref:`визначення функцій <function>` та :ref:"
"`визначення класів <class>`, щоб дізнатися більше про декоратори."

msgid "descriptor"
msgstr "дескриптор"

msgid ""
"Any object which defines the methods :meth:`__get__`, :meth:`__set__`, or :"
"meth:`__delete__`.  When a class attribute is a descriptor, its special "
"binding behavior is triggered upon attribute lookup.  Normally, using *a.b* "
"to get, set or delete an attribute looks up the object named *b* in the "
"class dictionary for *a*, but if *b* is a descriptor, the respective "
"descriptor method gets called.  Understanding descriptors is a key to a deep "
"understanding of Python because they are the basis for many features "
"including functions, methods, properties, class methods, static methods, and "
"reference to super classes."
msgstr ""
"Будь-який об’єкт, який визначає методи :meth:`__get__`, :meth:`__set__` або :"
"meth:`__delete__`. Коли атрибут класу є дескриптором, його спеціальна "
"поведінка зв’язування запускається під час пошуку атрибута. Зазвичай "
"використання *a.b* для отримання, встановлення або видалення атрибута шукає "
"об’єкт з іменем *b* у словнику класу для *a*, але якщо *b* є дескриптором, "
"викликається відповідний метод дескриптора. Розуміння дескрипторів є ключем "
"до глибокого розуміння Python, оскільки вони є основою для багатьох функцій, "
"включаючи функції, методи, властивості, методи класу, статичні методи та "
"посилання на суперкласи."

msgid ""
"For more information about descriptors' methods, see :ref:`descriptors` or "
"the :ref:`Descriptor How To Guide <descriptorhowto>`."
msgstr ""
"Для отримання додаткової інформації про методи дескрипторів див. :ref:"
"`descriptors` або :ref:`Посібник з використання дескрипторів "
"<descriptorhowto>`."

msgid "dictionary"
msgstr "словник"

msgid ""
"An associative array, where arbitrary keys are mapped to values.  The keys "
"can be any object with :meth:`__hash__` and :meth:`__eq__` methods. Called a "
"hash in Perl."
msgstr ""
"Асоціативний масив, де довільні ключі зіставляються зі значеннями. Ключами "
"можуть бути будь-які об’єкти з методами :meth:`__hash__` і :meth:`__eq__`. "
"Називається хешем у Perl."

msgid "dictionary comprehension"
msgstr "dictionary comprehension"

msgid ""
"A compact way to process all or part of the elements in an iterable and "
"return a dictionary with the results. ``results = {n: n ** 2 for n in "
"range(10)}`` generates a dictionary containing key ``n`` mapped to value ``n "
"** 2``. See :ref:`comprehensions`."
msgstr ""
"Компактний спосіб обробки всіх або частини елементів у ітерації та "
"повернення словника з результатами. ``results = {n: n ** 2 for n in "
"range(10)}`` генерує словник, що містить ключ ``n``, зіставлений зі "
"значенням ``n ** 2``. Дивіться :ref:`comprehensions`."

msgid "dictionary view"
msgstr "перегляд словника"

msgid ""
"The objects returned from :meth:`dict.keys`, :meth:`dict.values`, and :meth:"
"`dict.items` are called dictionary views. They provide a dynamic view on the "
"dictionary’s entries, which means that when the dictionary changes, the view "
"reflects these changes. To force the dictionary view to become a full list "
"use ``list(dictview)``.  See :ref:`dict-views`."
msgstr ""
"Об’єкти, що повертаються з :meth:`dict.keys`, :meth:`dict.values` і :meth:"
"`dict.items`, називаються представленнями словника. Вони забезпечують "
"динамічний перегляд словникових статей, що означає, що коли словник "
"змінюється, перегляд відображає ці зміни. Щоб змусити перегляд словника "
"стати повним списком, використовуйте ``list(dictview)``. Перегляньте :ref:"
"`dict-views`."

msgid "docstring"
msgstr "рядок документації"

msgid ""
"A string literal which appears as the first expression in a class, function "
"or module.  While ignored when the suite is executed, it is recognized by "
"the compiler and put into the :attr:`__doc__` attribute of the enclosing "
"class, function or module.  Since it is available via introspection, it is "
"the canonical place for documentation of the object."
msgstr ""
"Рядковий літерал, який з’являється як перший вираз у класі, функції чи "
"модулі. Хоча ігнорується, коли набір виконується, він розпізнається "
"компілятором і поміщається в атрибут :attr:`__doc__` класу, функції або "
"модуля, що містить. Оскільки він доступний через самоаналіз, це канонічне "
"місце для документування об’єкта."

msgid "duck-typing"
msgstr "Качина типізація"

msgid ""
"A programming style which does not look at an object's type to determine if "
"it has the right interface; instead, the method or attribute is simply "
"called or used (\"If it looks like a duck and quacks like a duck, it must be "
"a duck.\")  By emphasizing interfaces rather than specific types, well-"
"designed code improves its flexibility by allowing polymorphic "
"substitution.  Duck-typing avoids tests using :func:`type` or :func:"
"`isinstance`.  (Note, however, that duck-typing can be complemented with :"
"term:`abstract base classes <abstract base class>`.)  Instead, it typically "
"employs :func:`hasattr` tests or :term:`EAFP` programming."
msgstr ""
"Стиль програмування, який не дивиться на тип об’єкта, щоб визначити, чи має "
"він правильний інтерфейс; замість цього метод або атрибут просто "
"викликається або використовується (\"Якщо він схожий на качку і крякає як "
"качка, це має бути качка\".) Підкреслюючи інтерфейси, а не конкретні типи, "
"добре розроблений код покращує свою гнучкість, дозволяючи поліморфне "
"заміщення. Duck-введення дозволяє уникнути тестів з використанням :func:"
"`type` або :func:`isinstance`. (Однак зауважте, що качиний тип може бути "
"доповнений :term:`абстрактними базовими класами <abstract base class>`.) "
"Замість цього зазвичай використовуються :func:`hasattr` тести або :term:"
"`EAFP` програмування."

msgid "EAFP"
msgstr "EAFP"

msgid ""
"Easier to ask for forgiveness than permission.  This common Python coding "
"style assumes the existence of valid keys or attributes and catches "
"exceptions if the assumption proves false.  This clean and fast style is "
"characterized by the presence of many :keyword:`try` and :keyword:`except` "
"statements.  The technique contrasts with the :term:`LBYL` style common to "
"many other languages such as C."
msgstr ""
"Легше попросити вибачення, ніж дозволу (Easier to ask for forgiveness than "
"permission). Цей поширений стиль кодування Python припускає існування "
"дійсних ключів або атрибутів і перехоплює винятки, якщо припущення виявиться "
"хибним. Цей чистий і швидкий стиль характеризується наявністю багатьох "
"операторів :keyword:`try` і :keyword:`except`. Техніка контрастує зі стилем :"
"term:`LBYL`, поширеним у багатьох інших мовах, таких як C."

msgid "expression"
msgstr "вираз"

msgid ""
"A piece of syntax which can be evaluated to some value.  In other words, an "
"expression is an accumulation of expression elements like literals, names, "
"attribute access, operators or function calls which all return a value.  In "
"contrast to many other languages, not all language constructs are "
"expressions.  There are also :term:`statement`\\s which cannot be used as "
"expressions, such as :keyword:`while`.  Assignments are also statements, not "
"expressions."
msgstr ""
"Частина синтаксису, яка може бути оцінена до певного значення. Іншими "
"словами, вираз — це сукупність елементів виразу, таких як літерали, імена, "
"доступ до атрибутів, оператори або виклики функцій, які повертають значення. "
"На відміну від багатьох інших мов, не всі мовні конструкції є виразами. "
"Існують також :term:`statement`\\s, які не можна використовувати як вирази, "
"наприклад :keyword:`while`. Присвоєння також є операторами, а не виразами."

msgid "extension module"
msgstr "модуль розширення"

msgid ""
"A module written in C or C++, using Python's C API to interact with the core "
"and with user code."
msgstr ""
"Модуль, написаний мовою C або C++, який використовує C API Python для "
"взаємодії з ядром і кодом користувача."

msgid "f-string"
msgstr "f-рядок"

msgid ""
"String literals prefixed with ``'f'`` or ``'F'`` are commonly called \"f-"
"strings\" which is short for :ref:`formatted string literals <f-strings>`.  "
"See also :pep:`498`."
msgstr ""
"Рядкові літерали з префіксом ``'f'`` або ``'F'`` зазвичай називаються \"f-"
"рядками\", що є скороченням від :ref:`форматованих рядкових літералів <f-"
"strings>`. Дивіться також :pep:`498`."

msgid "file object"
msgstr "файловий об'єкт"

msgid ""
"An object exposing a file-oriented API (with methods such as :meth:`read()` "
"or :meth:`write()`) to an underlying resource.  Depending on the way it was "
"created, a file object can mediate access to a real on-disk file or to "
"another type of storage or communication device (for example standard input/"
"output, in-memory buffers, sockets, pipes, etc.).  File objects are also "
"called :dfn:`file-like objects` or :dfn:`streams`."
msgstr ""
"Об’єкт, що надає файлово-орієнтований API (з такими методами, як :meth:"
"`read()` або :meth:`write()`) базовому ресурсу. Залежно від способу його "
"створення, файловий об’єкт може бути посередником у доступі до реального "
"файлу на диску або до іншого типу пристрою зберігання чи зв’язку (наприклад, "
"стандартного введення/виведення, буферів у пам’яті, сокетів, каналів "
"тощо). . Файлові об’єкти також називаються :dfn:`файлоподібними об’єктами` "
"або :dfn:`streams`."

msgid ""
"There are actually three categories of file objects: raw :term:`binary files "
"<binary file>`, buffered :term:`binary files <binary file>` and :term:`text "
"files <text file>`. Their interfaces are defined in the :mod:`io` module.  "
"The canonical way to create a file object is by using the :func:`open` "
"function."
msgstr ""
"Фактично існує три категорії файлових об’єктів: необроблені :term:`бінарні "
"файли <binary file>`, буферизовані :term:`бінарні файли <binary file>` і :"
"term:`текстові файли <text file>`. Їхні інтерфейси визначені в модулі :mod:"
"`io`. Канонічний спосіб створення файлового об’єкта – це використання "
"функції :func:`open`."

msgid "file-like object"
msgstr "файлоподібний об'єкт"

msgid "A synonym for :term:`file object`."
msgstr "Синонім :term:`file object`."

msgid "filesystem encoding and error handler"
msgstr "кодування файлової системи та обробник помилок"

msgid ""
"Encoding and error handler used by Python to decode bytes from the operating "
"system and encode Unicode to the operating system."
msgstr ""
"Кодування та обробник помилок, які використовуються Python для декодування "
"байтів з операційної системи та кодування Unicode до операційної системи."

msgid ""
"The filesystem encoding must guarantee to successfully decode all bytes "
"below 128. If the file system encoding fails to provide this guarantee, API "
"functions can raise :exc:`UnicodeError`."
msgstr ""
"Кодування файлової системи має гарантувати успішне декодування всіх байтів "
"нижче 128. Якщо кодування файлової системи не забезпечує цю гарантію, "
"функції API можуть викликати :exc:`UnicodeError`."

msgid ""
"The :func:`sys.getfilesystemencoding` and :func:`sys."
"getfilesystemencodeerrors` functions can be used to get the filesystem "
"encoding and error handler."
msgstr ""
"Функції :func:`sys.getfilesystemencoding` і :func:`sys."
"getfilesystemencodeerrors` можна використовувати для отримання кодування "
"файлової системи та обробника помилок."

msgid ""
"The :term:`filesystem encoding and error handler` are configured at Python "
"startup by the :c:func:`PyConfig_Read` function: see :c:member:`~PyConfig."
"filesystem_encoding` and :c:member:`~PyConfig.filesystem_errors` members of :"
"c:type:`PyConfig`."
msgstr ""
":term:`filesystem encoding and error handler` налаштовуються під час запуску "
"Python за допомогою функції :c:func:`PyConfig_Read`: див. :c:member:"
"`~PyConfig.filesystem_encoding` і :c:member:`~PyConfig. filesystem_errors` "
"члени :c:type:`PyConfig`."

msgid "See also the :term:`locale encoding`."
msgstr "Дивіться також :term:`locale encoding`."

msgid "finder"
msgstr "шукач"

msgid ""
"An object that tries to find the :term:`loader` for a module that is being "
"imported."
msgstr ""
"Об’єкт, який намагається знайти :term:`loader` для модуля, який імпортується."

msgid ""
"Since Python 3.3, there are two types of finder: :term:`meta path finders "
"<meta path finder>` for use with :data:`sys.meta_path`, and :term:`path "
"entry finders <path entry finder>` for use with :data:`sys.path_hooks`."
msgstr ""
"Починаючи з Python 3.3, існує два типи шукачів: :term:`мета-шукачі шляху "
"<meta path finder>` для використання з :data:`sys.meta_path` та :term:"
"`шукачі шляхів <path entry finder>` для використання з :data:`sys ."
"path_hooks`."

msgid "See :pep:`302`, :pep:`420` and :pep:`451` for much more detail."
msgstr ""
"Перегляньте :pep:`302`, :pep:`420` і :pep:`451` для більш детальної "
"інформації."

msgid "floor division"
msgstr "поділ поверху"

msgid ""
"Mathematical division that rounds down to nearest integer.  The floor "
"division operator is ``//``.  For example, the expression ``11 // 4`` "
"evaluates to ``2`` in contrast to the ``2.75`` returned by float true "
"division.  Note that ``(-11) // 4`` is ``-3`` because that is ``-2.75`` "
"rounded *downward*. See :pep:`238`."
msgstr ""
"Математичне ділення, яке округлюється до найближчого цілого числа. Оператор "
"поділу підлоги – ``//``. Наприклад, вираз ``11 // 4`` обчислюється як ``2`` "
"на відміну від ``2,75``, яке повертає float true division. Зауважте, що "
"``(-11) // 4`` є ``-3``, тому що це ``-2,75``, округлене *униз*. Дивіться :"
"pep:`238`."

msgid "function"
msgstr "функція"

msgid ""
"A series of statements which returns some value to a caller. It can also be "
"passed zero or more :term:`arguments <argument>` which may be used in the "
"execution of the body. See also :term:`parameter`, :term:`method`, and the :"
"ref:`function` section."
msgstr ""
"Серія операторів, які повертають певне значення абоненту. Йому також можна "
"передати нуль або більше :term:`аргументів <argument>`, які можуть бути "
"використані під час виконання тіла. Дивіться також :term:`parameter`, :term:"
"`method` і розділ :ref:`function`."

msgid "function annotation"
msgstr "анотація функції"

msgid "An :term:`annotation` of a function parameter or return value."
msgstr ":term:`annotation` параметра функції або значення, що повертається."

msgid ""
"Function annotations are usually used for :term:`type hints <type hint>`: "
"for example, this function is expected to take two :class:`int` arguments "
"and is also expected to have an :class:`int` return value::"
msgstr ""
"Анотації функцій зазвичай використовуються для :term:`підказок типу <type "
"hint>`: наприклад, ця функція має приймати два аргументи :class:`int` і "
"також має повертати значення :class:`int`::"

msgid "Function annotation syntax is explained in section :ref:`function`."
msgstr "Синтаксис анотації функції пояснюється в розділі :ref:`function`."

msgid ""
"See :term:`variable annotation` and :pep:`484`, which describe this "
"functionality. Also see :ref:`annotations-howto` for best practices on "
"working with annotations."
msgstr ""
"Див. :term:`variable annotation` і :pep:`484`, які описують цю "
"функціональність. Також перегляньте :ref:`annotations-howto`, щоб дізнатися "
"про найкращі практики роботи з анотаціями."

msgid "__future__"
msgstr "__future__"

msgid ""
"A :ref:`future statement <future>`, ``from __future__ import <feature>``, "
"directs the compiler to compile the current module using syntax or semantics "
"that will become standard in a future release of Python. The :mod:"
"`__future__` module documents the possible values of *feature*.  By "
"importing this module and evaluating its variables, you can see when a new "
"feature was first added to the language and when it will (or did) become the "
"default::"
msgstr ""
":ref:`інструкція future <future>`, ``from __future__ import <feature>``, "
"вказує компілятору скомпілювати поточний модуль, використовуючи синтаксис "
"або семантику, які стануть стандартними в майбутньому випуску Python. "
"Модуль :mod:`__future__` документує можливі значення *feature*. Імпортувавши "
"цей модуль та оцінивши його змінні, ви можете побачити, коли нова функція "
"була вперше додана до мови та коли вона стане (або стала) типовою::"

msgid "garbage collection"
msgstr "збір сміття"

msgid ""
"The process of freeing memory when it is not used anymore.  Python performs "
"garbage collection via reference counting and a cyclic garbage collector "
"that is able to detect and break reference cycles.  The garbage collector "
"can be controlled using the :mod:`gc` module."
msgstr ""
"Процес звільнення пам'яті, коли вона більше не використовується. Python "
"виконує збирання сміття за допомогою підрахунку посилань і циклічного "
"збирача сміття, здатного виявляти та розривати цикли посилань. Збирачем "
"сміття можна керувати за допомогою модуля :mod:`gc`."

msgid "generator"
msgstr "генератор"

msgid ""
"A function which returns a :term:`generator iterator`.  It looks like a "
"normal function except that it contains :keyword:`yield` expressions for "
"producing a series of values usable in a for-loop or that can be retrieved "
"one at a time with the :func:`next` function."
msgstr ""
"Функція, яка повертає :term:`generator iterator`. Це виглядає як звичайна "
"функція, за винятком того, що вона містить вирази :keyword:`yield` для "
"створення серії значень, які можна використовувати в циклі for або які можна "
"отримати по одному за допомогою функції :func:`next`."

msgid ""
"Usually refers to a generator function, but may refer to a *generator "
"iterator* in some contexts.  In cases where the intended meaning isn't "
"clear, using the full terms avoids ambiguity."
msgstr ""
"Зазвичай відноситься до функції-генератора, але в деяких контекстах може "
"посилатися на *ітератор-генератор*. У випадках, коли передбачуване значення "
"не є зрозумілим, використання повних термінів дозволяє уникнути двозначності."

msgid "generator iterator"
msgstr "ітератор генератора"

msgid "An object created by a :term:`generator` function."
msgstr "Об’єкт, створений функцією :term:`generator`."

msgid ""
"Each :keyword:`yield` temporarily suspends processing, remembering the "
"location execution state (including local variables and pending try-"
"statements).  When the *generator iterator* resumes, it picks up where it "
"left off (in contrast to functions which start fresh on every invocation)."
msgstr ""
"Кожен :keyword:`yield` тимчасово призупиняє обробку, запам’ятовуючи стан "
"виконання розташування (включно з локальними змінними та очікуваними "
"операторами спроби). Коли *ітератор-генератор* продовжує роботу, він "
"продовжує роботу з того місця, де зупинився (на відміну від функцій, які "
"починаються заново під час кожного виклику)."

msgid "generator expression"
msgstr "генераторний вираз"

msgid ""
"An expression that returns an iterator.  It looks like a normal expression "
"followed by a :keyword:`!for` clause defining a loop variable, range, and an "
"optional :keyword:`!if` clause.  The combined expression generates values "
"for an enclosing function::"
msgstr ""
"Вираз, який повертає ітератор. Це виглядає як звичайний вираз, за яким "
"слідує речення :keyword:`!for`, що визначає змінну циклу, діапазон і "
"необов’язкове речення :keyword:`!if`. Комбінований вираз генерує значення "
"для охоплюючої функції::"

msgid "generic function"
msgstr "родова функція"

msgid ""
"A function composed of multiple functions implementing the same operation "
"for different types. Which implementation should be used during a call is "
"determined by the dispatch algorithm."
msgstr ""
"Функція, що складається з кількох функцій, які реалізують ту саму операцію "
"для різних типів. Яку реалізацію слід використовувати під час виклику, "
"визначається алгоритмом диспетчеризації."

msgid ""
"See also the :term:`single dispatch` glossary entry, the :func:`functools."
"singledispatch` decorator, and :pep:`443`."
msgstr ""
"Дивіться також запис глосарію :term:`single dispatch`, декоратор :func:"
"`functools.singledispatch` і :pep:`443`."

msgid "generic type"
msgstr "родовий тип"

msgid ""
"A :term:`type` that can be parameterized; typically a :ref:`container "
"class<sequence-types>` such as :class:`list` or :class:`dict`. Used for :"
"term:`type hints <type hint>` and :term:`annotations <annotation>`."
msgstr ""
":term:`type`, який можна параметризувати; зазвичай це :ref:`клас-контейнер "
"<sequence-types>`, наприклад :class:`list` або :class:`dict`. "
"Використовується для :term:`підказок типу <type hint>` та :term:`анотацій "
"<annotation>`."

msgid ""
"For more details, see :ref:`generic alias types<types-genericalias>`, :pep:"
"`483`, :pep:`484`, :pep:`585`, and the :mod:`typing` module."
msgstr ""
"Для отримання додаткової інформації див. :ref:`загальні типи псевдонімів "
"<types-genericalias>`, :pep:`483`, :pep:`484`, :pep:`585` і модуль :mod:"
"`typing`."

msgid "GIL"
msgstr "GIL"

msgid "See :term:`global interpreter lock`."
msgstr "Дивіться :term:`global interpreter lock`."

msgid "global interpreter lock"
msgstr "глобальне блокування інтерпретатора"

msgid ""
"The mechanism used by the :term:`CPython` interpreter to assure that only "
"one thread executes Python :term:`bytecode` at a time. This simplifies the "
"CPython implementation by making the object model (including critical built-"
"in types such as :class:`dict`) implicitly safe against concurrent access.  "
"Locking the entire interpreter makes it easier for the interpreter to be "
"multi-threaded, at the expense of much of the parallelism afforded by multi-"
"processor machines."
msgstr ""
"Механізм, який використовується інтерпретатором :term:`CPython`, щоб "
"гарантувати, що лише один потік виконує :term:`bytecode` Python за раз. Це "
"спрощує реалізацію CPython, роблячи об’єктну модель (включно з критично "
"важливими вбудованими типами, такими як :class:`dict`) неявно захищеною від "
"одночасного доступу. Блокування всього інтерпретатора полегшує "
"багатопотоковість інтерпретатора за рахунок більшої частини паралелізму, "
"який надають багатопроцесорні машини."

msgid ""
"However, some extension modules, either standard or third-party, are "
"designed so as to release the GIL when doing computationally intensive tasks "
"such as compression or hashing.  Also, the GIL is always released when doing "
"I/O."
msgstr ""

msgid ""
"Past efforts to create a \"free-threaded\" interpreter (one which locks "
"shared data at a much finer granularity) have not been successful because "
"performance suffered in the common single-processor case. It is believed "
"that overcoming this performance issue would make the implementation much "
"more complicated and therefore costlier to maintain."
msgstr ""
"Попередні спроби створити \"безпотоковий\" інтерпретатор (такий, який блокує "
"спільні дані з набагато дрібнішою деталізацією) не увінчалися успіхом, "
"оскільки продуктивність постраждала у звичайному випадку з одним процесором. "
"Вважається, що подолання цієї проблеми з продуктивністю зробить реалізацію "
"набагато складнішою і, отже, дорожчою для обслуговування."

msgid "hash-based pyc"
msgstr "на основі хешу pyc"

msgid ""
"A bytecode cache file that uses the hash rather than the last-modified time "
"of the corresponding source file to determine its validity. See :ref:`pyc-"
"invalidation`."
msgstr ""
"Файл кешу байт-коду, який використовує хеш, а не час останньої зміни "
"відповідного вихідного файлу для визначення його дійсності. Перегляньте :ref:"
"`pyc-invalidation`."

msgid "hashable"
msgstr "хешований"

msgid ""
"An object is *hashable* if it has a hash value which never changes during "
"its lifetime (it needs a :meth:`__hash__` method), and can be compared to "
"other objects (it needs an :meth:`__eq__` method).  Hashable objects which "
"compare equal must have the same hash value."
msgstr ""
"Об’єкт є *хешуваним*, якщо він має хеш-значення, яке ніколи не змінюється "
"протягом свого життя (йому потрібен метод :meth:`__hash__`), і його можна "
"порівнювати з іншими об’єктами (йому потрібен метод :meth:`__eq__`). . "
"Хешовані об’єкти, які порівнюються, повинні мати однакове хеш-значення."

msgid ""
"Hashability makes an object usable as a dictionary key and a set member, "
"because these data structures use the hash value internally."
msgstr ""
"Хешування робить об’єкт придатним для використання як ключ словника та член "
"набору, оскільки ці структури даних використовують хеш-значення внутрішньо."

msgid ""
"Most of Python's immutable built-in objects are hashable; mutable containers "
"(such as lists or dictionaries) are not; immutable containers (such as "
"tuples and frozensets) are only hashable if their elements are hashable.  "
"Objects which are instances of user-defined classes are hashable by "
"default.  They all compare unequal (except with themselves), and their hash "
"value is derived from their :func:`id`."
msgstr ""
"Більшість незмінних вбудованих об’єктів Python можна хешувати; змінні "
"контейнери (такі як списки або словники) не є; незмінні контейнери (такі як "
"кортежі та заморожені набори) можна хешувати, лише якщо їх елементи "
"хешуються. Об’єкти, які є екземплярами визначених користувачем класів, "
"хешуються за замовчуванням. Усі вони порівнюються неоднаково (за винятком "
"самих себе), і їх хеш-значення походить від їхнього :func:`id`."

msgid "IDLE"
msgstr "ПРОСТОЮЧИЙ"

msgid ""
"An Integrated Development and Learning Environment for Python. :ref:`idle` "
"is a basic editor and interpreter environment which ships with the standard "
"distribution of Python."
msgstr ""

msgid "immutable"
msgstr "незмінний"

msgid ""
"An object with a fixed value.  Immutable objects include numbers, strings "
"and tuples.  Such an object cannot be altered.  A new object has to be "
"created if a different value has to be stored.  They play an important role "
"in places where a constant hash value is needed, for example as a key in a "
"dictionary."
msgstr ""
"Об’єкт із фіксованим значенням. До незмінних об’єктів належать числа, рядки "
"та кортежі. Такий об'єкт не можна змінити. Якщо потрібно зберегти інше "
"значення, потрібно створити новий об’єкт. Вони відіграють важливу роль у "
"місцях, де потрібне постійне хеш-значення, наприклад, як ключ у словнику."

msgid "import path"
msgstr "шлях імпорту"

msgid ""
"A list of locations (or :term:`path entries <path entry>`) that are searched "
"by the :term:`path based finder` for modules to import. During import, this "
"list of locations usually comes from :data:`sys.path`, but for subpackages "
"it may also come from the parent package's ``__path__`` attribute."
msgstr ""
"Список розташувань (або :term:`записів шляху <path entry>`), у яких :term:"
"`path based finder` шукає модулі для імпорту. Під час імпорту цей список "
"розташувань зазвичай надходить із :data:`sys.path`, але для підпакетів він "
"також може надходити з атрибута ``__path__`` батьківського пакета."

msgid "importing"
msgstr "імпортування"

msgid ""
"The process by which Python code in one module is made available to Python "
"code in another module."
msgstr ""
"Процес, за допомогою якого код Python в одному модулі стає доступним для "
"коду Python в іншому модулі."

msgid "importer"
msgstr "імпортер"

msgid ""
"An object that both finds and loads a module; both a :term:`finder` and :"
"term:`loader` object."
msgstr ""
"Об’єкт, який знаходить і завантажує модуль; як об’єкт :term:`finder`, так і :"
"term:`loader`."

msgid "interactive"
msgstr "інтерактивний"

msgid ""
"Python has an interactive interpreter which means you can enter statements "
"and expressions at the interpreter prompt, immediately execute them and see "
"their results.  Just launch ``python`` with no arguments (possibly by "
"selecting it from your computer's main menu). It is a very powerful way to "
"test out new ideas or inspect modules and packages (remember ``help(x)``)."
msgstr ""
"У Python є інтерактивний інтерпретатор, який означає, що ви можете вводити "
"оператори та вирази в підказку інтерпретатора, негайно виконувати їх і "
"бачити їхні результати. Просто запустіть ``python`` без аргументів (можливо, "
"вибравши його в головному меню комп’ютера). Це дуже потужний спосіб "
"випробувати нові ідеї або перевірити модулі та пакунки (пам’ятайте "
"``help(x)``)."

msgid "interpreted"
msgstr "інтерпретований"

msgid ""
"Python is an interpreted language, as opposed to a compiled one, though the "
"distinction can be blurry because of the presence of the bytecode compiler.  "
"This means that source files can be run directly without explicitly creating "
"an executable which is then run. Interpreted languages typically have a "
"shorter development/debug cycle than compiled ones, though their programs "
"generally also run more slowly.  See also :term:`interactive`."
msgstr ""
"Python є інтерпретованою мовою, на відміну від скомпільованої, хоча "
"відмінність може бути розмитою через наявність компілятора байт-коду. Це "
"означає, що вихідні файли можна запускати безпосередньо без явного створення "
"виконуваного файлу, який потім запускається. Інтерпретовані мови зазвичай "
"мають коротший цикл розробки/налагодження, ніж скомпільовані, хоча їхні "
"програми також працюють повільніше. Дивіться також :term:`interactive`."

msgid "interpreter shutdown"
msgstr "вимкнення перекладача"

msgid ""
"When asked to shut down, the Python interpreter enters a special phase where "
"it gradually releases all allocated resources, such as modules and various "
"critical internal structures.  It also makes several calls to the :term:"
"`garbage collector <garbage collection>`. This can trigger the execution of "
"code in user-defined destructors or weakref callbacks. Code executed during "
"the shutdown phase can encounter various exceptions as the resources it "
"relies on may not function anymore (common examples are library modules or "
"the warnings machinery)."
msgstr ""
"Коли його попросять завершити роботу, інтерпретатор Python переходить у "
"спеціальну фазу, де він поступово звільняє всі виділені ресурси, такі як "
"модулі та різні критичні внутрішні структури. Він також робить кілька "
"викликів до :term:`збирача сміття <garbage collection>`. Це може ініціювати "
"виконання коду в визначених користувачем деструкторах або зворотних викликах "
"weakref. Код, який виконується під час фази завершення роботи, може "
"зіткнутися з різними винятками, оскільки ресурси, на які він покладається, "
"можуть більше не функціонувати (поширеними прикладами є бібліотечні модулі "
"або механізм попереджень)."

msgid ""
"The main reason for interpreter shutdown is that the ``__main__`` module or "
"the script being run has finished executing."
msgstr ""
"Основною причиною вимкнення інтерпретатора є завершення виконання модуля "
"``__main__`` або сценарію, який виконується."

msgid "iterable"
msgstr "ітерований"

msgid ""
"An object capable of returning its members one at a time. Examples of "
"iterables include all sequence types (such as :class:`list`, :class:`str`, "
"and :class:`tuple`) and some non-sequence types like :class:`dict`, :term:"
"`file objects <file object>`, and objects of any classes you define with an :"
"meth:`__iter__` method or with a :meth:`__getitem__` method that implements :"
"term:`sequence` semantics."
msgstr ""

msgid ""
"Iterables can be used in a :keyword:`for` loop and in many other places "
"where a sequence is needed (:func:`zip`, :func:`map`, ...).  When an "
"iterable object is passed as an argument to the built-in function :func:"
"`iter`, it returns an iterator for the object.  This iterator is good for "
"one pass over the set of values.  When using iterables, it is usually not "
"necessary to call :func:`iter` or deal with iterator objects yourself.  The "
"``for`` statement does that automatically for you, creating a temporary "
"unnamed variable to hold the iterator for the duration of the loop.  See "
"also :term:`iterator`, :term:`sequence`, and :term:`generator`."
msgstr ""
"Ітерабельні елементи можна використовувати в циклі :keyword:`for` і в "
"багатьох інших місцях, де потрібна послідовність (:func:`zip`, :func:"
"`map`, ...). Коли ітерований об’єкт передається як аргумент до вбудованої "
"функції :func:`iter`, вона повертає ітератор для об’єкта. Цей ітератор "
"підходить для одного проходу по набору значень. При використанні ітераторів "
"зазвичай не потрібно викликати :func:`iter` або самостійно мати справу з "
"об’єктами ітератора. Оператор ``for`` робить це автоматично за вас, "
"створюючи тимчасову безіменну змінну для утримання ітератора протягом циклу. "
"Дивіться також :term:`iterator`, :term:`sequence` і :term:`generator`."

msgid "iterator"
msgstr "ітератор"

msgid ""
"An object representing a stream of data.  Repeated calls to the iterator's :"
"meth:`~iterator.__next__` method (or passing it to the built-in function :"
"func:`next`) return successive items in the stream.  When no more data are "
"available a :exc:`StopIteration` exception is raised instead.  At this "
"point, the iterator object is exhausted and any further calls to its :meth:"
"`__next__` method just raise :exc:`StopIteration` again.  Iterators are "
"required to have an :meth:`__iter__` method that returns the iterator object "
"itself so every iterator is also iterable and may be used in most places "
"where other iterables are accepted.  One notable exception is code which "
"attempts multiple iteration passes.  A container object (such as a :class:"
"`list`) produces a fresh new iterator each time you pass it to the :func:"
"`iter` function or use it in a :keyword:`for` loop.  Attempting this with an "
"iterator will just return the same exhausted iterator object used in the "
"previous iteration pass, making it appear like an empty container."
msgstr ""
"Об'єкт, що представляє потік даних. Повторні виклики методу :meth:`~iterator."
"__next__` ітератора (або передача його у вбудовану функцію :func:`next`) "
"повертають послідовні елементи в потоці. Коли більше даних немає, натомість "
"виникає виняткова ситуація :exc:`StopIteration`. На цьому етапі об’єкт "
"ітератора вичерпано, і будь-які подальші виклики його методу :meth:"
"`__next__` просто знову викликають :exc:`StopIteration`. Ітератори повинні "
"мати метод :meth:`__iter__`, який повертає сам об’єкт ітератора, тому кожен "
"ітератор також є ітераційним і може використовуватися в більшості місць, де "
"приймаються інші ітератори. Одним помітним винятком є код, який намагається "
"пройти кілька ітерацій. Контейнерний об’єкт (наприклад, :class:`list`) "
"створює новий ітератор кожного разу, коли ви передаєте його функції :func:"
"`iter` або використовуєте в циклі :keyword:`for`. Спроба цього за допомогою "
"ітератора просто поверне той самий вичерпаний об’єкт ітератора, який "
"використовувався на попередньому проході ітерації, і він буде виглядати як "
"порожній контейнер."

msgid "More information can be found in :ref:`typeiter`."
msgstr "Більше інформації можна знайти в :ref:`typeiter`."

msgid ""
"CPython does not consistently apply the requirement that an iterator define :"
"meth:`__iter__`."
msgstr ""
"CPython не послідовно застосовує вимогу, щоб ітератор визначав :meth:"
"`__iter__`."

msgid "key function"
msgstr "ключова функція"

msgid ""
"A key function or collation function is a callable that returns a value used "
"for sorting or ordering.  For example, :func:`locale.strxfrm` is used to "
"produce a sort key that is aware of locale specific sort conventions."
msgstr ""
"Ключова функція або функція зіставлення — це виклик, який повертає значення, "
"яке використовується для сортування або впорядкування. Наприклад, :func:"
"`locale.strxfrm` використовується для створення ключа сортування, який "
"враховує умови сортування для певної мови."

msgid ""
"A number of tools in Python accept key functions to control how elements are "
"ordered or grouped.  They include :func:`min`, :func:`max`, :func:`sorted`, :"
"meth:`list.sort`, :func:`heapq.merge`, :func:`heapq.nsmallest`, :func:`heapq."
"nlargest`, and :func:`itertools.groupby`."
msgstr ""
"Кілька інструментів у Python приймають ключові функції для керування тим, як "
"елементи впорядковуються чи групуються. Серед них :func:`min`, :func:`max`, :"
"func:`sorted`, :meth:`list.sort`, :func:`heapq.merge`, :func:`heapq."
"nsmallest`, :func:`heapq.nlargest` і :func:`itertools.groupby`."

msgid ""
"There are several ways to create a key function.  For example. the :meth:"
"`str.lower` method can serve as a key function for case insensitive sorts.  "
"Alternatively, a key function can be built from a :keyword:`lambda` "
"expression such as ``lambda r: (r[0], r[2])``.  Also, :func:`operator."
"attrgetter`, :func:`operator.itemgetter`, and :func:`operator.methodcaller` "
"are three key function constructors.  See the :ref:`Sorting HOW TO "
"<sortinghowto>` for examples of how to create and use key functions."
msgstr ""

msgid "keyword argument"
msgstr "аргумент ключового слова"

msgid "See :term:`argument`."
msgstr "Дивіться :term:`argument`."

msgid "lambda"
msgstr "лямбда"

msgid ""
"An anonymous inline function consisting of a single :term:`expression` which "
"is evaluated when the function is called.  The syntax to create a lambda "
"function is ``lambda [parameters]: expression``"
msgstr ""
"Анонімна вбудована функція, що складається з одного :term:`expression`, який "
"обчислюється під час виклику функції. Синтаксис створення лямбда-функції "
"такий: ``лямбда [параметри]: вираз``"

msgid "LBYL"
msgstr "LBYL"

msgid ""
"Look before you leap.  This coding style explicitly tests for pre-conditions "
"before making calls or lookups.  This style contrasts with the :term:`EAFP` "
"approach and is characterized by the presence of many :keyword:`if` "
"statements."
msgstr ""
"Сім разів відміряй, один раз відріж. Цей стиль кодування явно перевіряє "
"попередні умови перед здійсненням викликів або пошуку. Цей стиль контрастує "
"з підходом :term:`EAFP` і характеризується наявністю багатьох операторів :"
"keyword:`if`."

msgid ""
"In a multi-threaded environment, the LBYL approach can risk introducing a "
"race condition between \"the looking\" and \"the leaping\".  For example, "
"the code, ``if key in mapping: return mapping[key]`` can fail if another "
"thread removes *key* from *mapping* after the test, but before the lookup. "
"This issue can be solved with locks or by using the EAFP approach."
msgstr ""
"У багатопоточному середовищі підхід LBYL може загрожувати введенням умов "
"змагання між \"дивлячим\" і \"стрибаючим\". Наприклад, код ``if key in "
"mapping: return mapping[key]`` може завершитися помилкою, якщо інший потік "
"видаляє *key* із *mapping* після перевірки, але перед пошуком. Цю проблему "
"можна вирішити за допомогою блокувань або використання підходу EAFP."

msgid "locale encoding"
msgstr "кодування локалі"

msgid ""
"On Unix, it is the encoding of the LC_CTYPE locale. It can be set with :func:"
"`locale.setlocale(locale.LC_CTYPE, new_locale) <locale.setlocale>`."
msgstr ""

msgid "On Windows, it is the ANSI code page (ex: ``\"cp1252\"``)."
msgstr ""

msgid ""
"On Android and VxWorks, Python uses ``\"utf-8\"`` as the locale encoding."
msgstr ""

msgid "``locale.getencoding()`` can be used to get the locale encoding."
msgstr ""

msgid "See also the :term:`filesystem encoding and error handler`."
msgstr ""

msgid "list"
msgstr "список"

msgid ""
"A built-in Python :term:`sequence`.  Despite its name it is more akin to an "
"array in other languages than to a linked list since access to elements is "
"O(1)."
msgstr ""
"Вбудована :term:`sequence` Python. Незважаючи на свою назву, він більше "
"схожий на масив в інших мовах, ніж на пов’язаний список, оскільки доступ до "
"елементів є O(1)."

msgid "list comprehension"
msgstr "розуміння списку"

msgid ""
"A compact way to process all or part of the elements in a sequence and "
"return a list with the results.  ``result = ['{:#04x}'.format(x) for x in "
"range(256) if x % 2 == 0]`` generates a list of strings containing even hex "
"numbers (0x..) in the range from 0 to 255. The :keyword:`if` clause is "
"optional.  If omitted, all elements in ``range(256)`` are processed."
msgstr ""
"Компактний спосіб обробки всіх або частини елементів у послідовності та "
"повернення списку з результатами. ``result = ['{:#04x}'.format(x) for x in "
"range(256) if x % 2 == 0]`` створює список рядків, що містять парні "
"шістнадцяткові числа (0x..) у діапазон від 0 до 255. Речення :keyword:`if` є "
"необов’язковим. Якщо опущено, обробляються всі елементи в діапазоні (256)."

msgid "loader"
msgstr "навантажувач"

msgid ""
"An object that loads a module. It must define a method named :meth:"
"`load_module`. A loader is typically returned by a :term:`finder`. See :pep:"
"`302` for details and :class:`importlib.abc.Loader` for an :term:`abstract "
"base class`."
msgstr ""
"Об’єкт, який завантажує модуль. Він повинен визначати метод під назвою :meth:"
"`load_module`. Завантажувач зазвичай повертається :term:`finder`. "
"Перегляньте :pep:`302` для деталей та :class:`importlib.abc.Loader` для :"
"term:`abstract base class`."

msgid "magic method"
msgstr "магічний метод"

msgid "An informal synonym for :term:`special method`."
msgstr "Неофіційний синонім слова :term:`special method`."

msgid "mapping"
msgstr "відображення"

msgid ""
"A container object that supports arbitrary key lookups and implements the "
"methods specified in the :class:`collections.abc.Mapping` or :class:"
"`collections.abc.MutableMapping` :ref:`abstract base classes <collections-"
"abstract-base-classes>`.  Examples include :class:`dict`, :class:"
"`collections.defaultdict`, :class:`collections.OrderedDict` and :class:"
"`collections.Counter`."
msgstr ""

msgid "meta path finder"
msgstr "мета-шлях пошуку"

msgid ""
"A :term:`finder` returned by a search of :data:`sys.meta_path`.  Meta path "
"finders are related to, but different from :term:`path entry finders <path "
"entry finder>`."
msgstr ""
":term:`finder`, що повертається в результаті пошуку :data:`sys.meta_path`. "
"Засоби пошуку меташляхів пов’язані з :term:`засобами пошуку записів шляху "
"<path entry finder>`, але відрізняються від них."

msgid ""
"See :class:`importlib.abc.MetaPathFinder` for the methods that meta path "
"finders implement."
msgstr ""
"Перегляньте :class:`importlib.abc.MetaPathFinder` методи, які реалізують "
"засоби пошуку меташляхів."

msgid "metaclass"
msgstr "метаклас"

msgid ""
"The class of a class.  Class definitions create a class name, a class "
"dictionary, and a list of base classes.  The metaclass is responsible for "
"taking those three arguments and creating the class.  Most object oriented "
"programming languages provide a default implementation.  What makes Python "
"special is that it is possible to create custom metaclasses.  Most users "
"never need this tool, but when the need arises, metaclasses can provide "
"powerful, elegant solutions.  They have been used for logging attribute "
"access, adding thread-safety, tracking object creation, implementing "
"singletons, and many other tasks."
msgstr ""
"Клас класу. Визначення класу створюють назву класу, словник класу та список "
"базових класів. Метаклас відповідає за отримання цих трьох аргументів і "
"створення класу. Більшість об'єктно-орієнтованих мов програмування "
"забезпечують реалізацію за замовчуванням. Що робить Python особливим, так це "
"те, що можна створювати власні метакласи. Більшості користувачів цей "
"інструмент ніколи не потрібен, але коли виникає потреба, метакласи можуть "
"надати потужні та елегантні рішення. Вони використовувалися для реєстрації "
"доступу до атрибутів, додавання потокової безпеки, відстеження створення "
"об’єктів, реалізації одиночних елементів і багатьох інших завдань."

msgid "More information can be found in :ref:`metaclasses`."
msgstr "Більше інформації можна знайти в :ref:`metaclasses`."

msgid "method"
msgstr "метод"

msgid ""
"A function which is defined inside a class body.  If called as an attribute "
"of an instance of that class, the method will get the instance object as its "
"first :term:`argument` (which is usually called ``self``). See :term:"
"`function` and :term:`nested scope`."
msgstr ""
"Функція, яка визначена всередині тіла класу. Якщо викликати його як атрибут "
"примірника цього класу, метод отримає об’єкт примірника як свій перший :term:"
"`argument` (який зазвичай називається ``self``). Див. :term:`function` і :"
"term:`nested scope`."

msgid "method resolution order"
msgstr "порядок вирішення методу"

msgid ""
"Method Resolution Order is the order in which base classes are searched for "
"a member during lookup. See `The Python 2.3 Method Resolution Order <https://"
"www.python.org/download/releases/2.3/mro/>`_ for details of the algorithm "
"used by the Python interpreter since the 2.3 release."
msgstr ""
"Порядок вирішення методів — це порядок, у якому базові класи шукають член "
"під час пошуку. Перегляньте `The Python 2.3 Method Resolution Order <https://"
"www.python.org/download/releases/2.3/mro/>`_ для детальної інформації про "
"алгоритм, який використовується інтерпретатором Python, починаючи з випуску "
"2.3."

msgid "module"
msgstr "модуль"

msgid ""
"An object that serves as an organizational unit of Python code.  Modules "
"have a namespace containing arbitrary Python objects.  Modules are loaded "
"into Python by the process of :term:`importing`."
msgstr ""
"Об’єкт, який є організаційною одиницею коду Python. Модулі мають простір "
"імен, що містить довільні об’єкти Python. Модулі завантажуються в Python за "
"допомогою процесу :term:`importing`."

msgid "See also :term:`package`."
msgstr "Дивіться також :term:`package`."

msgid "module spec"
msgstr "модуль спец"

msgid ""
"A namespace containing the import-related information used to load a module. "
"An instance of :class:`importlib.machinery.ModuleSpec`."
msgstr ""
"Простір імен, що містить пов’язану з імпортом інформацію, яка "
"використовується для завантаження модуля. Екземпляр :class:`importlib."
"machinery.ModuleSpec`."

msgid "MRO"
msgstr "MRO"

msgid "See :term:`method resolution order`."
msgstr "Дивіться :term:`method resolution order`."

msgid "mutable"
msgstr "мінливий"

msgid ""
"Mutable objects can change their value but keep their :func:`id`.  See also :"
"term:`immutable`."
msgstr ""
"Змінні об’єкти можуть змінювати своє значення, але зберігають свій :func:"
"`id`. Дивіться також :term:`immutable`."

msgid "named tuple"
msgstr "іменований кортеж"

msgid ""
"The term \"named tuple\" applies to any type or class that inherits from "
"tuple and whose indexable elements are also accessible using named "
"attributes.  The type or class may have other features as well."
msgstr ""
"Термін \"іменований кортеж\" застосовується до будь-якого типу або класу, "
"який успадковує кортеж і чиї індексовані елементи також доступні за "
"допомогою іменованих атрибутів. Тип або клас також можуть мати інші "
"особливості."

msgid ""
"Several built-in types are named tuples, including the values returned by :"
"func:`time.localtime` and :func:`os.stat`.  Another example is :data:`sys."
"float_info`::"
msgstr ""
"Кілька вбудованих типів є іменованими кортежами, включаючи значення, що "
"повертаються :func:`time.localtime` і :func:`os.stat`. Інший приклад: :data:"
"`sys.float_info`::"

msgid ""
"Some named tuples are built-in types (such as the above examples). "
"Alternatively, a named tuple can be created from a regular class definition "
"that inherits from :class:`tuple` and that defines named fields.  Such a "
"class can be written by hand or it can be created with the factory function :"
"func:`collections.namedtuple`.  The latter technique also adds some extra "
"methods that may not be found in hand-written or built-in named tuples."
msgstr ""
"Деякі іменовані кортежі є вбудованими типами (наприклад, наведені вище "
"приклади). Крім того, іменований кортеж можна створити зі звичайного "
"визначення класу, який успадковує :class:`tuple` і визначає іменовані поля. "
"Такий клас можна написати вручну або створити за допомогою фабричної "
"функції :func:`collections.namedtuple`. Останній прийом також додає деякі "
"додаткові методи, які можуть бути відсутні в рукописних або вбудованих "
"іменованих кортежах."

msgid "namespace"
msgstr "простір імен"

msgid ""
"The place where a variable is stored.  Namespaces are implemented as "
"dictionaries.  There are the local, global and built-in namespaces as well "
"as nested namespaces in objects (in methods).  Namespaces support modularity "
"by preventing naming conflicts.  For instance, the functions :func:`builtins."
"open <.open>` and :func:`os.open` are distinguished by their namespaces.  "
"Namespaces also aid readability and maintainability by making it clear which "
"module implements a function.  For instance, writing :func:`random.seed` or :"
"func:`itertools.islice` makes it clear that those functions are implemented "
"by the :mod:`random` and :mod:`itertools` modules, respectively."
msgstr ""
"Місце, де зберігається змінна. Простори імен реалізовані як словники. "
"Існують локальні, глобальні та вбудовані простори імен, а також вкладені "
"простори імен в об’єктах (у методах). Простори імен підтримують модульність, "
"запобігаючи конфліктам імен. Наприклад, функції :func:`builtins.open <."
"open>` і :func:`os.open` відрізняються своїми просторами імен. Простори імен "
"також сприяють читабельності та зручності обслуговування, пояснюючи, який "
"модуль реалізує функцію. Наприклад, написання :func:`random.seed` або :func:"
"`itertools.islice` дає зрозуміти, що ці функції реалізовані модулями :mod:"
"`random` і :mod:`itertools` відповідно."

msgid "namespace package"
msgstr "пакет простору імен"

msgid ""
"A :pep:`420` :term:`package` which serves only as a container for "
"subpackages.  Namespace packages may have no physical representation, and "
"specifically are not like a :term:`regular package` because they have no "
"``__init__.py`` file."
msgstr ""
":pep:`420` :term:`package`, який служить лише контейнером для підпакетів. "
"Пакунки простору імен можуть не мати фізичного представлення, і, зокрема, не "
"схожі на :term:`regular package`, оскільки вони не мають файлу ``__init__."
"py``."

msgid "See also :term:`module`."
msgstr "Дивіться також :term:`module`."

msgid "nested scope"
msgstr "вкладена область"

msgid ""
"The ability to refer to a variable in an enclosing definition.  For "
"instance, a function defined inside another function can refer to variables "
"in the outer function.  Note that nested scopes by default work only for "
"reference and not for assignment.  Local variables both read and write in "
"the innermost scope.  Likewise, global variables read and write to the "
"global namespace.  The :keyword:`nonlocal` allows writing to outer scopes."
msgstr ""
"Можливість посилатися на змінну в охоплюючому визначенні. Наприклад, "
"функція, визначена всередині іншої функції, може посилатися на змінні у "
"зовнішній функції. Зауважте, що вкладені області за замовчуванням працюють "
"лише для довідки, а не для призначення. Локальні змінні читають і записують "
"у внутрішній області видимості. Так само глобальні змінні читають і "
"записують у глобальний простір імен. :keyword:`nonlocal` дозволяє писати у "
"зовнішні області."

msgid "new-style class"
msgstr "клас нового стилю"

msgid ""
"Old name for the flavor of classes now used for all class objects.  In "
"earlier Python versions, only new-style classes could use Python's newer, "
"versatile features like :attr:`~object.__slots__`, descriptors, properties, :"
"meth:`__getattribute__`, class methods, and static methods."
msgstr ""
"Стара назва різновиду класів, яка тепер використовується для всіх об’єктів "
"класу. У попередніх версіях Python лише класи нового стилю могли "
"використовувати нові, універсальні функції Python, такі як :attr:`~object."
"__slots__`, дескриптори, властивості, :meth:`__getattribute__`, методи класу "
"та статичні методи."

msgid "object"
msgstr "об'єкт"

msgid ""
"Any data with state (attributes or value) and defined behavior (methods).  "
"Also the ultimate base class of any :term:`new-style class`."
msgstr ""
"Будь-які дані зі станом (атрибути або значення) і визначеною поведінкою "
"(методи). Також остаточний базовий клас будь-якого :term:`new-style class`."

msgid "package"
msgstr "пакет"

msgid ""
"A Python :term:`module` which can contain submodules or recursively, "
"subpackages.  Technically, a package is a Python module with a ``__path__`` "
"attribute."
msgstr ""

msgid "See also :term:`regular package` and :term:`namespace package`."
msgstr "Дивіться також :term:`regular package` і :term:`namespace package`."

msgid "parameter"
msgstr "параметр"

msgid ""
"A named entity in a :term:`function` (or method) definition that specifies "
"an :term:`argument` (or in some cases, arguments) that the function can "
"accept.  There are five kinds of parameter:"
msgstr ""
"Іменована сутність у визначенні :term:`function` (або методу), яка визначає :"
"term:`argument` (або в деяких випадках аргументи), які функція може "
"прийняти. Є п'ять типів параметрів:"

msgid ""
":dfn:`positional-or-keyword`: specifies an argument that can be passed "
"either :term:`positionally <argument>` or as a :term:`keyword argument "
"<argument>`.  This is the default kind of parameter, for example *foo* and "
"*bar* in the following::"
msgstr ""
":dfn:`positional-or-keyword`: визначає аргумент, який можна передати :term:"
"`позиційно <argument>` або як :term:`аргумент ключового слова <argument>`. "
"Це тип параметра за замовчуванням, наприклад *foo* і *bar* у наступному::"

msgid ""
":dfn:`positional-only`: specifies an argument that can be supplied only by "
"position. Positional-only parameters can be defined by including a ``/`` "
"character in the parameter list of the function definition after them, for "
"example *posonly1* and *posonly2* in the following::"
msgstr ""
":dfn:`positional-only`: визначає аргумент, який можна надати лише за "
"позицією. Лише позиційні параметри можна визначити, включивши символ ``/`` у "
"список параметрів визначення функції після них, наприклад *posonly1* і "
"*posonly2* у наступному::"

msgid ""
":dfn:`keyword-only`: specifies an argument that can be supplied only by "
"keyword.  Keyword-only parameters can be defined by including a single var-"
"positional parameter or bare ``*`` in the parameter list of the function "
"definition before them, for example *kw_only1* and *kw_only2* in the "
"following::"
msgstr ""
":dfn:`keyword-only`: визначає аргумент, який можна надати лише за ключовим "
"словом. Параметри, що містять лише ключове слово, можна визначити, включивши "
"один змінний позиційний параметр або голий ``*`` у список параметрів "
"визначення функції перед ними, наприклад *kw_only1* і *kw_only2* у "
"наступному:"

msgid ""
":dfn:`var-positional`: specifies that an arbitrary sequence of positional "
"arguments can be provided (in addition to any positional arguments already "
"accepted by other parameters).  Such a parameter can be defined by "
"prepending the parameter name with ``*``, for example *args* in the "
"following::"
msgstr ""
":dfn:`var-positional`: вказує, що можна надати довільну послідовність "
"позиційних аргументів (на додаток до будь-яких позиційних аргументів, уже "
"прийнятих іншими параметрами). Такий параметр можна визначити, додавши перед "
"назвою параметра ``*``, наприклад *args* у наступному::"

msgid ""
":dfn:`var-keyword`: specifies that arbitrarily many keyword arguments can be "
"provided (in addition to any keyword arguments already accepted by other "
"parameters).  Such a parameter can be defined by prepending the parameter "
"name with ``**``, for example *kwargs* in the example above."
msgstr ""
":dfn:`var-keyword`: вказує, що можна надати довільну кількість аргументів "
"ключових слів (на додаток до будь-яких аргументів ключових слів, які вже "
"прийняті іншими параметрами). Такий параметр можна визначити, додавши перед "
"назвою параметра ``**``, наприклад *kwargs* у прикладі вище."

msgid ""
"Parameters can specify both optional and required arguments, as well as "
"default values for some optional arguments."
msgstr ""
"Параметри можуть вказувати як необов’язкові, так і обов’язкові аргументи, а "
"також значення за умовчанням для деяких необов’язкових аргументів."

msgid ""
"See also the :term:`argument` glossary entry, the FAQ question on :ref:`the "
"difference between arguments and parameters <faq-argument-vs-parameter>`, "
"the :class:`inspect.Parameter` class, the :ref:`function` section, and :pep:"
"`362`."
msgstr ""
"Дивіться також :term:`argument` глосарій, питання FAQ про :ref:`різницю між "
"аргументами та параметрами <faq-argument-vs-parameter>`, :class:`inspect."
"Parameter` клас, :ref:`function` розділ та :pep:`362`."

msgid "path entry"
msgstr "запис шляху"

msgid ""
"A single location on the :term:`import path` which the :term:`path based "
"finder` consults to find modules for importing."
msgstr ""
"Єдине розташування на :term:`import path`, до якого :term:`path based "
"finder` звертається, щоб знайти модулі для імпорту."

msgid "path entry finder"
msgstr "шукач запису шляху"

msgid ""
"A :term:`finder` returned by a callable on :data:`sys.path_hooks` (i.e. a :"
"term:`path entry hook`) which knows how to locate modules given a :term:"
"`path entry`."
msgstr ""
":term:`finder`, що повертається викликом на :data:`sys.path_hooks` (тобто :"
"term:`path entry hook`), який знає, як знаходити модулі за допомогою :term:"
"`path entry`."

msgid ""
"See :class:`importlib.abc.PathEntryFinder` for the methods that path entry "
"finders implement."
msgstr ""
"Перегляньте :class:`importlib.abc.PathEntryFinder` методи, які реалізують "
"засоби пошуку запису шляху."

msgid "path entry hook"
msgstr "гачок входу шляху"

msgid ""
"A callable on the :data:`sys.path_hook` list which returns a :term:`path "
"entry finder` if it knows how to find modules on a specific :term:`path "
"entry`."
msgstr ""
"Викликається в списку :data:`sys.path_hook`, який повертає :term:`path entry "
"finder`, якщо він знає, як знайти модулі в певному :term:`path entry finder`."

msgid "path based finder"
msgstr "пошук на основі шляху"

msgid ""
"One of the default :term:`meta path finders <meta path finder>` which "
"searches an :term:`import path` for modules."
msgstr ""
"Один із стандартних :term:`мета-шляхів пошуку <meta path finder>`, який "
"шукає :term:`import path` для модулів."

msgid "path-like object"
msgstr "шляхоподібний об’єкт"

msgid ""
"An object representing a file system path. A path-like object is either a :"
"class:`str` or :class:`bytes` object representing a path, or an object "
"implementing the :class:`os.PathLike` protocol. An object that supports the :"
"class:`os.PathLike` protocol can be converted to a :class:`str` or :class:"
"`bytes` file system path by calling the :func:`os.fspath` function; :func:"
"`os.fsdecode` and :func:`os.fsencode` can be used to guarantee a :class:"
"`str` or :class:`bytes` result instead, respectively. Introduced by :pep:"
"`519`."
msgstr ""
"Об'єкт, що представляє шлях до файлової системи. Шляховий об’єкт – це або :"
"class:`str`, або :class:`bytes` об’єкт, що представляє шлях, або об’єкт, що "
"реалізує протокол :class:`os.PathLike`. Об’єкт, який підтримує протокол :"
"class:`os.PathLike`, можна перетворити на шлях файлової системи :class:`str` "
"або :class:`bytes` шляхом виклику функції :func:`os.fspath`; :func:`os."
"fsdecode` і :func:`os.fsencode` можна використовувати, щоб гарантувати "
"результат :class:`str` або :class:`bytes` відповідно. Представлений :pep:"
"`519`."

msgid "PEP"
msgstr "PEP"

msgid ""
"Python Enhancement Proposal. A PEP is a design document providing "
"information to the Python community, or describing a new feature for Python "
"or its processes or environment. PEPs should provide a concise technical "
"specification and a rationale for proposed features."
msgstr ""
"Пропозиція вдосконалення Python. PEP — це проектний документ, який надає "
"інформацію спільноті Python або описує нову функцію для Python або його "
"процеси чи середовище. Публічні діячі повинні надавати стислу технічну "
"специфікацію та обґрунтування запропонованих функцій."

msgid ""
"PEPs are intended to be the primary mechanisms for proposing major new "
"features, for collecting community input on an issue, and for documenting "
"the design decisions that have gone into Python. The PEP author is "
"responsible for building consensus within the community and documenting "
"dissenting opinions."
msgstr ""
"PEP мають бути основними механізмами для пропонування основних нових "
"функцій, для збору інформації спільноти щодо проблеми та для документування "
"проектних рішень, які увійшли в Python. Автор PEP відповідає за формування "
"консенсусу в спільноті та документування особливих думок."

msgid "See :pep:`1`."
msgstr "Дивіться :pep:`1`."

msgid "portion"
msgstr "частина"

msgid ""
"A set of files in a single directory (possibly stored in a zip file) that "
"contribute to a namespace package, as defined in :pep:`420`."
msgstr ""
"Набір файлів в одному каталозі (можливо, збережених у файлі zip), які "
"входять до пакету простору імен, як визначено в :pep:`420`."

msgid "positional argument"
msgstr "позиційний аргумент"

msgid "provisional API"
msgstr "тимчасовий API"

msgid ""
"A provisional API is one which has been deliberately excluded from the "
"standard library's backwards compatibility guarantees.  While major changes "
"to such interfaces are not expected, as long as they are marked provisional, "
"backwards incompatible changes (up to and including removal of the "
"interface) may occur if deemed necessary by core developers.  Such changes "
"will not be made gratuitously -- they will occur only if serious fundamental "
"flaws are uncovered that were missed prior to the inclusion of the API."
msgstr ""
"Попередній API — це той, який був навмисно виключений із гарантій зворотної "
"сумісності стандартної бібліотеки. Хоча суттєвих змін у таких інтерфейсах не "
"очікується, доки вони позначені як тимчасові, зворотні несумісні зміни (аж "
"до видалення інтерфейсу включно) можуть відбутися, якщо розробники ядра "
"вважають це за потрібне. Такі зміни не будуть внесені безоплатно — вони "
"відбудуться лише за умови виявлення серйозних фундаментальних недоліків, які "
"були пропущені до включення API."

msgid ""
"Even for provisional APIs, backwards incompatible changes are seen as a "
"\"solution of last resort\" - every attempt will still be made to find a "
"backwards compatible resolution to any identified problems."
msgstr ""
"Навіть для тимчасових API зворотні несумісні зміни розглядаються як "
"\"вирішення останньої інстанції\" — все одно будуть зроблені всі спроби "
"знайти зворотно сумісне вирішення будь-яких виявлених проблем."

msgid ""
"This process allows the standard library to continue to evolve over time, "
"without locking in problematic design errors for extended periods of time.  "
"See :pep:`411` for more details."
msgstr ""
"Цей процес дозволяє стандартній бібліотеці продовжувати розвиватися з часом, "
"не блокуючи проблемні помилки проектування протягом тривалих періодів часу. "
"Дивіться :pep:`411` для більш детальної інформації."

msgid "provisional package"
msgstr "тимчасовий пакет"

msgid "See :term:`provisional API`."
msgstr "Перегляньте :term:`provisional API`."

msgid "Python 3000"
msgstr "Python 3000"

msgid ""
"Nickname for the Python 3.x release line (coined long ago when the release "
"of version 3 was something in the distant future.)  This is also abbreviated "
"\"Py3k\"."
msgstr ""
"Псевдонім для рядка випусків Python 3.x (придуманий давно, коли випуск "
"версії 3 був чимось у віддаленому майбутньому). Це також скорочено \"Py3k\"."

msgid "Pythonic"
msgstr "Pythonic"

msgid ""
"An idea or piece of code which closely follows the most common idioms of the "
"Python language, rather than implementing code using concepts common to "
"other languages.  For example, a common idiom in Python is to loop over all "
"elements of an iterable using a :keyword:`for` statement.  Many other "
"languages don't have this type of construct, so people unfamiliar with "
"Python sometimes use a numerical counter instead::"
msgstr ""
"Ідея або фрагмент коду, який точно відповідає найпоширенішим ідіомам мови "
"Python, а не реалізує код за допомогою концепцій, спільних для інших мов. "
"Наприклад, поширена ідіома в Python полягає в тому, щоб перебирати всі "
"елементи ітерованого за допомогою оператора :keyword:`for`. Багато інших мов "
"не мають такого типу конструкції, тому люди, які не знайомі з Python, іноді "
"замість цього використовують числовий лічильник::"

msgid "As opposed to the cleaner, Pythonic method::"
msgstr "На відміну від очищувача, метод Pythonic::"

msgid "qualified name"
msgstr "кваліфіковане ім'я"

msgid ""
"A dotted name showing the \"path\" from a module's global scope to a class, "
"function or method defined in that module, as defined in :pep:`3155`.  For "
"top-level functions and classes, the qualified name is the same as the "
"object's name::"
msgstr ""
"Назва з крапками, що вказує \"шлях\" від глобальної області видимості модуля "
"до класу, функції або методу, визначеного в цьому модулі, як визначено в :"
"pep:`3155`. Для функцій і класів верхнього рівня кваліфіковане ім’я "
"збігається з ім’ям об’єкта::"

msgid ""
"When used to refer to modules, the *fully qualified name* means the entire "
"dotted path to the module, including any parent packages, e.g. ``email.mime."
"text``::"
msgstr ""
"Коли використовується для позначення модулів, *повне ім’я* означає весь шлях "
"до модуля, розділений крапками, включаючи будь-які батьківські пакети, напр. "
"``email.mime.text``::"

msgid "reference count"
msgstr "кількість посилань"

msgid ""
"The number of references to an object.  When the reference count of an "
"object drops to zero, it is deallocated.  Reference counting is generally "
"not visible to Python code, but it is a key element of the :term:`CPython` "
"implementation.  Programmers can call the :func:`sys.getrefcount` function "
"to return the reference count for a particular object."
msgstr ""

msgid "regular package"
msgstr "звичайний пакет"

msgid ""
"A traditional :term:`package`, such as a directory containing an ``__init__."
"py`` file."
msgstr ""
"Традиційний :term:`package`, як-от каталог, що містить файл ``__init__.py``."

msgid "See also :term:`namespace package`."
msgstr "Дивіться також :term:`namespace package`."

msgid "__slots__"
msgstr "__slots__"

msgid ""
"A declaration inside a class that saves memory by pre-declaring space for "
"instance attributes and eliminating instance dictionaries.  Though popular, "
"the technique is somewhat tricky to get right and is best reserved for rare "
"cases where there are large numbers of instances in a memory-critical "
"application."
msgstr ""
"Оголошення всередині класу, яке економить пам’ять шляхом попереднього "
"оголошення місця для атрибутів екземпляра та видалення словників "
"екземплярів. Незважаючи на те, що ця техніка популярна, її дещо складно "
"застосувати, і її найкраще використовувати для рідкісних випадків, коли в "
"програмі, критичній до пам’яті, є велика кількість екземплярів."

msgid "sequence"
msgstr "послідовність"

msgid ""
"An :term:`iterable` which supports efficient element access using integer "
"indices via the :meth:`__getitem__` special method and defines a :meth:"
"`__len__` method that returns the length of the sequence. Some built-in "
"sequence types are :class:`list`, :class:`str`, :class:`tuple`, and :class:"
"`bytes`. Note that :class:`dict` also supports :meth:`__getitem__` and :meth:"
"`__len__`, but is considered a mapping rather than a sequence because the "
"lookups use arbitrary :term:`immutable` keys rather than integers."
msgstr ""
":term:`iterable`, який підтримує ефективний доступ до елементів за допомогою "
"цілочисельних індексів за допомогою спеціального методу :meth:`__getitem__` "
"і визначає метод :meth:`__len__`, який повертає довжину послідовності. Деякі "
"вбудовані типи послідовностей: :class:`list`, :class:`str`, :class:`tuple` "
"і :class:`bytes`. Зауважте, що :class:`dict` також підтримує :meth:"
"`__getitem__` і :meth:`__len__`, але вважається відображенням, а не "
"послідовністю, оскільки під час пошуку використовуються довільні :term:"
"`immutable` ключі, а не цілі числа."

msgid ""
"The :class:`collections.abc.Sequence` abstract base class defines a much "
"richer interface that goes beyond just :meth:`__getitem__` and :meth:"
"`__len__`, adding :meth:`count`, :meth:`index`, :meth:`__contains__`, and :"
"meth:`__reversed__`. Types that implement this expanded interface can be "
"registered explicitly using :func:`~abc.ABCMeta.register`."
msgstr ""
"Абстрактний базовий клас :class:`collections.abc.Sequence` визначає набагато "
"багатший інтерфейс, який виходить за межі просто :meth:`__getitem__` і :meth:"
"`__len__`, додаючи :meth:`count`, :meth:`index`, :meth:`__contains__` і :"
"meth:`__reversed__`. Типи, які реалізують цей розширений інтерфейс, можна "
"явно зареєструвати за допомогою :func:`~abc.ABCMeta.register`."

msgid "set comprehension"
msgstr "встановити розуміння"

msgid ""
"A compact way to process all or part of the elements in an iterable and "
"return a set with the results. ``results = {c for c in 'abracadabra' if c "
"not in 'abc'}`` generates the set of strings ``{'r', 'd'}``.  See :ref:"
"`comprehensions`."
msgstr ""
"Компактний спосіб обробки всіх або частини елементів у ітерації та "
"повернення набору з результатами. ``results = {c for c in 'abracadabra' if c "
"not in 'abc'}`` генерує набір рядків ``{'r', 'd'}``. Дивіться :ref:"
"`comprehensions`."

msgid "single dispatch"
msgstr "єдина відправка"

msgid ""
"A form of :term:`generic function` dispatch where the implementation is "
"chosen based on the type of a single argument."
msgstr ""
"Форма відправки :term:`generic function`, де реалізація вибирається на "
"основі типу одного аргументу."

msgid "slice"
msgstr "шматочок"

msgid ""
"An object usually containing a portion of a :term:`sequence`.  A slice is "
"created using the subscript notation, ``[]`` with colons between numbers "
"when several are given, such as in ``variable_name[1:3:5]``.  The bracket "
"(subscript) notation uses :class:`slice` objects internally."
msgstr ""
"Об’єкт, який зазвичай містить частину :term:`sequence`. Зріз створюється з "
"використанням нижнього індексу ``[]`` з двокрапками між числами, якщо "
"вказано кілька, наприклад, ``variable_name[1:3:5]``. Нотація в дужках "
"(підрядковому) використовує внутрішньо об’єкти :class:`slice`."

msgid "special method"
msgstr "спеціальний метод"

msgid ""
"A method that is called implicitly by Python to execute a certain operation "
"on a type, such as addition.  Such methods have names starting and ending "
"with double underscores.  Special methods are documented in :ref:"
"`specialnames`."
msgstr ""
"Метод, який неявно викликається Python для виконання певної операції над "
"типом, наприклад додавання. Такі методи мають назви, що починаються і "
"закінчуються подвійним підкресленням. Спеціальні методи описані в :ref:"
"`specialnames`."

msgid "statement"
msgstr "заява"

msgid ""
"A statement is part of a suite (a \"block\" of code).  A statement is either "
"an :term:`expression` or one of several constructs with a keyword, such as :"
"keyword:`if`, :keyword:`while` or :keyword:`for`."
msgstr ""
"Оператор є частиною набору (\"блоку\" коду). Інструкція є або :term:"
"`expression`, або однією з кількох конструкцій із ключовим словом, таким як :"
"keyword:`if`, :keyword:`while` або :keyword:`for`."

msgid "strong reference"
msgstr "сильна посилання"

msgid ""
"In Python's C API, a strong reference is a reference to an object which "
"increments the object's reference count when it is created and decrements "
"the object's reference count when it is deleted."
msgstr ""
"В API C Python сильним посиланням є посилання на об’єкт, яке збільшує "
"кількість посилань на об’єкт під час його створення та зменшує кількість "
"посилань на об’єкт, коли його видаляють."

msgid ""
"The :c:func:`Py_NewRef` function can be used to create a strong reference to "
"an object. Usually, the :c:func:`Py_DECREF` function must be called on the "
"strong reference before exiting the scope of the strong reference, to avoid "
"leaking one reference."
msgstr ""
"Функцію :c:func:`Py_NewRef` можна використовувати для створення сильного "
"посилання на об’єкт. Зазвичай функцію :c:func:`Py_DECREF` потрібно викликати "
"для сильного посилання перед виходом із області сильного посилання, щоб "
"уникнути витоку одного посилання."

msgid "See also :term:`borrowed reference`."
msgstr "Дивіться також :term:`borrowed reference`."

msgid "text encoding"
msgstr "кодування тексту"

msgid ""
"A string in Python is a sequence of Unicode code points (in range "
"``U+0000``--``U+10FFFF``). To store or transfer a string, it needs to be "
"serialized as a sequence of bytes."
msgstr ""
"Рядок у Python — це послідовність кодових точок Unicode (у діапазоні "
"``U+0000``--``U+10FFFF``). Щоб зберегти або передати рядок, його потрібно "
"серіалізувати як послідовність байтів."

msgid ""
"Serializing a string into a sequence of bytes is known as \"encoding\", and "
"recreating the string from the sequence of bytes is known as \"decoding\"."
msgstr ""
"Серіалізація рядка в послідовність байтів відома як \"кодування\", а "
"відтворення рядка з послідовності байтів відоме як \"декодування\"."

msgid ""
"There are a variety of different text serialization :ref:`codecs <standard-"
"encodings>`, which are collectively referred to as \"text encodings\"."
msgstr ""
"Існує безліч різних :ref:`кодеків <standard-encodings>` серіалізації тексту, "
"які спільно називаються \"текстовими кодуваннями\"."

msgid "text file"
msgstr "текстовий файл"

msgid ""
"A :term:`file object` able to read and write :class:`str` objects. Often, a "
"text file actually accesses a byte-oriented datastream and handles the :term:"
"`text encoding` automatically. Examples of text files are files opened in "
"text mode (``'r'`` or ``'w'``), :data:`sys.stdin`, :data:`sys.stdout`, and "
"instances of :class:`io.StringIO`."
msgstr ""
"Об’єкт :term:`file object`, здатний читати та записувати об’єкти :class:"
"`str`. Часто текстовий файл насправді отримує доступ до байт-орієнтованого "
"потоку даних і автоматично обробляє :term:`text encoding`. Прикладами "
"текстових файлів є файли, відкриті в текстовому режимі (``'r'`` або "
"``'w'``), :data:`sys.stdin`, :data:`sys.stdout`, а також екземпляри: :class:"
"`io.StringIO`."

msgid ""
"See also :term:`binary file` for a file object able to read and write :term:"
"`bytes-like objects <bytes-like object>`."
msgstr ""
"Дивіться також :term:`binary file` щодо файлового об’єкта, здатного читати "
"та записувати :term:`байтоподібні об’єкти <bytes-like object>`."

msgid "triple-quoted string"
msgstr "рядок із потрійними лапками"

msgid ""
"A string which is bound by three instances of either a quotation mark (\") "
"or an apostrophe (').  While they don't provide any functionality not "
"available with single-quoted strings, they are useful for a number of "
"reasons.  They allow you to include unescaped single and double quotes "
"within a string and they can span multiple lines without the use of the "
"continuation character, making them especially useful when writing "
"docstrings."
msgstr ""
"Рядок, обмежений трьома лапками (\") або апострофом ('). Хоча вони не "
"надають жодної функції, недоступної для рядків із одинарними лапками, вони "
"корисні з кількох причин. Вони дозволяють ви можете включити неекрановані "
"одинарні та подвійні лапки в рядок, і вони можуть охоплювати кілька рядків "
"без використання символу продовження, що робить їх особливо корисними під "
"час написання рядків документів."

msgid "type"
msgstr "тип"

msgid ""
"The type of a Python object determines what kind of object it is; every "
"object has a type.  An object's type is accessible as its :attr:`~instance."
"__class__` attribute or can be retrieved with ``type(obj)``."
msgstr ""
"Тип об'єкта Python визначає тип об'єкта; кожен об'єкт має тип. Тип об’єкта "
"доступний як його атрибут :attr:`~instance.__class__` або може бути "
"отриманий за допомогою ``type(obj)``."

msgid "type alias"
msgstr "псевдонім типу"

msgid "A synonym for a type, created by assigning the type to an identifier."
msgstr "Синонім типу, створений шляхом присвоєння типу ідентифікатору."

msgid ""
"Type aliases are useful for simplifying :term:`type hints <type hint>`. For "
"example::"
msgstr ""
"Псевдоніми типів корисні для спрощення :term:`підказок типу <type hint>`. "
"Наприклад::"

msgid "could be made more readable like this::"
msgstr "можна зробити більш читабельним таким чином::"

msgid "See :mod:`typing` and :pep:`484`, which describe this functionality."
msgstr "Перегляньте :mod:`typing` і :pep:`484`, які описують цю функцію."

msgid "type hint"
msgstr "підказка типу"

msgid ""
"An :term:`annotation` that specifies the expected type for a variable, a "
"class attribute, or a function parameter or return value."
msgstr ""
":term:`annotation`, яка визначає очікуваний тип для змінної, атрибута класу "
"або параметра функції чи значення, що повертається."

msgid ""
"Type hints are optional and are not enforced by Python but they are useful "
"to static type analysis tools, and aid IDEs with code completion and "
"refactoring."
msgstr ""
"Підказки типу є необов’язковими та не застосовуються Python, але вони "
"корисні для інструментів статичного аналізу типів і допомагають IDE із "
"завершенням коду та рефакторингом."

msgid ""
"Type hints of global variables, class attributes, and functions, but not "
"local variables, can be accessed using :func:`typing.get_type_hints`."
msgstr ""
"Доступ до підказок типу глобальних змінних, атрибутів класу та функцій, але "
"не локальних змінних, можна отримати за допомогою :func:`typing."
"get_type_hints`."

msgid "universal newlines"
msgstr "універсальні символи нового рядка"

msgid ""
"A manner of interpreting text streams in which all of the following are "
"recognized as ending a line: the Unix end-of-line convention ``'\\n'``, the "
"Windows convention ``'\\r\\n'``, and the old Macintosh convention "
"``'\\r'``.  See :pep:`278` and :pep:`3116`, as well as :func:`bytes."
"splitlines` for an additional use."
msgstr ""
"Спосіб інтерпретації текстових потоків, у якому все наступне розпізнається "
"як завершення рядка: угода Unix про кінець рядка ``'\\n'``, угода Windows "
"``'\\r\\n'``, і стару конвенцію Macintosh ``'\\r'``. Перегляньте :pep:`278` "
"і :pep:`3116`, а також :func:`bytes.splitlines` для додаткового використання."

msgid "variable annotation"
msgstr "змінна анотація"

msgid "An :term:`annotation` of a variable or a class attribute."
msgstr ":term:`annotation` змінної або атрибута класу."

msgid ""
"When annotating a variable or a class attribute, assignment is optional::"
msgstr ""
"При анотуванні змінної або атрибута класу призначення є необов’язковим:"

msgid ""
"Variable annotations are usually used for :term:`type hints <type hint>`: "
"for example this variable is expected to take :class:`int` values::"
msgstr ""
"Анотації змінних зазвичай використовуються для :term:`підказок типу <type "
"hint>`: наприклад, очікується, що ця змінна прийматиме значення :class:"
"`int`::"

msgid "Variable annotation syntax is explained in section :ref:`annassign`."
msgstr "Синтаксис анотації змінної пояснюється в розділі :ref:`annassign`."

msgid ""
"See :term:`function annotation`, :pep:`484` and :pep:`526`, which describe "
"this functionality. Also see :ref:`annotations-howto` for best practices on "
"working with annotations."
msgstr ""
"Перегляньте :term:`function annotation`, :pep:`484` та :pep:`526`, які "
"описують цю функціональність. Також перегляньте :ref:`annotations-howto`, "
"щоб дізнатися про найкращі практики роботи з анотаціями."

msgid "virtual environment"
msgstr "віртуальне середовище"

msgid ""
"A cooperatively isolated runtime environment that allows Python users and "
"applications to install and upgrade Python distribution packages without "
"interfering with the behaviour of other Python applications running on the "
"same system."
msgstr ""
"Спільно ізольоване середовище виконання, яке дозволяє користувачам і "
"програмам Python встановлювати та оновлювати дистрибутивні пакети Python, не "
"втручаючись у поведінку інших програм Python, що працюють у тій же системі."

msgid "See also :mod:`venv`."
msgstr "Дивіться також :mod:`venv`."

msgid "virtual machine"
msgstr "віртуальна машина"

msgid ""
"A computer defined entirely in software.  Python's virtual machine executes "
"the :term:`bytecode` emitted by the bytecode compiler."
msgstr ""
"Комп’ютер, повністю визначений програмним забезпеченням. Віртуальна машина "
"Python виконує :term:`bytecode`, виданий компілятором байт-коду."

msgid "Zen of Python"
msgstr "Дзен Python"

msgid ""
"Listing of Python design principles and philosophies that are helpful in "
"understanding and using the language.  The listing can be found by typing "
"\"``import this``\" at the interactive prompt."
msgstr ""
"Перелік принципів дизайну та філософії Python, які допоможуть зрозуміти та "
"використовувати мову. Перелік можна знайти, ввівши \"``import this``\" в "
"інтерактивному рядку."
