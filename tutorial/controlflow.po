# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Dmytro Kazanzhy, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-12 16:28+0000\n"
"PO-Revision-Date: 2021-06-28 01:50+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2022\n"
"Language-Team: Ukrainian (https://www.transifex.com/python-doc/teams/5390/"
"uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != "
"11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % "
"100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || "
"(n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

msgid "More Control Flow Tools"
msgstr "Більше інструментів керування потоком"

msgid ""
"Besides the :keyword:`while` statement just introduced, Python uses the "
"usual flow control statements known from other languages, with some twists."
msgstr ""
"Окрім щойно представленого оператора :keyword:`while`, Python використовує "
"звичайні оператори керування потоком, відомі з інших мов, з деякими нюансами."

msgid ":keyword:`!if` Statements"
msgstr ":keyword:`!if` Інструкції"

msgid ""
"Perhaps the most well-known statement type is the :keyword:`if` statement.  "
"For example::"
msgstr ""
"Мабуть, найвідомішим типом операторів є оператор :keyword:`if`. Наприклад::"

msgid ""
"There can be zero or more :keyword:`elif` parts, and the :keyword:`else` "
"part is optional.  The keyword ':keyword:`!elif`' is short for 'else if', "
"and is useful to avoid excessive indentation.  An  :keyword:`!if` ... :"
"keyword:`!elif` ... :keyword:`!elif` ... sequence is a substitute for the "
"``switch`` or ``case`` statements found in other languages."
msgstr ""
"Частин :keyword:`elif` може бути нуль або більше, а частина :keyword:`else` "
"необов’язкова. Ключове слово ':keyword:`!elif`' є скороченням від 'else if' "
"і корисне, щоб уникнути надмірних відступів. Послідовність :keyword:`!"
"if` ... :keyword:`!elif` ... :keyword:`!elif` ... є заміною знайдених "
"операторів ``switch`` або ``case`` іншими мовами."

msgid ""
"If you're comparing the same value to several constants, or checking for "
"specific types or attributes, you may also find the :keyword:`!match` "
"statement useful. For more details see :ref:`tut-match`."
msgstr ""
"Якщо ви порівнюєте те саме значення з декількома константами або перевіряєте "
"певні типи чи атрибути, вам також може бути корисним оператор :keyword:`!"
"match`. Детальніше див. :ref:`tut-match`."

msgid ":keyword:`!for` Statements"
msgstr ":keyword:`!for` Заяви"

msgid ""
"The :keyword:`for` statement in Python differs a bit from what you may be "
"used to in C or Pascal.  Rather than always iterating over an arithmetic "
"progression of numbers (like in Pascal), or giving the user the ability to "
"define both the iteration step and halting condition (as C), Python's :"
"keyword:`!for` statement iterates over the items of any sequence (a list or "
"a string), in the order that they appear in the sequence.  For example (no "
"pun intended):"
msgstr ""
"Оператор :keyword:`for` у Python дещо відрізняється від того, до чого ви "
"звикли в C або Pascal. Замість того, щоб завжди повторювати арифметичну "
"прогресію чисел (як у Паскалі) або давати користувачеві можливість визначати "
"крок ітерації та умову зупинки (як C), оператор Python :keyword:`!for` "
"повторює елементи будь-яка послідовність (список або рядок) у тому порядку, "
"в якому вони з’являються в послідовності. Наприклад (без каламбуру):"

msgid ""
"Code that modifies a collection while iterating over that same collection "
"can be tricky to get right.  Instead, it is usually more straight-forward to "
"loop over a copy of the collection or to create a new collection::"
msgstr ""
"Код, який змінює колекцію під час ітерації над цією ж колекцією, може бути "
"складним для правильного визначення. Замість цього зазвичай простіше "
"виконати цикл по копії колекції або створити нову колекцію:"

msgid "The :func:`range` Function"
msgstr "Функція :func:`range`"

msgid ""
"If you do need to iterate over a sequence of numbers, the built-in function :"
"func:`range` comes in handy.  It generates arithmetic progressions::"
msgstr ""
"Якщо вам все-таки потрібно виконати ітерацію по послідовності чисел, стане в "
"нагоді вбудована функція :func:`range`. Він створює арифметичні прогресії:"

msgid ""
"The given end point is never part of the generated sequence; ``range(10)`` "
"generates 10 values, the legal indices for items of a sequence of length "
"10.  It is possible to let the range start at another number, or to specify "
"a different increment (even negative; sometimes this is called the 'step')::"
msgstr ""
"Дана кінцева точка ніколи не є частиною згенерованої послідовності; "
"``range(10)`` генерує 10 значень, законних індексів для елементів "
"послідовності довжиною 10. Можна дозволити діапазону починатися з іншого "
"числа або вказати інший крок (навіть від’ємний; іноді це називається "
"\"крок\")::"

msgid ""
"To iterate over the indices of a sequence, you can combine :func:`range` "
"and :func:`len` as follows::"
msgstr ""
"Щоб перебирати індекси послідовності, ви можете поєднати :func:`range` і :"
"func:`len` таким чином:"

msgid ""
"In most such cases, however, it is convenient to use the :func:`enumerate` "
"function, see :ref:`tut-loopidioms`."
msgstr ""
"Однак у більшості таких випадків зручно використовувати функцію :func:"
"`enumerate`, див. :ref:`tut-loopidioms`."

msgid "A strange thing happens if you just print a range::"
msgstr "Дивна річ трапляється, якщо ви просто друкуєте діапазон::"

msgid ""
"In many ways the object returned by :func:`range` behaves as if it is a "
"list, but in fact it isn't. It is an object which returns the successive "
"items of the desired sequence when you iterate over it, but it doesn't "
"really make the list, thus saving space."
msgstr ""
"Багато в чому об’єкт, який повертає :func:`range`, поводиться так, ніби це "
"список, але насправді це не так. Це об’єкт, який повертає послідовні "
"елементи потрібної послідовності, коли ви перебираєте його, але насправді "
"він не входить до списку, таким чином економлячи місце."

msgid ""
"We say such an object is :term:`iterable`, that is, suitable as a target for "
"functions and constructs that expect something from which they can obtain "
"successive items until the supply is exhausted.  We have seen that the :"
"keyword:`for` statement is such a construct, while an example of a function "
"that takes an iterable is :func:`sum`::"
msgstr ""
"Ми кажемо, що такий об’єкт є :term:`iterable`, тобто придатним як ціль для "
"функцій і конструкцій, які очікують чогось, з чого вони можуть отримувати "
"послідовні елементи, доки запас не буде вичерпано. Ми бачили, що оператор :"
"keyword:`for` є такою конструкцією, тоді як прикладом функції, яка приймає "
"ітерований елемент, є :func:`sum`::"

msgid ""
"Later we will see more functions that return iterables and take iterables as "
"arguments.  In chapter :ref:`tut-structures`, we will discuss in more detail "
"about :func:`list`."
msgstr ""
"Пізніше ми побачимо більше функцій, які повертають iterables і приймають "
"iterables як аргументи. У розділі :ref:`tut-structures` ми більш детально "
"обговоримо :func:`list`."

msgid ""
":keyword:`!break` and :keyword:`!continue` Statements, and :keyword:`!else` "
"Clauses on Loops"
msgstr ""
":keyword:`!break` і :keyword:`!continue` Інструкції та :keyword:`!else` "
"пропозиції циклів"

msgid ""
"The :keyword:`break` statement, like in C, breaks out of the innermost "
"enclosing :keyword:`for` or :keyword:`while` loop."
msgstr ""
"Оператор :keyword:`break`, як і в C, виривається з внутрішнього охоплюючого "
"циклу :keyword:`for` або :keyword:`while`."

msgid ""
"Loop statements may have an :keyword:`!else` clause; it is executed when the "
"loop terminates through exhaustion of the iterable (with :keyword:`for`) or "
"when the condition becomes false (with :keyword:`while`), but not when the "
"loop is terminated by a :keyword:`break` statement.  This is exemplified by "
"the following loop, which searches for prime numbers::"
msgstr ""
"Оператори циклу можуть мати пункт :keyword:`!else`; він виконується, коли "
"цикл завершується через вичерпання ітерованого (з :keyword:`for`) або коли "
"умова стає хибною (з :keyword:`while`), але не тоді, коли цикл завершується :"
"keyword:`break` оператор. Прикладом цього є наступний цикл, який шукає "
"прості числа:"

msgid ""
"(Yes, this is the correct code.  Look closely: the ``else`` clause belongs "
"to the :keyword:`for` loop, **not** the :keyword:`if` statement.)"
msgstr ""
"(Так, це правильний код. Подивіться уважно: пропозиція ``else`` належить "
"циклу :keyword:`for`, **не** оператору :keyword:`if`.)"

msgid ""
"When used with a loop, the ``else`` clause has more in common with the "
"``else`` clause of a :keyword:`try` statement than it does with that of :"
"keyword:`if` statements: a :keyword:`try` statement's ``else`` clause runs "
"when no exception occurs, and a loop's ``else`` clause runs when no "
"``break`` occurs. For more on the :keyword:`!try` statement and exceptions, "
"see :ref:`tut-handling`."
msgstr ""
"При використанні з циклом пропозиція ``else`` має більше спільного з "
"пропозицією ``else`` оператора :keyword:`try`, ніж з пропозицією :keyword:"
"`if`: a : Речення ``else`` інструкції за :keyword:`try` виконується, коли не "
"відбувається винятків, а речення ``else`` циклу виконується, коли не "
"відбувається ``розрив``. Щоб дізнатися більше про оператор :keyword:`!try` "
"та винятки, перегляньте :ref:`tut-handling`."

msgid ""
"The :keyword:`continue` statement, also borrowed from C, continues with the "
"next iteration of the loop::"
msgstr ""
"Оператор :keyword:`continue`, також запозичений з C, продовжує наступну "
"ітерацію циклу::"

msgid ":keyword:`!pass` Statements"
msgstr ":keyword:`!pass` Інструкції"

msgid ""
"The :keyword:`pass` statement does nothing. It can be used when a statement "
"is required syntactically but the program requires no action. For example::"
msgstr ""
"Оператор :keyword:`pass` нічого не робить. Його можна використовувати, коли "
"оператор потрібен синтаксично, але програма не вимагає жодних дій. "
"Наприклад::"

msgid "This is commonly used for creating minimal classes::"
msgstr "Це зазвичай використовується для створення мінімальних класів:"

msgid ""
"Another place :keyword:`pass` can be used is as a place-holder for a "
"function or conditional body when you are working on new code, allowing you "
"to keep thinking at a more abstract level.  The :keyword:`!pass` is silently "
"ignored::"
msgstr ""
"Інше місце, яке можна використовувати :keyword:`pass`, це як заповнювач для "
"функції або умовного тіла, коли ви працюєте над новим кодом, що дозволяє вам "
"продовжувати мислити на більш абстрактному рівні. :keyword:`!pass` мовчки "
"ігнорується::"

msgid ":keyword:`!match` Statements"
msgstr ":keyword:`!match` Інструкції"

msgid ""
"A :keyword:`match` statement takes an expression and compares its value to "
"successive patterns given as one or more case blocks.  This is superficially "
"similar to a switch statement in C, Java or JavaScript (and many other "
"languages), but it's more similar to pattern matching in languages like Rust "
"or Haskell. Only the first pattern that matches gets executed and it can "
"also extract components (sequence elements or object attributes) from the "
"value into variables."
msgstr ""

msgid ""
"The simplest form compares a subject value against one or more literals::"
msgstr ""
"Найпростіша форма порівнює значення предмета з одним або кількома "
"літералами::"

msgid ""
"Note the last block: the \"variable name\" ``_`` acts as a *wildcard* and "
"never fails to match. If no case matches, none of the branches is executed."
msgstr ""
"Зверніть увагу на останній блок: \"ім’я змінної\" ``_`` діє як *знак "
"підстановки* і ніколи не збігається. Якщо жоден регістр не відповідає, жодна "
"з гілок не виконується."

msgid ""
"You can combine several literals in a single pattern using ``|`` (\"or\")::"
msgstr ""
"Ви можете поєднати кілька літералів в одному шаблоні за допомогою ``|`` "
"(\"або\")::"

msgid ""
"Patterns can look like unpacking assignments, and can be used to bind "
"variables::"
msgstr ""
"Патерни можуть виглядати як завдання розпакування, і їх можна "
"використовувати для зв’язування змінних::"

msgid ""
"Study that one carefully!  The first pattern has two literals, and can be "
"thought of as an extension of the literal pattern shown above.  But the next "
"two patterns combine a literal and a variable, and the variable *binds* a "
"value from the subject (``point``).  The fourth pattern captures two values, "
"which makes it conceptually similar to the unpacking assignment ``(x, y) = "
"point``."
msgstr ""
"Вивчіть це уважно! Перший шаблон містить два літерали, і його можна "
"розглядати як розширення літерального шаблону, показаного вище. Але наступні "
"два шаблони поєднують літерал і змінну, а змінна *зв’язує* значення з теми "
"(``точка``). Четвертий шаблон фіксує два значення, що робить його "
"концептуально подібним до призначення розпакування ``(x, y) = point``."

msgid ""
"If you are using classes to structure your data you can use the class name "
"followed by an argument list resembling a constructor, but with the ability "
"to capture attributes into variables::"
msgstr ""
"Якщо ви використовуєте класи для структурування своїх даних, ви можете "
"використовувати назву класу, за якою слідує список аргументів, схожий на "
"конструктор, але з можливістю запису атрибутів у змінні::"

msgid ""
"You can use positional parameters with some builtin classes that provide an "
"ordering for their attributes (e.g. dataclasses). You can also define a "
"specific position for attributes in patterns by setting the "
"``__match_args__`` special attribute in your classes. If it's set to (\"x\", "
"\"y\"), the following patterns are all equivalent (and all bind the ``y`` "
"attribute to the ``var`` variable)::"
msgstr ""
"Ви можете використовувати позиційні параметри з деякими вбудованими класами, "
"які забезпечують порядок для своїх атрибутів (наприклад, класи даних). Ви "
"також можете визначити конкретну позицію для атрибутів у шаблонах, "
"встановивши спеціальний атрибут ``__match_args__`` у своїх класах. Якщо для "
"нього встановлено значення (\"x\", \"y\"), усі наступні шаблони еквівалентні "
"(і всі прив'язують атрибут ``y`` до змінної ``var``):"

msgid ""
"A recommended way to read patterns is to look at them as an extended form of "
"what you would put on the left of an assignment, to understand which "
"variables would be set to what. Only the standalone names (like ``var`` "
"above) are assigned to by a match statement. Dotted names (like ``foo."
"bar``), attribute names (the ``x=`` and ``y=`` above) or class names "
"(recognized by the \"(...)\" next to them like ``Point`` above) are never "
"assigned to."
msgstr ""
"Рекомендований спосіб читання шаблонів — розглядати їх як розширену форму "
"того, що ви розміщуєте ліворуч від призначення, щоб зрозуміти, яким змінним "
"буде встановлено значення. Лише автономні імена (як ``var`` вище) "
"призначаються оператором відповідності. Назви з крапками (наприклад, ``foo."
"bar``), назви атрибутів (``x=`` і ``y=`` вище) або назви класів "
"(розпізнаються за \"(...)\" поруч із ними, як ``Точка`` вище) ніколи не "
"призначаються."

msgid ""
"Patterns can be arbitrarily nested.  For example, if we have a short list of "
"points, we could match it like this::"
msgstr ""
"Візерунки можуть бути довільно вкладеними. Наприклад, якщо у нас є короткий "
"список точок, ми можемо зіставити його так:"

msgid ""
"We can add an ``if`` clause to a pattern, known as a \"guard\".  If the "
"guard is false, ``match`` goes on to try the next case block.  Note that "
"value capture happens before the guard is evaluated::"
msgstr ""
"Ми можемо додати умову ``if`` до шаблону, відомого як \"guard\". Якщо guard "
"false, ``match`` переходить до наступного блоку case. Зауважте, що "
"захоплення значення відбувається до оцінки захисника:"

msgid "Several other key features of this statement:"
msgstr "Кілька інших ключових особливостей цього твердження:"

msgid ""
"Like unpacking assignments, tuple and list patterns have exactly the same "
"meaning and actually match arbitrary sequences.  An important exception is "
"that they don't match iterators or strings."
msgstr ""
"Подібно до завдань розпакування, шаблони кортежу та списку мають однакове "
"значення та фактично відповідають довільним послідовностям. Важливим "
"винятком є те, що вони не відповідають ітераторам або рядкам."

msgid ""
"Sequence patterns support extended unpacking: ``[x, y, *rest]`` and ``(x, y, "
"*rest)`` work similar to unpacking assignments.  The name after ``*`` may "
"also be ``_``, so ``(x, y, *_)`` matches a sequence of at least two items "
"without binding the remaining items."
msgstr ""
"Шаблони послідовності підтримують розширене розпакування: ``[x, y, *rest]`` "
"і ``(x, y, *rest)`` працюють подібно до призначень розпакування. Ім’я після "
"``*`` також може бути ``_``, тому ``(x, y, *_)`` відповідає послідовності "
"принаймні двох елементів без зв’язування решти елементів."

msgid ""
"Mapping patterns: ``{\"bandwidth\": b, \"latency\": l}`` captures the "
"``\"bandwidth\"`` and ``\"latency\"`` values from a dictionary.  Unlike "
"sequence patterns, extra keys are ignored.  An unpacking like ``**rest`` is "
"also supported.  (But ``**_`` would be redundant, so it is not allowed.)"
msgstr ""
"Шаблони зіставлення: ``{\"bandwidth\": b, \"latency\": l}`` фіксує значення "
"``\"bandwidth\"`` і ``\"latency\"`` зі словника. На відміну від шаблонів "
"послідовності, додаткові ключі ігноруються. Також підтримується розпакування "
"на зразок ``**rest``. (Але ``**_`` буде зайвим, тому це заборонено.)"

msgid "Subpatterns may be captured using the ``as`` keyword::"
msgstr "Підшаблони можуть бути захоплені за допомогою ключового слова ``as``::"

msgid ""
"will capture the second element of the input as ``p2`` (as long as the input "
"is a sequence of two points)"
msgstr ""
"захопить другий елемент вхідних даних як ``p2`` (якщо вхідні дані є "
"послідовністю з двох точок)"

msgid ""
"Most literals are compared by equality, however the singletons ``True``, "
"``False`` and ``None`` are compared by identity."
msgstr ""
"Більшість літералів порівнюються за рівністю, однак синглетони ``True``, "
"``False`` і ``None`` порівнюються за тотожністю."

msgid ""
"Patterns may use named constants.  These must be dotted names to prevent "
"them from being interpreted as capture variable::"
msgstr ""
"Шаблони можуть використовувати іменовані константи. Ці імена мають бути "
"розділені крапками, щоб запобігти їх інтерпретації як змінну захоплення::"

msgid ""
"For a more detailed explanation and additional examples, you can look into :"
"pep:`636` which is written in a tutorial format."
msgstr ""
"Для більш детального пояснення та додаткових прикладів ви можете "
"переглянути :pep:`636`, який написаний у форматі підручника."

msgid "Defining Functions"
msgstr "Визначення функцій"

msgid ""
"We can create a function that writes the Fibonacci series to an arbitrary "
"boundary::"
msgstr ""
"Ми можемо створити функцію, яка записує ряд Фібоначчі до довільної границі:"

msgid ""
"The keyword :keyword:`def` introduces a function *definition*.  It must be "
"followed by the function name and the parenthesized list of formal "
"parameters. The statements that form the body of the function start at the "
"next line, and must be indented."
msgstr ""
"Ключове слово :keyword:`def` вводить *визначення* функції. Після нього має "
"йти ім’я функції та список формальних параметрів у дужках. Оператори, які "
"утворюють тіло функції, починаються з наступного рядка та мають бути з "
"відступом."

msgid ""
"The first statement of the function body can optionally be a string literal; "
"this string literal is the function's documentation string, or :dfn:"
"`docstring`. (More about docstrings can be found in the section :ref:`tut-"
"docstrings`.) There are tools which use docstrings to automatically produce "
"online or printed documentation, or to let the user interactively browse "
"through code; it's good practice to include docstrings in code that you "
"write, so make a habit of it."
msgstr ""
"Перший оператор тіла функції необов’язково може бути рядковим літералом; цей "
"рядковий літерал є рядком документації функції, або :dfn:`docstring`. "
"(Більше про рядки документів можна знайти в розділі :ref:`tut-docstrings`.) "
"Існують інструменти, які використовують рядки документів для автоматичного "
"створення онлайнової або друкованої документації або для того, щоб "
"користувач міг інтерактивно переглядати код; добре включати рядки "
"документації в код, який ви пишете, тож візьміть це за звичку."

msgid ""
"The *execution* of a function introduces a new symbol table used for the "
"local variables of the function.  More precisely, all variable assignments "
"in a function store the value in the local symbol table; whereas variable "
"references first look in the local symbol table, then in the local symbol "
"tables of enclosing functions, then in the global symbol table, and finally "
"in the table of built-in names. Thus, global variables and variables of "
"enclosing functions cannot be directly assigned a value within a function "
"(unless, for global variables, named in a :keyword:`global` statement, or, "
"for variables of enclosing functions, named in a :keyword:`nonlocal` "
"statement), although they may be referenced."
msgstr ""
"*Виконання* функції вводить нову таблицю символів, яка використовується для "
"локальних змінних функції. Точніше, усі призначення змінних у функції "
"зберігають значення в локальній таблиці символів; тоді як посилання на "
"змінні спочатку шукають у локальній таблиці символів, потім у локальних "
"таблицях символів охоплюючих функцій, потім у глобальній таблиці символів і, "
"нарешті, у таблиці вбудованих імен. Таким чином, глобальним змінним і "
"змінним охоплюючих функцій не можна безпосередньо присвоїти значення в межах "
"функції (якщо для глобальних змінних, названих у операторі :keyword:"
"`global`, або для змінних охоплюючих функцій, названих у :keyword:"
"`nonlocal`), хоча на них можна посилатися."

msgid ""
"The actual parameters (arguments) to a function call are introduced in the "
"local symbol table of the called function when it is called; thus, arguments "
"are passed using *call by value* (where the *value* is always an object "
"*reference*, not the value of the object). [#]_ When a function calls "
"another function, or calls itself recursively, a new local symbol table is "
"created for that call."
msgstr ""
"Фактичні параметри (аргументи) виклику функції вводяться в локальну таблицю "
"символів викликаної функції під час її виклику; таким чином, аргументи "
"передаються за допомогою *виклику за значенням* (де *значення* завжди є "
"*посиланням* на об’єкт, а не значенням об’єкта). [#]_ Коли функція викликає "
"іншу функцію або рекурсивно викликає саму себе, для цього виклику "
"створюється нова локальна таблиця символів."

msgid ""
"A function definition associates the function name with the function object "
"in the current symbol table.  The interpreter recognizes the object pointed "
"to by that name as a user-defined function.  Other names can also point to "
"that same function object and can also be used to access the function::"
msgstr ""
"Визначення функції пов’язує назву функції з об’єктом функції в поточній "
"таблиці символів. Інтерпретатор розпізнає об'єкт, на який вказує це ім'я, як "
"функцію, визначену користувачем. Інші імена також можуть вказувати на той "
"самий об’єкт функції та також можуть використовуватися для доступу до "
"функції::"

msgid ""
"Coming from other languages, you might object that ``fib`` is not a function "
"but a procedure since it doesn't return a value.  In fact, even functions "
"without a :keyword:`return` statement do return a value, albeit a rather "
"boring one.  This value is called ``None`` (it's a built-in name).  Writing "
"the value ``None`` is normally suppressed by the interpreter if it would be "
"the only value written. You can see it if you really want to using :func:"
"`print`::"
msgstr ""
"Виходячи з інших мов, ви можете заперечити, що ``fib`` — це не функція, а "
"процедура, оскільки вона не повертає значення. Фактично, навіть функції без "
"оператора :keyword:`return` повертають значення, хоча й досить нудне. Це "
"значення називається ``None`` (це вбудоване ім'я). Запис значення ``None`` "
"зазвичай пригнічується інтерпретатором, якщо це буде єдине записане "
"значення. Ви можете побачити це, якщо дійсно хочете використовувати :func:"
"`print`::"

msgid ""
"It is simple to write a function that returns a list of the numbers of the "
"Fibonacci series, instead of printing it::"
msgstr ""
"Дуже просто написати функцію, яка повертає список чисел ряду Фібоначчі, "
"замість того, щоб друкувати його:"

msgid "This example, as usual, demonstrates some new Python features:"
msgstr "Цей приклад, як завжди, демонструє деякі нові функції Python:"

msgid ""
"The :keyword:`return` statement returns with a value from a function. :"
"keyword:`!return` without an expression argument returns ``None``. Falling "
"off the end of a function also returns ``None``."
msgstr ""
"Оператор :keyword:`return` повертає значення з функції. :keyword:`!return` "
"без аргументу-виразу повертає ``None``. Випадання кінця функції також "
"повертає ``None``."

msgid ""
"The statement ``result.append(a)`` calls a *method* of the list object "
"``result``.  A method is a function that 'belongs' to an object and is named "
"``obj.methodname``, where ``obj`` is some object (this may be an "
"expression), and ``methodname`` is the name of a method that is defined by "
"the object's type. Different types define different methods.  Methods of "
"different types may have the same name without causing ambiguity.  (It is "
"possible to define your own object types and methods, using *classes*, see :"
"ref:`tut-classes`) The method :meth:`append` shown in the example is defined "
"for list objects; it adds a new element at the end of the list.  In this "
"example it is equivalent to ``result = result + [a]``, but more efficient."
msgstr ""
"Оператор ``result.append(a)`` викликає *метод* об’єкта списку ``result``. "
"Метод — це функція, яка \"належить\" об’єкту та має назву \"obj."
"methodname\", де \"obj\" — деякий об’єкт (це може бути вираз), а "
"\"methodname\" — ім’я метод, який визначається типом об'єкта. Різні типи "
"визначають різні методи. Методи різних типів можуть мати однакові назви, не "
"викликаючи двозначності. (Можна визначити власні типи об’єктів і методи, "
"використовуючи *класи*, див. :ref:`tut-classes`) Метод :meth:`append`, "
"показаний у прикладі, визначено для об’єктів списку; він додає новий елемент "
"у кінець списку. У цьому прикладі це еквівалентно ``результат = результат + "
"[a]``, але ефективніше."

msgid "More on Defining Functions"
msgstr "Докладніше про визначення функцій"

msgid ""
"It is also possible to define functions with a variable number of arguments. "
"There are three forms, which can be combined."
msgstr ""
"Також можна визначати функції зі змінною кількістю аргументів. Є три форми, "
"які можна комбінувати."

msgid "Default Argument Values"
msgstr "Значення аргументів за замовчуванням"

msgid ""
"The most useful form is to specify a default value for one or more "
"arguments. This creates a function that can be called with fewer arguments "
"than it is defined to allow.  For example::"
msgstr ""
"Найбільш корисною формою є вказати значення за умовчанням для одного або "
"кількох аргументів. Це створює функцію, яку можна викликати з меншою "
"кількістю аргументів, ніж це дозволено. Наприклад::"

msgid "This function can be called in several ways:"
msgstr "Цю функцію можна викликати кількома способами:"

msgid ""
"giving only the mandatory argument: ``ask_ok('Do you really want to quit?')``"
msgstr ""
"вказуючи лише обов’язковий аргумент: ``ask_ok('Ви дійсно хочете вийти?')``"

msgid ""
"giving one of the optional arguments: ``ask_ok('OK to overwrite the file?', "
"2)``"
msgstr ""
"надання одного з необов’язкових аргументів: ``ask_ok('ОК перезаписати "
"файл?', 2)``"

msgid ""
"or even giving all arguments: ``ask_ok('OK to overwrite the file?', 2, 'Come "
"on, only yes or no!')``"
msgstr ""
"або навіть надавши всі аргументи: ``ask_ok('Добре перезаписати файл?', 2, "
"'Давай, тільки так чи ні!')``"

msgid ""
"This example also introduces the :keyword:`in` keyword. This tests whether "
"or not a sequence contains a certain value."
msgstr ""
"У цьому прикладі також представлено ключове слово :keyword:`in`. Це "
"перевіряє, чи містить послідовність певне значення."

msgid ""
"The default values are evaluated at the point of function definition in the "
"*defining* scope, so that ::"
msgstr ""
"Значення за замовчуванням оцінюються в точці визначення функції в області "
"*defining*, так що:"

msgid "will print ``5``."
msgstr "надрукує ``5``."

msgid ""
"**Important warning:**  The default value is evaluated only once. This makes "
"a difference when the default is a mutable object such as a list, "
"dictionary, or instances of most classes.  For example, the following "
"function accumulates the arguments passed to it on subsequent calls::"
msgstr ""
"**Важливе попередження:** Значення за замовчуванням оцінюється лише один "
"раз. Це має значення, коли за умовчанням є змінний об’єкт, наприклад список, "
"словник або екземпляри більшості класів. Наприклад, наступна функція "
"накопичує аргументи, передані їй під час наступних викликів::"

msgid "This will print ::"
msgstr "Це надрукує ::"

msgid ""
"If you don't want the default to be shared between subsequent calls, you can "
"write the function like this instead::"
msgstr ""
"Якщо ви не хочете, щоб значення за замовчуванням використовувалися для "
"наступних викликів, ви можете написати функцію так:"

msgid "Keyword Arguments"
msgstr "Аргументи ключових слів"

msgid ""
"Functions can also be called using :term:`keyword arguments <keyword "
"argument>` of the form ``kwarg=value``.  For instance, the following "
"function::"
msgstr ""
"Функції також можна викликати за допомогою :term:`аргументів ключового слова "
"<keyword argument>` у формі ``kwarg=значення``. Наприклад, така функція::"

msgid ""
"accepts one required argument (``voltage``) and three optional arguments "
"(``state``, ``action``, and ``type``).  This function can be called in any "
"of the following ways::"
msgstr ""
"приймає один обов’язковий аргумент (``напруга``) і три необов’язкові "
"аргументи (``стан``, ``дія`` і ``тип``). Цю функцію можна викликати будь-"
"яким із наведених нижче способів:"

msgid "but all the following calls would be invalid::"
msgstr "але всі наступні виклики будуть недійсними::"

msgid ""
"In a function call, keyword arguments must follow positional arguments. All "
"the keyword arguments passed must match one of the arguments accepted by the "
"function (e.g. ``actor`` is not a valid argument for the ``parrot`` "
"function), and their order is not important.  This also includes non-"
"optional arguments (e.g. ``parrot(voltage=1000)`` is valid too). No argument "
"may receive a value more than once. Here's an example that fails due to this "
"restriction::"
msgstr ""
"Під час виклику функції ключові аргументи повинні слідувати за позиційними "
"аргументами. Усі передані ключові аргументи мають відповідати одному з "
"аргументів, прийнятих функцією (наприклад, ``actor`` не є дійсним аргументом "
"для ``parrot`` функції), і їх порядок не важливий. Це також включає "
"необов’язкові аргументи (наприклад, ``parrot(voltage=1000)`` також дійсний). "
"Жоден аргумент не може отримати значення більше одного разу. Ось приклад, "
"який не працює через це обмеження::"

msgid ""
"When a final formal parameter of the form ``**name`` is present, it receives "
"a dictionary (see :ref:`typesmapping`) containing all keyword arguments "
"except for those corresponding to a formal parameter.  This may be combined "
"with a formal parameter of the form ``*name`` (described in the next "
"subsection) which receives a :ref:`tuple <tut-tuples>` containing the "
"positional arguments beyond the formal parameter list.  (``*name`` must "
"occur before ``**name``.) For example, if we define a function like this::"
msgstr ""
"Коли присутній остаточний формальний параметр у формі ``**name``, він "
"отримує словник (див. :ref:`typesmapping`), який містить усі ключові "
"аргументи, за винятком тих, що відповідають формальному параметру. Це можна "
"поєднати з формальним параметром у формі ``*name`` (описано в наступному "
"підрозділі), який отримує :ref:`tuple <tut-tuples>`, що містить позиційні "
"аргументи поза формальним списком параметрів. (``*name`` має бути перед "
"``**name``.) Наприклад, якщо ми визначимо таку функцію:"

msgid "It could be called like this::"
msgstr "Це можна назвати так::"

msgid "and of course it would print:"
msgstr "і, звичайно, він буде друкувати:"

msgid ""
"Note that the order in which the keyword arguments are printed is guaranteed "
"to match the order in which they were provided in the function call."
msgstr ""
"Зауважте, що порядок друку ключових аргументів гарантовано збігається з "
"порядком, у якому вони були надані під час виклику функції."

msgid "Special parameters"
msgstr "Спеціальні параметри"

msgid ""
"By default, arguments may be passed to a Python function either by position "
"or explicitly by keyword. For readability and performance, it makes sense to "
"restrict the way arguments can be passed so that a developer need only look "
"at the function definition to determine if items are passed by position, by "
"position or keyword, or by keyword."
msgstr ""
"За замовчуванням аргументи можуть передаватися функції Python за позицією "
"або явно за ключовим словом. Для зручності читання та продуктивності має "
"сенс обмежити спосіб передачі аргументів, щоб розробнику потрібно було "
"дивитися лише на визначення функції, щоб визначити, чи передаються елементи "
"за позицією, за позицією чи ключовим словом або за ключовим словом."

msgid "A function definition may look like:"
msgstr "Визначення функції може виглядати так:"

msgid ""
"where ``/`` and ``*`` are optional. If used, these symbols indicate the kind "
"of parameter by how the arguments may be passed to the function: positional-"
"only, positional-or-keyword, and keyword-only. Keyword parameters are also "
"referred to as named parameters."
msgstr ""
"де ``/`` і ``*`` необов'язкові. Якщо використовуються, ці символи вказують "
"на тип параметра за допомогою того, як аргументи можуть бути передані до "
"функції: лише позиційні, позиційні чи ключові слова та лише ключові слова. "
"Параметри ключових слів також називають іменованими параметрами."

msgid "Positional-or-Keyword Arguments"
msgstr "Позиційні або ключові аргументи"

msgid ""
"If ``/`` and ``*`` are not present in the function definition, arguments may "
"be passed to a function by position or by keyword."
msgstr ""
"Якщо ``/`` і ``*`` відсутні у визначенні функції, аргументи можуть бути "
"передані функції за позицією або за ключовим словом."

msgid "Positional-Only Parameters"
msgstr "Лише позиційні параметри"

msgid ""
"Looking at this in a bit more detail, it is possible to mark certain "
"parameters as *positional-only*. If *positional-only*, the parameters' order "
"matters, and the parameters cannot be passed by keyword. Positional-only "
"parameters are placed before a ``/`` (forward-slash). The ``/`` is used to "
"logically separate the positional-only parameters from the rest of the "
"parameters. If there is no ``/`` in the function definition, there are no "
"positional-only parameters."
msgstr ""
"Розглянувши це трохи детальніше, можна позначити певні параметри як *тільки "
"позиційні*. Якщо *лише позиційний*, порядок параметрів має значення, і "
"параметри не можуть бути передані за ключовим словом. Лише позиційні "
"параметри розміщуються перед ``/`` (коса риска). ``/`` використовується для "
"логічного відокремлення лише позиційних параметрів від решти параметрів. "
"Якщо у визначенні функції немає ``/``, немає позиційних параметрів."

msgid ""
"Parameters following the ``/`` may be *positional-or-keyword* or *keyword-"
"only*."
msgstr ""
"Параметри після ``/`` можуть бути *positional-or-keyword* або *keyword-only*."

msgid "Keyword-Only Arguments"
msgstr "Аргументи лише за ключовими словами"

msgid ""
"To mark parameters as *keyword-only*, indicating the parameters must be "
"passed by keyword argument, place an ``*`` in the arguments list just before "
"the first *keyword-only* parameter."
msgstr ""
"Щоб позначити параметри як *лише ключове слово*, вказавши, що параметри "
"повинні бути передані аргументом ключового слова, помістіть ``*`` у списку "
"аргументів безпосередньо перед першим параметром *лише ключове*."

msgid "Function Examples"
msgstr "Приклади функцій"

msgid ""
"Consider the following example function definitions paying close attention "
"to the markers ``/`` and ``*``::"
msgstr ""
"Розглянемо наступні приклади визначення функцій, звертаючи особливу увагу на "
"маркери ``/`` і ``*``::"

msgid ""
"The first function definition, ``standard_arg``, the most familiar form, "
"places no restrictions on the calling convention and arguments may be passed "
"by position or keyword::"
msgstr ""
"Перше визначення функції, ``standard_arg``, найвідоміша форма, не накладає "
"обмежень на угоду про виклики, і аргументи можуть передаватися за позицією "
"або ключовим словом::"

msgid ""
"The second function ``pos_only_arg`` is restricted to only use positional "
"parameters as there is a ``/`` in the function definition::"
msgstr ""
"Друга функція ``pos_only_arg`` обмежена використанням лише позиційних "
"параметрів, оскільки у визначенні функції є ``/``::"

msgid ""
"The third function ``kwd_only_args`` only allows keyword arguments as "
"indicated by a ``*`` in the function definition::"
msgstr ""
"Третя функція ``kwd_only_args`` дозволяє лише ключові аргументи, як "
"зазначено ``*`` у визначенні функції::"

msgid ""
"And the last uses all three calling conventions in the same function "
"definition::"
msgstr ""
"І останній використовує всі три угоди про виклики в одному визначенні "
"функції:"

msgid ""
"Finally, consider this function definition which has a potential collision "
"between the positional argument ``name``  and ``**kwds`` which has ``name`` "
"as a key::"
msgstr ""
"Нарешті, розглянемо це визначення функції, яке має потенційну колізію між "
"позиційним аргументом ``name`` і ``**kwds``, який має ``name`` як ключ::"

msgid ""
"There is no possible call that will make it return ``True`` as the keyword "
"``'name'`` will always bind to the first parameter. For example::"
msgstr ""
"Немає можливого виклику, який змусить його повернути ``True``, оскільки "
"ключове слово ``'name''`` завжди прив’язуватиметься до першого параметра. "
"Наприклад::"

msgid ""
"But using ``/`` (positional only arguments), it is possible since it allows "
"``name`` as a positional argument and ``'name'`` as a key in the keyword "
"arguments::"
msgstr ""
"Але використання ``/`` (лише позиційні аргументи) є можливим, оскільки воно "
"дозволяє ``name`` як позиційний аргумент і ``'name'`` як ключ в аргументах "
"ключового слова::"

msgid ""
"In other words, the names of positional-only parameters can be used in "
"``**kwds`` without ambiguity."
msgstr ""
"Іншими словами, назви лише позиційних параметрів можна використовувати в "
"``**kwds`` без двозначності."

msgid "Recap"
msgstr "Підведення підсумків"

msgid ""
"The use case will determine which parameters to use in the function "
"definition::"
msgstr ""
"Варіант використання визначить, які параметри використовувати у визначенні "
"функції:"

msgid "As guidance:"
msgstr "Як керівництво:"

msgid ""
"Use positional-only if you want the name of the parameters to not be "
"available to the user. This is useful when parameter names have no real "
"meaning, if you want to enforce the order of the arguments when the function "
"is called or if you need to take some positional parameters and arbitrary "
"keywords."
msgstr ""
"Використовуйте тільки позиційне значення, якщо ви хочете, щоб назва "
"параметрів була недоступна для користувача. Це корисно, коли назви "
"параметрів не мають реального значення, якщо ви хочете забезпечити порядок "
"аргументів під час виклику функції або якщо вам потрібно взяти деякі "
"позиційні параметри та довільні ключові слова."

msgid ""
"Use keyword-only when names have meaning and the function definition is more "
"understandable by being explicit with names or you want to prevent users "
"relying on the position of the argument being passed."
msgstr ""
"Використовуйте ключові слова лише тоді, коли імена мають значення, а "
"визначення функції є більш зрозумілим через чіткі імена або ви хочете "
"запобігти тому, щоб користувачі покладалися на позицію переданого аргументу."

msgid ""
"For an API, use positional-only to prevent breaking API changes if the "
"parameter's name is modified in the future."
msgstr ""
"Для API використовуйте тільки позиційний, щоб запобігти несправним змінам "
"API, якщо назву параметра буде змінено в майбутньому."

msgid "Arbitrary Argument Lists"
msgstr "Списки довільних аргументів"

msgid ""
"Finally, the least frequently used option is to specify that a function can "
"be called with an arbitrary number of arguments.  These arguments will be "
"wrapped up in a tuple (see :ref:`tut-tuples`).  Before the variable number "
"of arguments, zero or more normal arguments may occur. ::"
msgstr ""
"Нарешті, найменш часто використовуваний варіант - це вказати, що функція "
"може бути викликана з довільною кількістю аргументів. Ці аргументи будуть "
"загорнуті в кортеж (див. :ref:`tut-tuples`). Перед змінною кількістю "
"аргументів може бути нуль або більше нормальних аргументів. ::"

msgid ""
"Normally, these *variadic* arguments will be last in the list of formal "
"parameters, because they scoop up all remaining input arguments that are "
"passed to the function. Any formal parameters which occur after the "
"``*args`` parameter are 'keyword-only' arguments, meaning that they can only "
"be used as keywords rather than positional arguments. ::"
msgstr ""
"Зазвичай ці *варіативні* аргументи будуть останніми в списку формальних "
"параметрів, оскільки вони збирають усі вхідні аргументи, що залишилися, які "
"передаються функції. Будь-які формальні параметри, які виникають після "
"параметра ``*args``, є аргументами \"тільки ключового слова\", тобто їх "
"можна використовувати лише як ключові слова, а не як позиційні аргументи. ::"

msgid "Unpacking Argument Lists"
msgstr "Розпакування списків аргументів"

msgid ""
"The reverse situation occurs when the arguments are already in a list or "
"tuple but need to be unpacked for a function call requiring separate "
"positional arguments.  For instance, the built-in :func:`range` function "
"expects separate *start* and *stop* arguments.  If they are not available "
"separately, write the function call with the  ``*``\\ -operator to unpack "
"the arguments out of a list or tuple::"
msgstr ""
"Зворотна ситуація виникає, коли аргументи вже є в списку або кортежі, але їх "
"потрібно розпакувати для виклику функції, що потребує окремих позиційних "
"аргументів. Наприклад, вбудована функція :func:`range` очікує окремих "
"аргументів *start* і *stop*. Якщо вони недоступні окремо, напишіть виклик "
"функції з оператором ``*``\\, щоб розпакувати аргументи зі списку або "
"кортежу::"

msgid ""
"In the same fashion, dictionaries can deliver keyword arguments with the "
"``**``\\ -operator::"
msgstr ""
"Таким же чином словники можуть надавати аргументи ключових слів за допомогою "
"оператора ``**``\\::"

msgid "Lambda Expressions"
msgstr "Лямбда-вирази"

msgid ""
"Small anonymous functions can be created with the :keyword:`lambda` keyword. "
"This function returns the sum of its two arguments: ``lambda a, b: a+b``. "
"Lambda functions can be used wherever function objects are required.  They "
"are syntactically restricted to a single expression.  Semantically, they are "
"just syntactic sugar for a normal function definition.  Like nested function "
"definitions, lambda functions can reference variables from the containing "
"scope::"
msgstr ""
"Невеликі анонімні функції можна створювати за допомогою ключового слова :"
"keyword:`lambda`. Ця функція повертає суму своїх двох аргументів: ``лямбда "
"a, b: a+b``. Лямбда-функції можна використовувати скрізь, де потрібні "
"функціональні об’єкти. Вони синтаксично обмежені одним виразом. Семантично "
"вони є лише синтаксичним цукром для нормального визначення функції. Як і "
"визначення вкладених функцій, лямбда-функції можуть посилатися на змінні з "
"області видимості::"

msgid ""
"The above example uses a lambda expression to return a function.  Another "
"use is to pass a small function as an argument::"
msgstr ""
"У наведеному вище прикладі використовується лямбда-вираз для повернення "
"функції. Інше використання - передача невеликої функції як аргумент::"

msgid "Documentation Strings"
msgstr "Рядки документації"

msgid ""
"Here are some conventions about the content and formatting of documentation "
"strings."
msgstr "Ось деякі умовності щодо вмісту та форматування рядків документації."

msgid ""
"The first line should always be a short, concise summary of the object's "
"purpose.  For brevity, it should not explicitly state the object's name or "
"type, since these are available by other means (except if the name happens "
"to be a verb describing a function's operation).  This line should begin "
"with a capital letter and end with a period."
msgstr ""
"Перший рядок завжди має бути коротким, лаконічним описом призначення "
"об’єкта. Для стислості, він не повинен явно вказувати ім’я чи тип об’єкта, "
"оскільки вони доступні іншими засобами (окрім випадків, коли ім’я є "
"дієсловом, що описує роботу функції). Цей рядок повинен починатися з великої "
"літери і закінчуватися крапкою."

msgid ""
"If there are more lines in the documentation string, the second line should "
"be blank, visually separating the summary from the rest of the description.  "
"The following lines should be one or more paragraphs describing the object's "
"calling conventions, its side effects, etc."
msgstr ""
"Якщо в рядку документації є більше рядків, другий рядок має бути порожнім, "
"візуально відокремлюючи резюме від решти опису. Наступні рядки мають бути "
"одним або декількома абзацами, що описують умови виклику об’єкта, його "
"побічні ефекти тощо."

msgid ""
"The Python parser does not strip indentation from multi-line string literals "
"in Python, so tools that process documentation have to strip indentation if "
"desired.  This is done using the following convention. The first non-blank "
"line *after* the first line of the string determines the amount of "
"indentation for the entire documentation string.  (We can't use the first "
"line since it is generally adjacent to the string's opening quotes so its "
"indentation is not apparent in the string literal.)  Whitespace "
"\"equivalent\" to this indentation is then stripped from the start of all "
"lines of the string.  Lines that are indented less should not occur, but if "
"they occur all their leading whitespace should be stripped.  Equivalence of "
"whitespace should be tested after expansion of tabs (to 8 spaces, normally)."
msgstr ""
"Синтаксичний аналізатор Python не видаляє відступи з багаторядкових рядкових "
"літералів у Python, тому інструменти, які обробляють документацію, за "
"бажанням мають видаляти відступи. Це робиться за допомогою наступної угоди. "
"Перший непорожній рядок *після* першого рядка рядка визначає величину "
"відступу для всього рядка документації. (Ми не можемо використати перший "
"рядок, оскільки він зазвичай примикає до початкових лапок рядка, тому його "
"відступ не видно в рядковому літералі.) Пробіли, \"еквівалентні\" цьому "
"відступу, потім видаляються з початку всіх рядків рядка . Рядки з меншим "
"відступом не повинні з’являтися, але якщо вони трапляються, усі їх початкові "
"пробіли мають бути видалені. Еквівалентність пробілів слід перевіряти після "
"розширення табуляції (зазвичай до 8 пробілів)."

msgid "Here is an example of a multi-line docstring::"
msgstr "Ось приклад багаторядкового документального рядка::"

msgid "Function Annotations"
msgstr "Анотації до функцій"

msgid ""
":ref:`Function annotations <function>` are completely optional metadata "
"information about the types used by user-defined functions (see :pep:`3107` "
"and :pep:`484` for more information)."
msgstr ""
":ref:`Анотації функцій <function>` є абсолютно необов’язковою інформацією "
"метаданих про типи, які використовуються визначеними користувачем функціями "
"(див. :pep:`3107` і :pep:`484` для отримання додаткової інформації)."

msgid ""
":term:`Annotations <function annotation>` are stored in the :attr:"
"`__annotations__` attribute of the function as a dictionary and have no "
"effect on any other part of the function.  Parameter annotations are defined "
"by a colon after the parameter name, followed by an expression evaluating to "
"the value of the annotation.  Return annotations are defined by a literal ``-"
">``, followed by an expression, between the parameter list and the colon "
"denoting the end of the :keyword:`def` statement.  The following example has "
"a required argument, an optional argument, and the return value annotated::"
msgstr ""
":term:`Анотації <function annotation>` зберігаються в атрибуті :attr:"
"`__annotations__` функції як словник і не впливають на будь-яку іншу частину "
"функції. Анотації параметрів визначаються двокрапкою після назви параметра, "
"за якою слідує вираз, що обчислює значення анотації. Анотації повернення "
"визначаються літералом ``->``, за яким іде вираз між списком параметрів і "
"двокрапкою, що позначає кінець оператора :keyword:`def`. У наступному "
"прикладі є обов’язковий аргумент, необов’язковий аргумент і значення, що "
"повертається, з анотацією::"

msgid "Intermezzo: Coding Style"
msgstr "Intermezzo: стиль кодування"

msgid ""
"Now that you are about to write longer, more complex pieces of Python, it is "
"a good time to talk about *coding style*.  Most languages can be written (or "
"more concise, *formatted*) in different styles; some are more readable than "
"others. Making it easy for others to read your code is always a good idea, "
"and adopting a nice coding style helps tremendously for that."
msgstr ""
"Тепер, коли ви збираєтеся писати довші, складніші частини Python, саме час "
"поговорити про *стиль кодування*. Більшість мов можуть бути написані (або "
"стисло, *форматовано*) різними стилями; деякі більш читабельні, ніж інші. "
"Полегшити читання вашого коду для інших – це завжди гарна ідея, і "
"застосування гарного стилю кодування надзвичайно допомагає в цьому."

msgid ""
"For Python, :pep:`8` has emerged as the style guide that most projects "
"adhere to; it promotes a very readable and eye-pleasing coding style.  Every "
"Python developer should read it at some point; here are the most important "
"points extracted for you:"
msgstr ""
"Для Python :pep:`8` став керівництвом зі стилю, якого дотримуються більшість "
"проектів; він сприяє дуже читабельному та приємному оку стилю кодування. "
"Кожен розробник Python повинен колись прочитати його; ось найважливіші "
"моменти, виділені для вас:"

msgid "Use 4-space indentation, and no tabs."
msgstr "Використовуйте відступ із 4 пробілами без табуляції."

msgid ""
"4 spaces are a good compromise between small indentation (allows greater "
"nesting depth) and large indentation (easier to read).  Tabs introduce "
"confusion, and are best left out."
msgstr ""
"4 пробіли є хорошим компромісом між малим відступом (дозволяє більшу глибину "
"вкладення) та великим відступом (легше читати). Вкладки створюють плутанину, "
"тому їх краще не використовувати."

msgid "Wrap lines so that they don't exceed 79 characters."
msgstr "Переносити рядки так, щоб вони не перевищували 79 символів."

msgid ""
"This helps users with small displays and makes it possible to have several "
"code files side-by-side on larger displays."
msgstr ""
"Це допомагає користувачам із невеликими дисплеями та дає змогу мати декілька "
"файлів коду поруч на більших дисплеях."

msgid ""
"Use blank lines to separate functions and classes, and larger blocks of code "
"inside functions."
msgstr ""
"Використовуйте порожні рядки для розділення функцій і класів, а також більші "
"блоки коду всередині функцій."

msgid "When possible, put comments on a line of their own."
msgstr "Якщо можливо, розмістіть коментарі в окремому рядку."

msgid "Use docstrings."
msgstr "Використовуйте рядки документів."

msgid ""
"Use spaces around operators and after commas, but not directly inside "
"bracketing constructs: ``a = f(1, 2) + g(3, 4)``."
msgstr ""
"Використовуйте пробіли навколо операторів і після ком, але не безпосередньо "
"всередині конструкцій у дужках: ``a = f(1, 2) + g(3, 4)``."

msgid ""
"Name your classes and functions consistently; the convention is to use "
"``UpperCamelCase`` for classes and ``lowercase_with_underscores`` for "
"functions and methods.  Always use ``self`` as the name for the first method "
"argument (see :ref:`tut-firstclasses` for more on classes and methods)."
msgstr ""
"Послідовно назвіть свої класи та функції; Угода передбачає використання "
"``UpperCamelCase`` для класів і ``lowercase_with_underscores`` для функцій і "
"методів. Завжди використовуйте ``self`` як назву для першого аргументу "
"методу (перегляньте :ref:`tut-firstclasses` для отримання додаткової "
"інформації про класи та методи)."

msgid ""
"Don't use fancy encodings if your code is meant to be used in international "
"environments.  Python's default, UTF-8, or even plain ASCII work best in any "
"case."
msgstr ""
"Не використовуйте химерні кодування, якщо ваш код призначений для "
"використання в міжнародних середовищах. За замовчуванням Python, UTF-8 або "
"навіть звичайний ASCII найкраще працюють у будь-якому випадку."

msgid ""
"Likewise, don't use non-ASCII characters in identifiers if there is only the "
"slightest chance people speaking a different language will read or maintain "
"the code."
msgstr ""
"Так само не використовуйте в ідентифікаторах символи, відмінні від ASCII, "
"якщо є лише найменший шанс, що люди, які розмовляють іншою мовою, прочитають "
"або збережуть код."

msgid "Footnotes"
msgstr "Виноски"

msgid ""
"Actually, *call by object reference* would be a better description, since if "
"a mutable object is passed, the caller will see any changes the callee makes "
"to it (items inserted into a list)."
msgstr ""
"Насправді *виклик за посиланням на об’єкт* був би кращим описом, оскільки "
"якщо передано змінний об’єкт, абонент побачить будь-які зміни, внесені до "
"нього викликаним (елементи, вставлені в список)."
